{% comment %}
  Custom T-Shirt Design Studio Section
  Enhanced with hex color picker, undo, invert, flip, placement guide, and more
  PLUS: Image layers, Curved text, Full export, Animations, Gradients, Templates, Auto-save
{% endcomment %}

<script src="{{ 'designer-enhancements.js' | asset_url }}" defer></script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Inter:wght@700&family=Playfair+Display:wght@700&family=Montserrat:wght@700&family=Oswald:wght@700&family=Raleway:wght@700&family=Lato:wght@700&family=Roboto:wght@700&family=Open+Sans:wght@700&family=Poppins:wght@700&family=Merriweather:wght@700&family=Ubuntu:wght@700&family=Nunito:wght@700&family=Rubik:wght@700&family=Work+Sans:wght@700&family=Quicksand:wght@700&family=Outfit:wght@700&family=Space+Grotesk:wght@700&family=Libre+Baskerville:wght@700&family=Crimson+Text:wght@700&family=Archivo+Black&family=Righteous&family=Bangers&family=Pacifico&family=Dancing+Script:wght@700&family=Permanent+Marker&family=Caveat:wght@700&family=Satisfy&family=Shadows+Into+Light&family=Lobster&family=Abril+Fatface&family=Alfa+Slab+One&family=Anton&family=Fjalla+One&family=Russo+One&family=Teko:wght@700&display=swap" rel="stylesheet">

  <style>
    .custom-tshirt-studio-{{ section.id }} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .custom-tshirt-studio-{{ section.id }} {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        min-height: 100vh;
        color: #e2e8f0;
        padding: 0;
      width: 100%;
        overflow-x: hidden; /* Prevent horizontal scroll */
        box-sizing: border-box;
    }

    .cts-header-{{ section.id }} {
        background: rgba(15, 23, 42, 0.8);
        backdrop-filter: blur(10px);
        padding: 20px 40px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      display: flex;
        justify-content: space-between;
      align-items: center;
    }
    
    .cts-header-{{ section.id }} h1 {
        font-size: 24px;
        font-weight: 700;
        background: linear-gradient(135deg, #60a5fa, #a78bfa);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .cts-header-actions-{{ section.id }} {
        display: flex;
        gap: 12px;
    }

    .cts-header-btn-{{ section.id }} {
        padding: 10px 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .cts-header-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .cts-header-btn-{{ section.id }}:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .cts-container-{{ section.id }} {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px 20px;
        display: grid;
        grid-template-columns: 120px 1fr 400px;
        gap: 20px;
    }

    /* ============================================
       THUMBNAIL GALLERY SIDEBAR
       ============================================ */
    .cts-thumbnail-gallery-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding: 10px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        max-height: 600px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(96, 165, 250, 0.5) transparent;
    }

    .cts-thumbnail-gallery-{{ section.id }}::-webkit-scrollbar {
        width: 6px;
    }

    .cts-thumbnail-gallery-{{ section.id }}::-webkit-scrollbar-track {
        background: transparent;
    }

    .cts-thumbnail-gallery-{{ section.id }}::-webkit-scrollbar-thumb {
        background: rgba(96, 165, 250, 0.5);
        border-radius: 3px;
    }

    .cts-thumbnail-item-{{ section.id }} {
        position: relative;
        width: 100px;
        height: 100px;
        border-radius: 12px;
        overflow: hidden;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-thumbnail-item-{{ section.id }}:hover {
        border-color: rgba(96, 165, 250, 0.5);
        transform: translateX(5px);
    }

    .cts-thumbnail-item-{{ section.id }}.active {
        border-color: #60a5fa;
        box-shadow: 0 0 20px rgba(96, 165, 250, 0.4);
    }

    .cts-thumbnail-img-{{ section.id }} {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .cts-thumbnail-label-{{ section.id }} {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
        padding: 4px 6px;
        font-size: 10px;
        font-weight: 600;
        text-align: center;
        color: white;
    }

    .cts-preview-section-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .cts-preview-card-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        overflow: auto; /* Allow scrolling for zoomed content */
        max-height: none; /* Remove any max-height constraints */
        width: 100%; /* Ensure full width */
        box-sizing: border-box; /* Include padding in width */
    }

    .cts-mockup-stage-{{ section.id }} {
        position: relative;
        width: 100%;
        aspect-ratio: 1;
        background: linear-gradient(135deg, #27e1c1 0%, #667eea 20%, #764ba2 35%, #f093fb 50%, #4facfe 65%, #27e1c1 100%);
        background-size: 300% 300%;
        animation: gradientShift-{{ section.id }} 15s ease infinite;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 25px 80px rgba(39, 225, 193, 0.2);
        transition: width 0.3s ease, height 0.3s ease;
        min-width: 0; /* Allow shrinking below 100% */
    }

    @keyframes gradientShift-{{ section.id }} {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    .cts-mockup-canvas-{{ section.id }} {
      position: relative;
      width: 100%;
        height: 100%;
        background: #f8fafc;
        border-radius: 16px;
        overflow: auto; /* Changed from hidden to allow scrolling when zoomed */
      display: flex;
      align-items: center;
        justify-content: center;
        transform-origin: center center;
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
        overscroll-behavior: contain; /* Prevent scroll chaining */
        scroll-behavior: smooth; /* Smooth scrolling animation */
        min-height: 400px; /* Ensure minimum height on mobile */
        box-sizing: border-box; /* Include padding in dimensions */
    }

    .cts-tshirt-container-{{ section.id }} {
        position: relative;
        width: 85%;
        height: 85%;
    }

    .cts-tshirt-image-{{ section.id }} {
      width: 100%;
      height: 100%;
        object-fit: contain;
        transition: opacity 0.4s ease;
        will-change: opacity;
    }
    
    .cts-design-overlay-{{ section.id }} {
      position: absolute;
        width: 37%;
        height: 42%;
        left: 50%;
        top: 29%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: move;
        transition: all 0.2s ease;
    }

    .cts-design-overlay-{{ section.id }}:hover {
        outline: 2px dashed rgba(96, 165, 250, 0.5);
        outline-offset: 4px;
    }

    .cts-design-text-{{ section.id }} {
        font-family: 'Bebas Neue', sans-serif;
        font-size: 32px;
        font-weight: bold;
        color: #000000;
        text-align: center;
        user-select: none;
        pointer-events: none;
    }

    .cts-design-image-{{ section.id }} {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        pointer-events: none;
    }

    /* Placement Guide Overlay */
    .cts-placement-guide-{{ section.id }} {
        position: absolute;
        width: 37%;
        height: 42%;
        left: 50%;
        top: 29%;
        transform: translateX(-50%);
        border: 2px dashed rgba(96, 165, 250, 0.6);
        background: rgba(96, 165, 250, 0.1);
        pointer-events: none;
        display: none;
        z-index: 10;
    }

    .cts-placement-guide-{{ section.id }}.active {
        display: block;
    }

    .cts-placement-guide-{{ section.id }}::before {
        content: 'SAFE PRINT AREA';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 12px;
        font-weight: 700;
        color: rgba(96, 165, 250, 0.8);
        letter-spacing: 2px;
    }

    /* Canvas Zoom Control Styles */
    .cts-zoom-control-{{ section.id }} {
        margin-top: 20px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .cts-zoom-label-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 15px;
        font-weight: 600;
        color: white;
        margin-bottom: 12px;
    }
    
    .cts-zoom-label-{{ section.id }} span:first-child {
        font-size: 20px;
    }
    
    .cts-zoom-slider-group-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .cts-zoom-slider-{{ section.id }} {
        flex: 1;
        height: 6px;
        border-radius: 999px;
        background: rgba(255, 255, 255, 0.1);
        outline: none;
        cursor: pointer;
        -webkit-appearance: none;
        appearance: none;
    }
    
    .cts-zoom-slider-{{ section.id }}::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
        width: 20px;
        height: 20px;
      border-radius: 50%;
        background: linear-gradient(135deg, #27e1c1, #667eea);
      cursor: pointer;
        box-shadow: 0 2px 8px rgba(39, 225, 193, 0.4);
        transition: transform 0.2s;
    }
    
    .cts-zoom-slider-{{ section.id }}::-webkit-slider-thumb:hover {
      transform: scale(1.15);
    }
    
    .cts-zoom-slider-{{ section.id }}::-moz-range-thumb {
        width: 20px;
        height: 20px;
      border-radius: 50%;
        background: linear-gradient(135deg, #27e1c1, #667eea);
      cursor: pointer;
        border: none;
        box-shadow: 0 2px 8px rgba(39, 225, 193, 0.4);
        transition: transform 0.2s;
    }
    
    .cts-zoom-slider-{{ section.id }}::-moz-range-thumb:hover {
      transform: scale(1.15);
    }
    
    .cts-zoom-btn-{{ section.id }} {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-size: 20px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        line-height: 1;
    }
    
    .cts-zoom-btn-{{ section.id }}:hover {
        background: rgba(39, 225, 193, 0.2);
        border-color: #27e1c1;
      transform: scale(1.05);
    }
    
    .cts-zoom-btn-{{ section.id }}:active {
        transform: scale(0.95);
    }
    
    .cts-zoom-value-{{ section.id }} {
        min-width: 60px;
        text-align: center;
        font-size: 15px;
        font-weight: 700;
        color: white;
        background: rgba(255, 255, 255, 0.1);
        padding: 8px 12px;
        border-radius: 8px;
    }

    .cts-quick-actions-{{ section.id }} {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .cts-quick-action-btn-{{ section.id }} {
        flex: 1;
        min-width: 150px;
        padding: 14px 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .cts-quick-action-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .cts-controls-panel-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 20px;
        /* Removed max-height to allow full expansion without scrollbar */
        padding-right: 10px;
    }

    /* Scrollbar styles removed - controls panel now expands fully */

    .cts-control-card-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 24px;
    }

    .cts-control-card-{{ section.id }} h3 {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #f1f5f9;
    }
    
    /* Color Palette Helper Button */
    .cts-palette-helper-btn-{{ section.id }} {
        padding: 6px 12px;
        background: rgba(39, 225, 193, 0.1);
        border: 1px solid rgba(39, 225, 193, 0.3);
        border-radius: 8px;
        color: #27e1c1;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .cts-palette-helper-btn-{{ section.id }}:hover {
        background: rgba(39, 225, 193, 0.2);
        border-color: #27e1c1;
        transform: translateY(-1px);
    }
    
    /* Color Palette Modal */
    .cts-color-palette-modal-{{ section.id }} {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px);
        z-index: 10000;
        padding: 20px;
        overflow-y: auto;
    }
    
    .cts-color-palette-modal-{{ section.id }}.active {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .cts-color-palette-content-{{ section.id }} {
        background: linear-gradient(135deg, #1e293b, #0f172a);
        border: 2px solid rgba(39, 225, 193, 0.3);
        border-radius: 20px;
        padding: 30px;
        max-width: 700px;
        width: 100%;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
        box-shadow: 0 25px 80px rgba(39, 225, 193, 0.3);
    }
    
    .cts-color-palette-header-{{ section.id }} {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    }
    
    .cts-color-palette-header-{{ section.id }} h2 {
        margin: 0;
        font-size: 24px;
        font-weight: 700;
        color: white;
    }
    
    .cts-color-palette-close-{{ section.id }} {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-size: 20px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .cts-color-palette-close-{{ section.id }}:hover {
        background: rgba(239, 68, 68, 0.2);
        border-color: #ef4444;
        transform: rotate(90deg);
    }
    
    .cts-color-category-{{ section.id }} {
        margin-bottom: 24px;
    }
    
    .cts-color-category-{{ section.id }} h4 {
        font-size: 14px;
        font-weight: 600;
        color: #27e1c1;
        margin: 0 0 12px 0;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .cts-color-samples-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 12px;
    }
    
    .cts-color-sample-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 12px;
        cursor: pointer;
        transition: all 0.2s;
        text-align: center;
    }
    
    .cts-color-sample-{{ section.id }}:hover {
        border-color: #27e1c1;
        background: rgba(39, 225, 193, 0.1);
        transform: translateY(-2px);
    }
    
    .cts-color-sample-box-{{ section.id }} {
        width: 100%;
        height: 60px;
        border-radius: 8px;
        margin-bottom: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    
    .cts-color-sample-name-{{ section.id }} {
        font-size: 12px;
        font-weight: 600;
        color: white;
        margin-bottom: 4px;
    }
    
    .cts-color-sample-hex-{{ section.id }} {
        font-size: 11px;
        font-weight: 500;
        color: rgba(255, 255, 255, 0.6);
        font-family: 'Courier New', monospace;
    }

    .cts-control-group-{{ section.id }} {
        margin-bottom: 20px;
    }

    .cts-control-group-{{ section.id }}:last-child {
        margin-bottom: 0;
    }

    .cts-control-card-{{ section.id }} label {
        display: block;
        font-size: 13px;
        font-weight: 500;
        color: #cbd5e1;
        margin-bottom: 8px;
    }

    .cts-text-input-{{ section.id }} {
        width: 100%;
        padding: 12px 16px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        color: white;
        font-size: 14px;
        font-family: inherit;
        transition: all 0.2s;
    }

    .cts-text-input-{{ section.id }}:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    textarea.cts-text-input-{{ section.id }} {
        resize: vertical;
        min-height: 80px;
    }

    .cts-file-input-{{ section.id }} {
        display: none;
    }

    .cts-file-upload-btn-{{ section.id }} {
        width: 100%;
        padding: 12px;
        background: rgba(96, 165, 250, 0.1);
        border: 2px dashed rgba(96, 165, 250, 0.3);
        border-radius: 10px;
        color: #60a5fa;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        text-align: center;
        display: block;
    }

    .cts-file-upload-btn-{{ section.id }}:hover {
        background: rgba(96, 165, 250, 0.15);
        border-color: rgba(96, 165, 250, 0.5);
    }

    .cts-color-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 8px;
        margin-bottom: 12px;
    }

    .cts-color-option-{{ section.id }} {
        aspect-ratio: 1;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s;
        position: relative;
    }

    .cts-color-option-{{ section.id }}:hover {
        transform: scale(1.1);
    }

    .cts-color-option-{{ section.id }}.active {
        border-color: white;
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
    }

    /* SVG Hexagonal Color Picker with Brightness Slider */
    .hex-picker-container-{{ section.id }} {
        position: relative;
    }

    .hex-picker-grid-wrapper-{{ section.id }} {
        display: flex;
        gap: 16px;
        padding: 20px;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        margin-bottom: 16px;
    }

    .hex-svg-container-{{ section.id }} {
        flex: 1;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 8px;
        padding: 12px;
    }

    .hex-svg-{{ section.id }} {
        width: 100%;
        height: auto;
        display: block;
    }

    .hex-svg-{{ section.id }} polygon {
        cursor: pointer;
        transition: transform 0.15s ease;
    }

    .hex-svg-{{ section.id }} polygon:hover {
        transform: scale(1.03);
        filter: brightness(1.1);
    }

    .hex-svg-{{ section.id }} polygon.selected {
        stroke: #60a5fa !important;
        stroke-width: 2.5 !important;
        filter: brightness(1.2) drop-shadow(0 0 6px rgba(96, 165, 250, 0.6));
    }

    /* Brightness Slider */
    .brightness-slider-container-{{ section.id }} {
        width: 40px;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        user-select: none;
    }

    .brightness-slider-track-{{ section.id }} {
        position: relative;
        width: 24px;
        height: 256px;
        border-radius: 12px;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(0, 0, 0, 0.2);
        cursor: pointer;
    }

    .brightness-slider-input-{{ section.id }} {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        -webkit-appearance: slider-vertical;
        appearance: slider-vertical;
        writing-mode: bt-lr; /* For vertical slider in some browsers */
    }

    .brightness-slider-label-{{ section.id }} {
        font-size: 10px;
        color: rgba(255, 255, 255, 0.4);
        margin-top: 8px;
        text-align: center;
    }

    .hex-display-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
        background: rgba(0, 0, 0, 0.2);
        padding: 12px 16px;
        border-radius: 8px;
    }

    .cts-hex-preview-{{ section.id }} {
        width: 40px;
        height: 40px;
        border-radius: 6px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

    .cts-hex-input-{{ section.id }} {
        flex: 1;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff;
        padding: 10px 12px;
        border-radius: 6px;
        font-size: 14px;
        font-family: 'Courier New', monospace;
        transition: all 0.2s ease;
        text-transform: uppercase;
    }

    .cts-hex-input-{{ section.id }}:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    /* Transform Controls */
    .cts-transform-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
    }

    .cts-transform-btn-{{ section.id }} {
        padding: 12px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        color: white;
        font-size: 13px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
    }

    .cts-transform-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-transform-btn-{{ section.id }}.active {
        background: rgba(96, 165, 250, 0.2);
        border-color: #60a5fa;
    }

    .cts-slider-container-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .cts-slider-{{ section.id }} {
        flex: 1;
        height: 6px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
        outline: none;
        -webkit-appearance: none;
    }

    .cts-slider-{{ section.id }}::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 18px;
        height: 18px;
        background: #60a5fa;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
    }

    .cts-slider-{{ section.id }}::-moz-range-thumb {
        width: 18px;
        height: 18px;
        background: #60a5fa;
        border-radius: 50%;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
    }

    .cts-slider-value-{{ section.id }} {
        font-size: 14px;
        font-weight: 600;
        color: #60a5fa;
        min-width: 45px;
        text-align: right;
    }

    .cts-primary-btn-{{ section.id }} {
        width: 100%;
        padding: 16px;
        background: linear-gradient(135deg, #60a5fa, #a78bfa);
        border: none;
        border-radius: 12px;
        color: white;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        box-shadow: 0 8px 24px rgba(96, 165, 250, 0.3);
    }

    .cts-primary-btn-{{ section.id }}:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 32px rgba(96, 165, 250, 0.4);
    }

    /* Font Search Box */
    .cts-font-search-{{ section.id }} {
        position: relative;
        margin-bottom: 12px;
    }

    .cts-font-search-{{ section.id }} input {
        width: 100%;
        padding: 10px 36px 10px 12px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        font-size: 14px;
        transition: border-color 0.2s;
        box-sizing: border-box;
        background: rgba(255, 255, 255, 0.05);
        color: white;
    }

    .cts-font-search-{{ section.id }} input:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    .cts-font-search-icon-{{ section.id }} {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.5);
        pointer-events: none;
    }

    /* Font Category Tabs */
    .cts-font-categories-{{ section.id }} {
        display: flex;
        gap: 8px;
        margin-bottom: 12px;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        scrollbar-width: none;
        padding-bottom: 4px;
    }

    .cts-font-categories-{{ section.id }}::-webkit-scrollbar {
        display: none;
    }

    .cts-font-category-{{ section.id }} {
        padding: 6px 14px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        cursor: pointer;
        white-space: nowrap;
        transition: all 0.2s;
        user-select: none;
        color: rgba(255, 255, 255, 0.8);
    }

    .cts-font-category-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-font-category-{{ section.id }}.active {
        background: #60a5fa;
        color: white;
        border-color: #60a5fa;
    }

    /* Font Grid Container */
    .cts-font-selector-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        gap: 10px;
        max-height: 400px;
        overflow-y: auto;
        padding: 12px;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Individual Font Options */
    .cts-font-option-{{ section.id }} {
        padding: 16px 12px;
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 18px;
        font-weight: 700;
        position: relative;
        overflow: hidden;
        min-height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .cts-font-option-{{ section.id }}:hover {
        border-color: #60a5fa;
        background: rgba(96, 165, 250, 0.1);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .cts-font-option-{{ section.id }}.active {
        border-color: #60a5fa;
        background: rgba(96, 165, 250, 0.2);
        box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.3);
    }

    .cts-font-option-{{ section.id }}.active::before {
        content: '✓';
        position: absolute;
        top: 4px;
        right: 6px;
        background: #60a5fa;
        color: white;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
    }

    .cts-font-option-{{ section.id }}.hidden {
        display: none;
    }

    /* Custom Scrollbar */
    .cts-font-selector-{{ section.id }}::-webkit-scrollbar {
        width: 8px;
    }

    .cts-font-selector-{{ section.id }}::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 4px;
    }

    .cts-font-selector-{{ section.id }}::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
    }

    .cts-font-selector-{{ section.id }}::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    /* No Results Message */
    .cts-font-no-results-{{ section.id }} {
        grid-column: 1 / -1;
        text-align: center;
        padding: 40px 20px;
        color: rgba(255, 255, 255, 0.5);
        font-size: 14px;
    }

    /* T-Shirt Color Picker in Controls Panel */
    .cts-tshirt-color-picker-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
    }

    .cts-tshirt-color-option-{{ section.id }} {
        padding: 20px;
        border-radius: 12px;
        text-align: center;
      cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .cts-tshirt-color-option-{{ section.id }}:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }

    .cts-tshirt-color-option-{{ section.id }}.active {
        box-shadow: 0 0 0 3px #60a5fa;
        transform: scale(1.05);
    }

    /* Tablet Styles */
    @media (max-width: 1024px) {
        .cts-container-{{ section.id }} {
            grid-template-columns: 1fr;
        }

        .cts-thumbnail-gallery-{{ section.id }} {
            flex-direction: row;
            max-height: none;
            overflow-x: auto;
            overflow-y: hidden;
            padding: 10px;
        }

        .cts-thumbnail-item-{{ section.id }}:hover {
            transform: translateY(-5px);
        }
    }
    
    /* Mobile Styles - Large Phones & Small Tablets */
    @media (max-width: 768px) {
        .cts-header-{{ section.id }} h1 {
            font-size: 24px;
        }
        
        .cts-header-actions-{{ section.id }} {
            flex-direction: column;
            gap: 8px;
            width: 100%;
        }
        
        .cts-header-btn-{{ section.id }} {
            width: 100%;
            min-height: 44px; /* Touch-friendly */
        }
        
        .cts-mockup-stage-{{ section.id }} {
            padding: 20px 10px;
        }
        
        .cts-mockup-canvas-{{ section.id }} {
            max-width: 100%;
            height: auto;
            aspect-ratio: 1;
        }
        
        .cts-controls-section-{{ section.id }} {
            padding: 20px 15px;
        }
        
        .cts-control-card-{{ section.id }} {
            padding: 16px;
        }
        
        .cts-control-card-{{ section.id }} h3 {
            font-size: 16px;
            margin-bottom: 12px;
        }
        
        .cts-color-palette-{{ section.id }} {
            grid-template-columns: repeat(auto-fit, minmax(35px, 1fr));
            gap: 8px;
        }
        
        .cts-color-option-{{ section.id }} {
            width: 35px;
            height: 35px;
            min-height: 44px; /* Touch target */
            min-width: 44px;
        }
        
        .cts-transform-btn-{{ section.id }},
        .cts-tshirt-color-btn-{{ section.id }} {
                          padding: 12px 16px; 
                          font-size: 14px; 
            min-height: 44px; /* Touch-friendly */
        }
        
        .cts-file-upload-btn-{{ section.id }} {
                          padding: 14px 20px; 
            font-size: 15px;
            min-height: 44px;
        }
        
        /* Zoom Control - Mobile Optimized */
        .cts-zoom-control-{{ section.id }} {
            padding: 16px;
            margin-top: 16px;
            position: sticky;
            bottom: 0;
            z-index: 100;
            background: rgba(15, 23, 42, 0.95);
                          backdrop-filter: blur(10px);
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.3);
        }
        
        .cts-zoom-btn-{{ section.id }} {
            min-width: 44px;
            min-height: 44px;
        }
        
        /* Workflow Steps - Stack on Mobile */
        .cts-workflow-steps-{{ section.id }} {
            flex-direction: column;
        }
        
        .cts-workflow-step-{{ section.id }} {
            max-width: 100%;
        }
        
        /* Form Grid - Single Column */
        #customerInfoForm-{{ section.id }} {
            padding: 24px 16px !important;
            margin: 20px 10px !important;
        }
        
        #customerInfoForm-{{ section.id }} > form > div[style*="grid-template-columns"] {
            grid-template-columns: 1fr !important;
        }
    }
    
    /* Mobile Styles - Standard Phones */
    @media (max-width: 480px) {
        .custom-tshirt-studio-{{ section.id }} {
            padding: 0; /* Remove padding to prevent white space */
            overflow-x: hidden; /* Prevent horizontal scroll */
        }
        
        .cts-container-{{ section.id }} {
            padding: 12px 8px; /* Tighter padding for mobile */
            gap: 12px; /* Reduced gap */
            width: 100%;
            max-width: 100%; /* Full width on mobile */
            box-sizing: border-box;
        }

        .cts-thumbnail-gallery-{{ section.id }} {
            padding: 8px;
            gap: 8px;
        }

        .cts-thumbnail-item-{{ section.id }} {
            min-width: 80px;
            height: 80px;
        }
        
        .cts-header-{{ section.id }} {
            padding: 12px 8px;
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
        }
        
        .cts-header-{{ section.id }} h1 {
            font-size: 18px;
            margin: 0;
        }
        
        .cts-preview-section-{{ section.id }},
        .cts-preview-card-{{ section.id }} {
            width: 100%;
            max-width: 100%;
            box-sizing: border-box;
        }
        
        .cts-preview-card-{{ section.id }} {
            padding: 12px 8px; /* Tighter padding */
        }
        
        .cts-mockup-canvas-{{ section.id }} {
            min-height: 280px !important; /* Reduce canvas height */
            max-height: 350px !important;
        }
        
        .cts-mockup-stage-{{ section.id }} {
            padding: 10px 5px; /* Tighter padding */
            max-width: 280px; /* Limit canvas width */
            margin: 0 auto;
        }
        
        .cts-tshirt-container-{{ section.id }} img {
            max-height: 280px !important; /* Smaller t-shirt */
        }
        
        .cts-controls-section-{{ section.id }} {
            padding: 8px;
        }
        
        .cts-control-card-{{ section.id }} {
            padding: 10px 8px;
            margin-bottom: 10px;
        }
        
        .cts-control-card-{{ section.id }} h3 {
            font-size: 15px;
            margin-bottom: 10px;
        }
        
        .cts-control-group-{{ section.id }} {
            margin-bottom: 12px;
        }
        
        .cts-text-input-{{ section.id }} {
            font-size: 14px;
            padding: 10px;
            min-height: 80px;
        }
        
        .cts-slider-{{ section.id }} {
            height: 8px;
        }
        
        .cts-slider-value-{{ section.id }} {
            font-size: 13px;
            min-width: 50px;
        }
        
        /* Zoom Control - Sticky on Mobile */
        .cts-zoom-control-{{ section.id }} {
            position: sticky;
            bottom: 0;
                      z-index: 100;
                        background: rgba(15, 23, 42, 0.95);
                        backdrop-filter: blur(10px);
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.3);
            padding: 12px;
            margin-top: 12px;
        }
        
        /* Hex Color Picker - Scale Down */
        #hexColorPicker-{{ section.id }} svg {
            max-width: 200px !important;
            height: auto !important;
        }
        
        /* Mobile Touch Feedback - Highlight Active Hex */
        #hexColorPicker-{{ section.id }} polygon {
            transition: opacity 0.1s ease;
            cursor: pointer;
        }
        
        #hexColorPicker-{{ section.id }} polygon.active-hex {
            stroke: white !important;
            stroke-width: 3 !important;
            opacity: 1 !important;
        }
        
        /* Floating Magnifier Preview */
        .cts-color-magnifier-{{ section.id }} {
            position: fixed;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 4px solid white;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.6),
                        0 0 0 2px rgba(0, 0, 0, 0.3);
            pointer-events: none;
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.5);
            transition: opacity 0.15s ease, transform 0.15s ease;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: 600;
            color: white;
            text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
        }
        
        .cts-color-magnifier-{{ section.id }}.visible {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
        
        .cts-color-magnifier-{{ section.id }}::after {
            content: '';
            position: absolute;
            bottom: -12px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-top: 10px solid white;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
        }
        
        /* Quick Actions - Full Width Buttons */
        .cts-quick-actions-{{ section.id }} {
            grid-template-columns: 1fr;
                      gap: 10px;
        }
        
        .cts-action-btn-{{ section.id }} {
                          font-size: 14px;
            padding: 14px 20px;
        }
        
        /* Workflow Steps - Smaller */
        .cts-workflow-{{ section.id }} {
            gap: 10px;
            padding: 8px;
        }
        
        .cts-workflow-step-{{ section.id }} {
            padding: 12px 10px;
        }
        
        .cts-workflow-icon-{{ section.id }} {
            width: 40px;
            height: 40px;
            font-size: 20px;
        }
        
        .cts-workflow-step-{{ section.id }} h3 {
            font-size: 14px;
            margin-bottom: 4px;
        }
        
        .cts-workflow-step-{{ section.id }} p {
            font-size: 12px;
            line-height: 1.4;
        }
        
        .cts-workflow-action-btn-{{ section.id }} {
            padding: 8px 14px;
            font-size: 12px;
        }
        
        /* Submit Request Button - Compact */
        .cts-submit-request-btn-{{ section.id }} {
            padding: 14px 24px !important;
            font-size: 15px !important;
        }
    }
    
    /* Samsung Galaxy S25 & Similar (360px - 412px) */
    @media (max-width: 428px) and (min-width: 360px) {
        .cts-mockup-canvas-{{ section.id }} {
            min-height: 260px !important;
            max-height: 320px !important;
        }
        
        .cts-mockup-stage-{{ section.id }} {
            max-width: 260px;
        }
        
        .cts-tshirt-container-{{ section.id }} img {
            max-height: 260px !important;
        }
        
        .cts-header-{{ section.id }} h1 {
            font-size: 17px;
        }
        
        .cts-control-card-{{ section.id }} {
            padding: 8px;
        }
        
        /* Reduce spacing between sections */
        .cts-container-{{ section.id }} {
            gap: 8px;
        }
        
        .cts-control-group-{{ section.id }} {
            margin-bottom: 8px;
        }
    }
    
    /* Mobile Styles - Small Phones (iPhone SE, etc.) */
    @media (max-width: 375px) {
        .cts-header-{{ section.id }} h1 {
                  font-size: 18px; 
        }
        
        .cts-control-card-{{ section.id }} h3 {
            font-size: 14px;
        }
        
        .cts-transform-group-{{ section.id }} {
            grid-template-columns: 1fr;
                  gap: 8px;
        }
        
        .cts-transform-btn-{{ section.id }} {
                  width: 100%;
        }
        
        .cts-tshirt-color-options-{{ section.id }} {
            grid-template-columns: 1fr;
                  gap: 8px;
        }
        
        .cts-tshirt-color-btn-{{ section.id }} {
                  width: 100%;
        }
        
        /* Color Palette - Larger Touch Targets */
        .cts-color-option-{{ section.id }} {
            width: 40px;
            height: 40px;
        }
        
        /* Font Selector - Mobile Responsive */
        .cts-font-selector-{{ section.id }} {
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 8px;
            max-height: 320px;
            padding: 8px;
        }
        
        .cts-font-option-{{ section.id }} {
            padding: 14px 10px;
            font-size: 16px;
            min-height: 52px;
        }
        
        .cts-font-search-{{ section.id }} input {
            font-size: 16px;
            padding: 12px 36px 12px 12px;
        }
        
        .cts-font-category-{{ section.id }} {
            padding: 8px 12px;
            font-size: 11px;
        }
    }
    
    /* Mobile Touch Feedback for Font Options */
    @media (hover: none) {
        .cts-font-option-{{ section.id }}:active {
            transform: scale(0.95);
            background: rgba(96, 165, 250, 0.2);
        }
    }
    
    /* Touch Device Improvements */
    @media (hover: none) and (pointer: coarse) {
        /* Increase all interactive elements for touch */
        .cts-header-btn-{{ section.id }},
        .cts-transform-btn-{{ section.id }},
        .cts-tshirt-color-btn-{{ section.id }},
        .cts-file-upload-btn-{{ section.id }},
        .cts-action-btn-{{ section.id }},
        .cts-workflow-action-btn-{{ section.id }} {
            min-height: 48px;
            min-width: 48px;
        }
        
        /* Remove hover effects on touch devices */
        .cts-header-btn-{{ section.id }}:hover,
        .cts-transform-btn-{{ section.id }}:hover,
        .cts-action-btn-{{ section.id }}:hover {
            transform: none;
        }
        
        /* Add active state for touch feedback */
        .cts-header-btn-{{ section.id }}:active,
        .cts-transform-btn-{{ section.id }}:active,
        .cts-action-btn-{{ section.id }}:active {
            transform: scale(0.95);
            opacity: 0.8;
        }
    }

    /* ===== CUSTOMER INFORMATION FORM STYLING ===== */
    
    /* Light Mode - Ensure select text is visible */
    #customerInfoForm-{{ section.id }} select,
    #customerInfoForm-{{ section.id }} input,
    #customerInfoForm-{{ section.id }} textarea {
        color: #1f2937 !important;
    }
    
    #customerInfoForm-{{ section.id }} select option {
        color: #1f2937 !important;
        background: white !important;
    }
    
    /* Dark Mode - Customer Information Form */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} {
        background: linear-gradient(135deg, rgba(30, 41, 59, 0.5), rgba(51, 65, 85, 0.5)) !important;
        border-color: rgba(39, 225, 193, 0.3) !important;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3) !important;
    }
    
    /* Dark Mode - Title */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} h2 {
        color: #27e1c1 !important;
    }
    
    /* Dark Mode - Subtitle and labels */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} p,
    [data-theme="dark"] #customerInfoForm-{{ section.id }} label {
        color: #e2e8f0 !important;
    }
    
    /* Dark Mode - Input fields */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} input,
    [data-theme="dark"] #customerInfoForm-{{ section.id }} select,
    [data-theme="dark"] #customerInfoForm-{{ section.id }} textarea {
        background: rgba(30, 41, 59, 0.8) !important;
        border-color: rgba(148, 163, 184, 0.3) !important;
        color: #f8fafc !important;
    }
    
    /* Dark Mode - Select dropdown options */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} select option {
        background: #1e293b !important;
        color: #f8fafc !important;
    }
    
    /* Dark Mode - Placeholder text */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} input::placeholder,
    [data-theme="dark"] #customerInfoForm-{{ section.id }} textarea::placeholder {
        color: #94a3b8 !important;
    }
    
    /* Dark Mode - Focus states */
    [data-theme="dark"] #customerInfoForm-{{ section.id }} input:focus,
    [data-theme="dark"] #customerInfoForm-{{ section.id }} select:focus,
    [data-theme="dark"] #customerInfoForm-{{ section.id }} textarea:focus {
        border-color: #27e1c1 !important;
        box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.2) !important;
    }

    /* ============================================
       FONT SIZE CONTROL STYLES
       ============================================ */
    .cts-font-size-control-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
        background: rgba(255, 255, 255, 0.05);
        padding: 12px;
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .cts-font-size-btn-{{ section.id }} {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .cts-font-size-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.05);
    }
    
    .cts-font-size-btn-{{ section.id }}:active {
        transform: scale(0.95);
    }
    
    .cts-font-size-display-{{ section.id }} {
        min-width: 60px;
        text-align: center;
        font-size: 18px;
        font-weight: 700;
        color: #60a5fa;
    }
    
    .cts-font-size-slider-container-{{ section.id }} {
        flex: 1;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .cts-font-size-slider-{{ section.id }} {
        flex: 1;
        height: 6px;
        border-radius: 3px;
        background: rgba(255, 255, 255, 0.1);
        outline: none;
        -webkit-appearance: none;
    }
    
    .cts-font-size-slider-{{ section.id }}::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #60a5fa;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .cts-font-size-slider-{{ section.id }}::-webkit-slider-thumb:hover {
        background: #93c5fd;
        transform: scale(1.2);
    }
    
    .cts-font-size-slider-{{ section.id }}::-moz-range-thumb {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #60a5fa;
        cursor: pointer;
        border: none;
        transition: all 0.2s;
    }
    
    .cts-font-size-slider-{{ section.id }}::-moz-range-thumb:hover {
        background: #93c5fd;
        transform: scale(1.2);
    }

    /* ============================================
       CHARACTER COUNTER STYLES
       ============================================ */
    .cts-char-counter-{{ section.id }} {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 8px;
        font-size: 12px;
        color: #94a3b8;
        padding: 0 4px;
    }
    
    .cts-char-count-{{ section.id }} {
        font-weight: 600;
        transition: color 0.2s;
    }
    
    .cts-char-count-{{ section.id }}.warning {
        color: #fbbf24;
    }
    
    .cts-char-count-{{ section.id }}.danger {
        color: #ef4444;
    }
    
    .cts-char-limit-{{ section.id }} {
        font-size: 11px;
        opacity: 0.7;
    }

    /* ============================================
       TEXT & IMAGE CONTAINMENT SYSTEM
       ============================================ */
    .cts-design-overlay-{{ section.id }} {
        text-align: center;
        /* Keep existing positioning */
    }

    .cts-design-text-{{ section.id }} {
        /* Text wrapping without hiding */
        word-wrap: break-word;
        overflow-wrap: break-word;
        line-height: 1.2;
        /* Allow text to show even when image is present */
        position: relative;
        z-index: 2;
    }

    .cts-design-image-{{ section.id }} {
        /* Constrain images to print area */
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        /* Allow image to layer with text */
        position: relative;
        z-index: 1;
    }

    /* Warning animations */
    @keyframes warningPulse-{{ section.id }} {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    @keyframes slideIn-{{ section.id }} {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    /* ============================================
       ENHANCED DEBUG CONTROL PANEL
       Comprehensive metrics with collapsible sections
       ============================================ */
    .cts-debug-panel-{{ section.id }} {
        position: fixed;
        top: 80px;
        right: 20px;
        width: 380px;
        background: rgba(15, 23, 42, 0.98);
        backdrop-filter: blur(20px);
        border: 2px solid #60a5fa;
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        z-index: 10000;
        color: #e2e8f0;
        font-family: 'Monaco', 'Courier New', monospace;
        font-size: 12px;
        max-height: 90vh;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(96, 165, 250, 0.5) transparent;
    }

    .cts-debug-panel-{{ section.id }}::-webkit-scrollbar {
        width: 6px;
    }

    .cts-debug-panel-{{ section.id }}::-webkit-scrollbar-track {
        background: transparent;
    }

    .cts-debug-panel-{{ section.id }}::-webkit-scrollbar-thumb {
        background: rgba(96, 165, 250, 0.5);
        border-radius: 3px;
    }

    .cts-debug-header-{{ section.id }} {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid rgba(96, 165, 250, 0.3);
    }

    .cts-debug-title-{{ section.id }} {
        font-size: 14px;
        font-weight: bold;
        color: #60a5fa;
    }

    .cts-debug-close-{{ section.id }} {
        background: rgba(239, 68, 68, 0.2);
        border: 1px solid #ef4444;
        color: #ef4444;
        padding: 4px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 11px;
        transition: all 0.2s;
    }

    .cts-debug-close-{{ section.id }}:hover {
        background: rgba(239, 68, 68, 0.3);
    }

    .cts-debug-section-{{ section.id }} {
        margin-bottom: 15px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        overflow: hidden;
    }

    .cts-debug-section-header-{{ section.id }} {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        cursor: pointer;
        user-select: none;
        transition: background 0.2s;
    }

    .cts-debug-section-header-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.08);
    }

    .cts-debug-section-title-{{ section.id }} {
        font-size: 13px;
        font-weight: bold;
        color: #a78bfa;
    }

    .cts-debug-section-toggle-{{ section.id }} {
        font-size: 10px;
        color: #94a3b8;
        transition: transform 0.2s;
    }

    .cts-debug-section-toggle-{{ section.id }}.collapsed {
        transform: rotate(-90deg);
    }

    .cts-debug-section-content-{{ section.id }} {
        padding: 12px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .cts-debug-section-content-{{ section.id }}.collapsed {
        display: none;
    }

    .cts-debug-metric-{{ section.id }} {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .cts-debug-metric-{{ section.id }}:last-child {
        border-bottom: none;
    }

    .cts-debug-label-{{ section.id }} {
        color: #94a3b8;
        font-size: 11px;
        flex: 1;
    }

    .cts-debug-value-{{ section.id }} {
        color: #60a5fa;
        font-weight: bold;
        font-size: 12px;
        text-align: right;
    }

    .cts-debug-value-{{ section.id }}.warning {
        color: #fbbf24;
    }

    .cts-debug-value-{{ section.id }}.danger {
        color: #ef4444;
    }

    .cts-debug-value-{{ section.id }}.success {
        color: #10b981;
    }

    .cts-debug-value-{{ section.id }}.muted {
        color: #64748b;
    }

    .cts-debug-progress-{{ section.id }} {
        width: 100%;
        height: 4px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
        overflow: hidden;
        margin-top: 4px;
    }

    .cts-debug-progress-bar-{{ section.id }} {
        height: 100%;
        background: #60a5fa;
        transition: width 0.3s, background 0.3s;
    }

    .cts-debug-progress-bar-{{ section.id }}.warning {
        background: #fbbf24;
    }

    .cts-debug-progress-bar-{{ section.id }}.danger {
        background: #ef4444;
    }

    .cts-debug-slider-group-{{ section.id }} {
        margin-top: 10px;
    }

    .cts-debug-slider-{{ section.id }} {
        width: 100%;
        height: 6px;
        border-radius: 3px;
        background: rgba(255, 255, 255, 0.1);
        outline: none;
        -webkit-appearance: none;
        margin: 8px 0;
    }

    .cts-debug-slider-{{ section.id }}::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #60a5fa;
        cursor: pointer;
        box-shadow: 0 0 10px rgba(96, 165, 250, 0.5);
    }

    .cts-debug-slider-{{ section.id }}::-moz-range-thumb {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #60a5fa;
        cursor: pointer;
        border: none;
        box-shadow: 0 0 10px rgba(96, 165, 250, 0.5);
    }

    .cts-debug-slider-label-{{ section.id }} {
        display: flex;
        justify-content: space-between;
        font-size: 10px;
        color: #94a3b8;
        margin-top: 4px;
    }

    .cts-debug-btn-{{ section.id }} {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 12px;
        font-weight: bold;
        margin-top: 8px;
        transition: all 0.2s;
        border: none;
    }

    .cts-debug-btn-primary-{{ section.id }} {
        background: rgba(96, 165, 250, 0.2);
        border: 1px solid #60a5fa;
        color: #60a5fa;
    }

    .cts-debug-btn-primary-{{ section.id }}:hover {
        background: rgba(96, 165, 250, 0.3);
    }

    .cts-debug-btn-secondary-{{ section.id }} {
        background: rgba(167, 139, 250, 0.2);
        border: 1px solid #a78bfa;
        color: #a78bfa;
    }

    .cts-debug-btn-secondary-{{ section.id }}:hover {
        background: rgba(167, 139, 250, 0.3);
    }

    .cts-debug-status-{{ section.id }} {
        padding: 10px;
        border-radius: 8px;
        margin-top: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 13px;
    }

    .cts-debug-status-{{ section.id }}.fits {
        background: rgba(16, 185, 129, 0.2);
        border: 1px solid #10b981;
        color: #10b981;
    }

    .cts-debug-status-{{ section.id }}.exceeds {
        background: rgba(239, 68, 68, 0.2);
        border: 1px solid #ef4444;
        color: #ef4444;
    }

    .cts-debug-indicator-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
        margin-top: 8px;
    }

    .cts-debug-indicator-{{ section.id }} {
        padding: 6px;
        border-radius: 6px;
        text-align: center;
        font-size: 10px;
        font-weight: bold;
    }

    .cts-debug-indicator-{{ section.id }}.fits {
        background: rgba(16, 185, 129, 0.15);
        color: #10b981;
    }

    .cts-debug-indicator-{{ section.id }}.exceeds {
        background: rgba(239, 68, 68, 0.15);
        color: #ef4444;
    }

    .cts-debug-edge-distances-{{ section.id }} {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        gap: 4px;
        margin-top: 8px;
        padding: 8px;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 6px;
    }

    .cts-debug-edge-{{ section.id }} {
        text-align: center;
        font-size: 10px;
        padding: 4px;
        border-radius: 4px;
        background: rgba(96, 165, 250, 0.1);
        color: #60a5fa;
    }

    .cts-debug-edge-{{ section.id }}.center {
        background: transparent;
        color: #64748b;
    }
</style>

<div class="custom-tshirt-studio-{{ section.id }}" id="custom-tshirt-studio-{{ section.id }}" style="display: none;">
    <div class="cts-header-{{ section.id }}">
        <h1>✨ Custom T-Shirt Designer</h1>
        <div class="cts-header-actions-{{ section.id }}">
            <button class="cts-header-btn-{{ section.id }}" id="undoBtn-{{ section.id }}" disabled>↶ Undo</button>
            <button class="cts-header-btn-{{ section.id }}" id="guideBtn-{{ section.id }}">📐 Placement Guide</button>
              </div>
            </div>
            
    <div class="cts-container-{{ section.id }}">
        <!-- Thumbnail Gallery Sidebar -->
        <div class="cts-thumbnail-gallery-{{ section.id }}" id="thumbnailGallery-{{ section.id }}">
            <!-- Thumbnails will be generated by JavaScript -->
        </div>

        <div class="cts-preview-section-{{ section.id }}">
            <div class="cts-preview-card-{{ section.id }}">
                <div class="cts-mockup-stage-{{ section.id }}">
                    <div class="cts-mockup-canvas-{{ section.id }}" id="mockupCanvas-{{ section.id }}">
                        <div class="cts-tshirt-container-{{ section.id }}" id="tshirtContainer-{{ section.id }}">
                            <img 
                                class="cts-tshirt-image-{{ section.id }}" 
                                id="tshirtImage-{{ section.id }}"
                                src="{{ 'tshirt-view.png' | asset_url }}"
                                alt="T-shirt mockup">
                            
                            <!-- Placement Guide Overlay -->
                            <div class="cts-placement-guide-{{ section.id }}" id="placementGuide-{{ section.id }}"></div>
                            
                            <div class="cts-design-overlay-{{ section.id }}" id="designOverlay-{{ section.id }}">
                                <span class="cts-design-text-{{ section.id }}" id="designText-{{ section.id }}">YOUR DESIGN HERE</span>
      </div>
    </div>
  </div>
      </div>

                <!-- Canvas Zoom Control -->
                <div class="cts-zoom-control-{{ section.id }}">
                    <label class="cts-zoom-label-{{ section.id }}">
                        <span>🔍</span>
                        <span>Canvas Zoom</span>
                    </label>
                    <div class="cts-zoom-slider-group-{{ section.id }}">
                        <button class="cts-zoom-btn-{{ section.id }}" id="zoomOutBtn-{{ section.id }}" title="Zoom Out">−</button>
                        <input type="range" 
                               class="cts-zoom-slider-{{ section.id }}" 
                               id="canvasZoom-{{ section.id }}" 
                  min="50" 
                               max="200" 
                  value="100" 
                               step="5">
                        <button class="cts-zoom-btn-{{ section.id }}" id="zoomInBtn-{{ section.id }}" title="Zoom In">+</button>
                        <span class="cts-zoom-value-{{ section.id }}" id="zoomValue-{{ section.id }}">100%</span>
              </div>
            </div>
          </div>
          
            <div class="cts-quick-actions-{{ section.id }}">
                <button class="cts-quick-action-btn-{{ section.id }}" id="downloadBtn-{{ section.id }}">📥 Download Preview</button>
                <button class="cts-quick-action-btn-{{ section.id }}" id="shareBtn-{{ section.id }}">🔗 Share Design</button>
                <button class="cts-quick-action-btn-{{ section.id }}" id="resetBtn-{{ section.id }}">🔄 Reset All</button>
            </div>

            <!-- Submit Request Button - Primary CTA -->
            <div class="cts-quick-actions-{{ section.id }}" style="margin-top: 20px;">
                <button class="cts-submit-request-btn-{{ section.id }}" id="submitRequestBtn-{{ section.id }}" style="
                width: 100%;
                    padding: 18px 36px;
                    background: linear-gradient(135deg, #dc2626, #ef4444);
                    color: white;
                    border: none;
                  border-radius: 16px;
                    font-size: 18px;
                    font-weight: 700;
                      cursor: pointer;
                    transition: all 0.3s ease;
                    box-shadow: 0 8px 32px rgba(220, 38, 38, 0.4);
                    text-transform: uppercase;
                    letter-spacing: 1px;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                    gap: 10px;
                ">
                    🚀 Submit Your Design Request
                    </button>
              </div>
            </div>

        <div class="cts-controls-panel-{{ section.id }}">
            <div class="cts-control-card-{{ section.id }}">
                <h3>👕 T-Shirt Color</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Choose Background</label>
                    <div class="cts-tshirt-color-picker-{{ section.id }}">
                        <div class="cts-tshirt-color-option-{{ section.id }} active" 
                             data-color="white" 
                             style="background: white; border: 2px solid rgba(0, 0, 0, 0.1);"
                             title="White T-Shirt">
                            <span style="color: #64748b; font-size: 12px; font-weight: 600;">White</span>
            </div>
                        <div class="cts-tshirt-color-option-{{ section.id }}" 
                             data-color="black" 
                             style="background: #000000; border: 2px solid rgba(255, 255, 255, 0.1);"
                             title="Black T-Shirt">
                            <span style="color: #ffffff; font-size: 12px; font-weight: 600;">Black</span>
            </div>
            </div>
          </div>
        </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>📝 Design Text</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Your Text</label>
                    <textarea class="cts-text-input-{{ section.id }}" id="textInput-{{ section.id }}" placeholder="Enter your custom text..." maxlength="100">YOUR DESIGN HERE</textarea>
                    <!-- Character Counter -->
                    <div class="cts-char-counter-{{ section.id }}">
                        <span class="cts-char-count-{{ section.id }}" id="charCount-{{ section.id }}">
                            0 characters
                        </span>
                        <span class="cts-char-limit-{{ section.id }}">
                            Recommended max: 50
                        </span>
                    </div>
            </div>
                <!-- Font Size Control -->
                <div class="cts-control-group-{{ section.id }}">
                    <label>Font Size</label>
                    <div class="cts-font-size-control-{{ section.id }}">
                        <button type="button" class="cts-font-size-btn-{{ section.id }}" id="fontSizeDecrease-{{ section.id }}" title="Decrease font size">−</button>
                        <div class="cts-font-size-display-{{ section.id }}" id="fontSizeDisplay-{{ section.id }}">32px</div>
                        <button type="button" class="cts-font-size-btn-{{ section.id }}" id="fontSizeIncrease-{{ section.id }}" title="Increase font size">+</button>
                        <div class="cts-font-size-slider-container-{{ section.id }}">
                            <input type="range" class="cts-font-size-slider-{{ section.id }}" id="fontSizeSlider-{{ section.id }}" min="12" max="96" value="32" step="2">
                        </div>
                    </div>
                </div>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Font Style</label>
                    
                    <!-- Search Box -->
                    <div class="cts-font-search-{{ section.id }}">
                        <input type="text" 
                               id="fontSearch-{{ section.id }}" 
                               placeholder="Search fonts..."
                               autocomplete="off">
                        <span class="cts-font-search-icon-{{ section.id }}">🔍</span>
                    </div>
                    
                    <!-- Category Filters -->
                    <div class="cts-font-categories-{{ section.id }}">
                        <div class="cts-font-category-{{ section.id }} active" data-category="all">All</div>
                        <div class="cts-font-category-{{ section.id }}" data-category="sans-serif">Sans Serif</div>
                        <div class="cts-font-category-{{ section.id }}" data-category="serif">Serif</div>
                        <div class="cts-font-category-{{ section.id }}" data-category="display">Display</div>
                        <div class="cts-font-category-{{ section.id }}" data-category="handwriting">Handwriting</div>
                    </div>
                    
                    <!-- Font Grid -->
                    <div class="cts-font-selector-{{ section.id }}" id="fontSelector-{{ section.id }}">
                        <!-- Sans Serif Fonts -->
                        <div class="cts-font-option-{{ section.id }} active" data-font="'Bebas Neue', sans-serif" data-category="display" data-name="bebas" style="font-family: 'Bebas Neue', sans-serif;">BEBAS</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Inter', sans-serif" data-category="sans-serif" data-name="inter" style="font-family: 'Inter', sans-serif; font-weight: 700;">Inter</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Montserrat', sans-serif" data-category="sans-serif" data-name="montserrat" style="font-family: 'Montserrat', sans-serif; font-weight: 700;">Montserrat</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Raleway', sans-serif" data-category="sans-serif" data-name="raleway" style="font-family: 'Raleway', sans-serif; font-weight: 700;">Raleway</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Lato', sans-serif" data-category="sans-serif" data-name="lato" style="font-family: 'Lato', sans-serif; font-weight: 700;">Lato</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Roboto', sans-serif" data-category="sans-serif" data-name="roboto" style="font-family: 'Roboto', sans-serif; font-weight: 700;">Roboto</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Open Sans', sans-serif" data-category="sans-serif" data-name="open sans" style="font-family: 'Open Sans', sans-serif; font-weight: 700;">Open Sans</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Poppins', sans-serif" data-category="sans-serif" data-name="poppins" style="font-family: 'Poppins', sans-serif; font-weight: 700;">Poppins</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Ubuntu', sans-serif" data-category="sans-serif" data-name="ubuntu" style="font-family: 'Ubuntu', sans-serif; font-weight: 700;">Ubuntu</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Nunito', sans-serif" data-category="sans-serif" data-name="nunito" style="font-family: 'Nunito', sans-serif; font-weight: 700;">Nunito</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Rubik', sans-serif" data-category="sans-serif" data-name="rubik" style="font-family: 'Rubik', sans-serif; font-weight: 700;">Rubik</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Work Sans', sans-serif" data-category="sans-serif" data-name="work sans" style="font-family: 'Work Sans', sans-serif; font-weight: 700;">Work Sans</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Quicksand', sans-serif" data-category="sans-serif" data-name="quicksand" style="font-family: 'Quicksand', sans-serif; font-weight: 700;">Quicksand</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Outfit', sans-serif" data-category="sans-serif" data-name="outfit" style="font-family: 'Outfit', sans-serif; font-weight: 700;">Outfit</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Space Grotesk', sans-serif" data-category="sans-serif" data-name="space grotesk" style="font-family: 'Space Grotesk', sans-serif; font-weight: 700;">Space Grotesk</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="Arial, sans-serif" data-category="sans-serif" data-name="arial" style="font-family: Arial, sans-serif; font-weight: bold;">Arial</div>
                        
                        <!-- Serif Fonts -->
                        <div class="cts-font-option-{{ section.id }}" data-font="'Playfair Display', serif" data-category="serif" data-name="playfair" style="font-family: 'Playfair Display', serif; font-weight: 700;">Playfair</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Merriweather', serif" data-category="serif" data-name="merriweather" style="font-family: 'Merriweather', serif; font-weight: 700;">Merriweather</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Libre Baskerville', serif" data-category="serif" data-name="libre baskerville" style="font-family: 'Libre Baskerville', serif; font-weight: 700;">Libre Baskerville</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Crimson Text', serif" data-category="serif" data-name="crimson" style="font-family: 'Crimson Text', serif; font-weight: 700;">Crimson</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="Georgia, serif" data-category="serif" data-name="georgia" style="font-family: Georgia, serif; font-weight: bold;">Georgia</div>
                        
                        <!-- Display Fonts -->
                        <div class="cts-font-option-{{ section.id }}" data-font="'Oswald', sans-serif" data-category="display" data-name="oswald" style="font-family: 'Oswald', sans-serif; font-weight: 700;">Oswald</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Archivo Black', sans-serif" data-category="display" data-name="archivo" style="font-family: 'Archivo Black', sans-serif;">Archivo Black</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Righteous', sans-serif" data-category="display" data-name="righteous" style="font-family: 'Righteous', sans-serif;">Righteous</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Bangers', cursive" data-category="display" data-name="bangers" style="font-family: 'Bangers', cursive;">Bangers</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Abril Fatface', cursive" data-category="display" data-name="abril" style="font-family: 'Abril Fatface', cursive;">Abril</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Alfa Slab One', cursive" data-category="display" data-name="alfa" style="font-family: 'Alfa Slab One', cursive;">Alfa Slab</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Anton', sans-serif" data-category="display" data-name="anton" style="font-family: 'Anton', sans-serif;">Anton</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Fjalla One', sans-serif" data-category="display" data-name="fjalla" style="font-family: 'Fjalla One', sans-serif;">Fjalla</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Russo One', sans-serif" data-category="display" data-name="russo" style="font-family: 'Russo One', sans-serif;">Russo</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Teko', sans-serif" data-category="display" data-name="teko" style="font-family: 'Teko', sans-serif; font-weight: 700;">Teko</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="Impact, sans-serif" data-category="display" data-name="impact" style="font-family: Impact, sans-serif;">Impact</div>
                        
                        <!-- Handwriting Fonts -->
                        <div class="cts-font-option-{{ section.id }}" data-font="'Pacifico', cursive" data-category="handwriting" data-name="pacifico" style="font-family: 'Pacifico', cursive;">Pacifico</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Dancing Script', cursive" data-category="handwriting" data-name="dancing" style="font-family: 'Dancing Script', cursive; font-weight: 700;">Dancing Script</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Permanent Marker', cursive" data-category="handwriting" data-name="marker" style="font-family: 'Permanent Marker', cursive;">Permanent Marker</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Caveat', cursive" data-category="handwriting" data-name="caveat" style="font-family: 'Caveat', cursive; font-weight: 700;">Caveat</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Satisfy', cursive" data-category="handwriting" data-name="satisfy" style="font-family: 'Satisfy', cursive;">Satisfy</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Shadows Into Light', cursive" data-category="handwriting" data-name="shadows" style="font-family: 'Shadows Into Light', cursive;">Shadows Into Light</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Lobster', cursive" data-category="handwriting" data-name="lobster" style="font-family: 'Lobster', cursive;">Lobster</div>
                    </div>
                </div>
        </div>

            <div class="cts-control-card-{{ section.id }}">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
                    <h3 style="margin: 0;">🎨 Text Color</h3>
                    <button id="colorPaletteHelperBtn-{{ section.id }}" 
                            class="cts-palette-helper-btn-{{ section.id }}"
                            title="View common colors">
                        📋 Color Guide
                    </button>
            </div>

                <div class="hex-picker-container-{{ section.id }}">
                    <!-- SVG Hexagonal Color Grid + Brightness Slider -->
                    <div class="hex-picker-grid-wrapper-{{ section.id }}">
                        <div class="hex-svg-container-{{ section.id }}">
                            <svg id="hexSvg-{{ section.id }}" 
                                 class="hex-svg-{{ section.id }}" 
                                 role="img" 
                                 aria-label="Hexagonal color picker">
                                <defs>
                                    <filter id="hexShadow-{{ section.id }}" x="-50%" y="-50%" width="200%" height="200%">
                                        <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3"/>
                                    </filter>
                                </defs>
                            </svg>
            </div>

                        <!-- Brightness Slider -->
                        <div class="brightness-slider-container-{{ section.id }}">
                            <div class="brightness-slider-track-{{ section.id }}" id="brightnessTrack-{{ section.id }}">
                                <input type="range" 
                                       class="brightness-slider-input-{{ section.id }}" 
                                       id="brightnessSlider-{{ section.id }}"
                                       min="0" 
                                       max="100" 
                                       value="100"
                                       orient="vertical">
            </div>
                            <div class="brightness-slider-label-{{ section.id }}">Brightness</div>
          </div>
        </div>

                    <!-- Hex Display with Input -->
                    <div class="hex-display-{{ section.id }}">
                        <div class="cts-hex-preview-{{ section.id }}" id="hexPreview-{{ section.id }}" style="background: #000000;"></div>
                        <input type="text" 
                               class="cts-hex-input-{{ section.id }}" 
                               id="hexInput-{{ section.id }}"
                               placeholder="#000000" 
                               maxlength="7"
                               value="#000000">
        </div>
          </div>
        </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🔄 Transform</h3>
                <div class="cts-transform-grid-{{ section.id }}">
                    <button class="cts-transform-btn-{{ section.id }}" id="flipHBtn-{{ section.id }}">↔️ Flip H</button>
                    <button class="cts-transform-btn-{{ section.id }}" id="flipVBtn-{{ section.id }}">↕️ Flip V</button>
                    <button class="cts-transform-btn-{{ section.id }}" id="invertBtn-{{ section.id }}">🔁 Invert</button>
            </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🖼️ Upload Image</h3>
                <input type="file" class="cts-file-input-{{ section.id }}" id="imageUpload-{{ section.id }}" accept="image/png,image/jpeg,image/jpg,image/gif,image/webp,image/svg+xml">
                <label for="imageUpload-{{ section.id }}" class="cts-file-upload-btn-{{ section.id }}">
                    📤 Choose Image File
                </label>
                <p style="font-size: 12px; color: rgba(255, 255, 255, 0.6); margin: 8px 0 0 0; text-align: center; line-height: 1.4;">
                    Supported: PNG, JPG, JPEG, GIF, WebP, SVG<br>
                    <span style="font-size: 11px; opacity: 0.8;">Max size: 10MB</span>
            </p>
          </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>⚙️ Adjustments</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Size</label>
                    <div class="cts-slider-container-{{ section.id }}">
                        <input type="range" class="cts-slider-{{ section.id }}" id="sizeSlider-{{ section.id }}" min="50" max="200" value="100">
                        <span class="cts-slider-value-{{ section.id }}" id="sizeValue-{{ section.id }}">100%</span>
          </div>
        </div>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Rotation</label>
                    <div class="cts-slider-container-{{ section.id }}">
                        <input type="range" class="cts-slider-{{ section.id }}" id="rotateSlider-{{ section.id }}" min="-45" max="45" value="0">
                        <span class="cts-slider-value-{{ section.id }}" id="rotateValue-{{ section.id }}">0°</span>
      </div>
    </div>
  </div>

            {% comment %} ENHANCED FEATURES - Image layers, Curved text, Animations, Gradients, Templates, Auto-save {% endcomment %}
            {% render 'designer-enhanced-controls', section: section %}

            <button class="cts-primary-btn-{{ section.id }}" id="addToCartBtn-{{ section.id }}">🛒 Add to Cart - $24.99</button>
        </div>
    </div>

    <!-- Customer Information Form (Hidden by default) -->
    <div id="customerInfoForm-{{ section.id }}" style="display: none; margin: 40px auto; padding: 32px; background: linear-gradient(135deg, rgba(220, 38, 38, 0.05), rgba(239, 68, 68, 0.05)); border-radius: 20px; border: 2px solid rgba(220, 38, 38, 0.2); max-width: 700px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);">
        <div style="text-align: center; margin-bottom: 24px;">
            <div style="display: inline-flex; align-items: center; gap: 12px; margin-bottom: 8px;">
                <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #dc2626, #ef4444); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px;">
                    👤
        </div>
                <h2 style="margin: 0; font-size: 28px; font-weight: 800; color: #dc2626;">Customer Information</h2>
      </div>
            <p style="margin: 0; font-size: 15px; color: #6b7280;">Please fill in your details to submit your custom t-shirt request</p>
    </div>

        <form id="requestForm-{{ section.id }}" style="display: grid; gap: 16px;">
            <!-- Customer Details Row 1 -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Full Name *</label>
                    <input type="text" id="customerName-{{ section.id }}" required 
                           style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; transition: all 0.2s;"
                           onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                           onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
        </div>
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Email *</label>
                    <input type="email" id="customerEmail-{{ section.id }}" required 
                           style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; transition: all 0.2s;"
                           onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                           onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
      </div>
    </div>

            <!-- Customer Details Row 2 -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Phone Number</label>
                    <input type="tel" id="customerPhone-{{ section.id }}" 
                           style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; transition: all 0.2s;"
                           onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                           onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
                </div>
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">T-Shirt Size</label>
                    <select id="tshirtSize-{{ section.id }}" 
                            style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; cursor: pointer; transition: all 0.2s;"
                            onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                            onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
                        <option value="">Select Size</option>
                        <option value="XXS">XXS</option>
                        <option value="XS">XS</option>
                        <option value="S">S</option>
                        <option value="M">M</option>
                        <option value="L">L</option>
                        <option value="XL">XL</option>
                        <option value="XXL">XXL</option>
                        <option value="3XL">3XL</option>
          </select>
        </div>
        </div>

            <!-- Special Instructions -->
            <div>
                <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Special Instructions or Message</label>
                <textarea id="customerMessage-{{ section.id }}" rows="4" 
                          placeholder="Any special requirements, color preferences, or additional details..."
                          style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; resize: vertical; box-sizing: border-box; font-family: inherit; transition: all 0.2s;"
                          onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                          onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'"></textarea>
        </div>

            <!-- Action Buttons -->
            <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 8px;">
                <button type="button" id="cancelRequestBtn-{{ section.id }}" 
                        style="padding: 12px 28px; background: #6b7280; color: white; border: none; border-radius: 10px; font-size: 15px; cursor: pointer; font-weight: 600; transition: all 0.3s;"
                        onmouseover="this.style.background='#4b5563'"
                        onmouseout="this.style.background='#6b7280'">
                    Cancel
                </button>
                <button type="submit" id="submitFormBtn-{{ section.id }}" 
                        style="padding: 12px 32px; background: linear-gradient(135deg, #dc2626, #ef4444); color: white; border: none; border-radius: 10px; font-size: 15px; cursor: pointer; font-weight: 700; transition: all 0.3s; box-shadow: 0 4px 16px rgba(220, 38, 38, 0.3);"
                        onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 24px rgba(220, 38, 38, 0.4)'"
                        onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 16px rgba(220, 38, 38, 0.3)'">
                    🚀 Submit Request
                </button>
        </div>
        </form>
        
        <!-- Loading/Success Message -->
        <div id="formStatus-{{ section.id }}" style="display: none; margin-top: 20px; padding: 16px; border-radius: 10px; text-align: center; font-weight: 600;"></div>
          </div>
        </div>

<!-- Color Palette Helper Modal -->
<div class="cts-color-palette-modal-{{ section.id }}" id="colorPaletteModal-{{ section.id }}">
    <div class="cts-color-palette-content-{{ section.id }}">
        <div class="cts-color-palette-header-{{ section.id }}">
            <h2>🎨 Color Guide</h2>
            <button class="cts-color-palette-close-{{ section.id }}" id="colorPaletteClose-{{ section.id }}">✕</button>
    </div>

        <!-- Common Colors -->
        <div class="cts-color-category-{{ section.id }}">
            <h4>🔹 Basic Colors</h4>
            <div class="cts-color-samples-{{ section.id }}" id="basicColors-{{ section.id }}"></div>
        </div>

        <!-- Vibrant Colors -->
        <div class="cts-color-category-{{ section.id }}">
            <h4>🌈 Vibrant Colors</h4>
            <div class="cts-color-samples-{{ section.id }}" id="vibrantColors-{{ section.id }}"></div>
        </div>

        <!-- Pastel Colors -->
        <div class="cts-color-category-{{ section.id }}">
            <h4>🌸 Pastel Colors</h4>
            <div class="cts-color-samples-{{ section.id }}" id="pastelColors-{{ section.id }}"></div>
    </div>

        <!-- Dark Colors -->
        <div class="cts-color-category-{{ section.id }}">
            <h4>🌑 Dark Colors</h4>
            <div class="cts-color-samples-{{ section.id }}" id="darkColors-{{ section.id }}"></div>
        </div>

        <!-- Metallic/Special -->
        <div class="cts-color-category-{{ section.id }}">
            <h4>✨ Special Colors</h4>
            <div class="cts-color-samples-{{ section.id }}" id="specialColors-{{ section.id }}"></div>
        </div>
      </div>
    </div>

<!-- Supabase Scripts for Image Upload (optional - falls back to base64 if not available) -->
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script src="{{ 'supabase-config.js' | asset_url }}"></script>
<script src="{{ 'supabase-custom-requests.js' | asset_url }}"></script>

<!-- EmailJS Script -->
<script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<script>
(function() {
    const sectionId = '{{ section.id }}';
    const designOverlay = document.getElementById(`designOverlay-${sectionId}`);
    const designText = document.getElementById(`designText-${sectionId}`);
    const textInput = document.getElementById(`textInput-${sectionId}`);
    const imageUpload = document.getElementById(`imageUpload-${sectionId}`);
    const sizeSlider = document.getElementById(`sizeSlider-${sectionId}`);
    const rotateSlider = document.getElementById(`rotateSlider-${sectionId}`);
    const sizeValue = document.getElementById(`sizeValue-${sectionId}`);
    const rotateValue = document.getElementById(`rotateValue-${sectionId}`);
    const resetBtn = document.getElementById(`resetBtn-${sectionId}`);
    const undoBtn = document.getElementById(`undoBtn-${sectionId}`);
    const guideBtn = document.getElementById(`guideBtn-${sectionId}`);
    const placementGuide = document.getElementById(`placementGuide-${sectionId}`);
    const hexInput = document.getElementById(`hexInput-${sectionId}`);
    const hexPreview = document.getElementById(`hexPreview-${sectionId}`);
    const flipHBtn = document.getElementById(`flipHBtn-${sectionId}`);
    const flipVBtn = document.getElementById(`flipVBtn-${sectionId}`);
    const invertBtn = document.getElementById(`invertBtn-${sectionId}`);
    const tshirtImage = document.getElementById(`tshirtImage-${sectionId}`);
    
    // Canvas Zoom Elements
    const canvasZoomSlider = document.getElementById(`canvasZoom-${sectionId}`);
    const zoomValue = document.getElementById(`zoomValue-${sectionId}`);
    const zoomInBtn = document.getElementById(`zoomInBtn-${sectionId}`);
    const zoomOutBtn = document.getElementById(`zoomOutBtn-${sectionId}`);
    const mockupCanvas = document.getElementById(`mockupCanvas-${sectionId}`);

    let uploadedImage = null;
    let currentFont = "'Bebas Neue', sans-serif";
    let currentColor = '#000000';
    let flipH = false;
    let flipV = false;
    let inverted = false;
    let guideActive = false;
    let tshirtColor = 'white';
    let currentView = 'front';
    
    // Undo history
    let undoHistory = [];
    const MAX_UNDO = 20;

    // ============================================
    // CHARACTER COUNTER
    // ============================================
    
    const charCountDisplay = document.getElementById(`charCount-${sectionId}`);
    
    // Character limits
    const CHAR_WARNING = 40;  // Show warning color
    const CHAR_DANGER = 50;   // Show danger color
    const CHAR_MAX = 100;     // Hard limit (set in HTML maxlength)
    
    // Update character counter
    function updateCharCounter() {
        if (!textInput || !charCountDisplay) return;
        
        const length = textInput.value.length;
        
        // Update text
        charCountDisplay.textContent = `${length} character${length !== 1 ? 's' : ''}`;
        
        // Update color based on length
        charCountDisplay.classList.remove('warning', 'danger');
        
        if (length >= CHAR_DANGER) {
            charCountDisplay.classList.add('danger');
        } else if (length >= CHAR_WARNING) {
            charCountDisplay.classList.add('warning');
        }
    }
    
    // Add event listener to text input for character counting
    if (textInput && charCountDisplay) {
        textInput.addEventListener('input', updateCharCounter);
        
        // Initialize counter on page load
        setTimeout(() => {
            updateCharCounter();
        }, 100);
        
        console.log('✅ Character counter initialized');
    }

    // ============================================
    // FONT SIZE CONTROL
    // ============================================
    
    const fontSizeSlider = document.getElementById(`fontSizeSlider-${sectionId}`);
    const fontSizeDisplay = document.getElementById(`fontSizeDisplay-${sectionId}`);
    const fontSizeIncrease = document.getElementById(`fontSizeIncrease-${sectionId}`);
    const fontSizeDecrease = document.getElementById(`fontSizeDecrease-${sectionId}`);
    
    let currentFontSize = 32; // Default font size
    
    // Update font size function
    function updateFontSize(size) {
        currentFontSize = size;
        if (designText) {
            designText.style.fontSize = size + 'px';
        }
        if (fontSizeDisplay) {
            fontSizeDisplay.textContent = size + 'px';
        }
        if (fontSizeSlider) {
            fontSizeSlider.value = size;
        }
    }
    
    // Font size slider
    if (fontSizeSlider) {
        fontSizeSlider.addEventListener('input', (e) => {
            updateFontSize(parseInt(e.target.value));
        });
        
        fontSizeSlider.addEventListener('change', () => {
            saveState();
        });
    }
    
    // Increase button
    if (fontSizeIncrease) {
        fontSizeIncrease.addEventListener('click', () => {
            const newSize = Math.min(96, currentFontSize + 2);
            updateFontSize(newSize);
            saveState();
        });
    }
    
    // Decrease button
    if (fontSizeDecrease) {
        fontSizeDecrease.addEventListener('click', () => {
            const newSize = Math.max(12, currentFontSize - 2);
            updateFontSize(newSize);
            saveState();
        });
    }
    
    console.log('✅ Font size control initialized');

    // ============================================
    // PRODUCT THUMBNAIL GALLERY
    // ============================================
    
    const productGallery = {
        views: [
            { id: 'front', label: 'Front', image: "{{ 'tshirt-view.png' | asset_url }}" },
            { id: 'back', label: 'Back', image: "{{ 'tshirt-view.png' | asset_url }}" },
            { id: 'side', label: 'Side', image: "{{ 'Women-side.png' | asset_url }}" },
            { id: 'model', label: 'Model', image: "{{ 'Girl-Model.png' | asset_url }}" }
        ]
    };
    
    // Initialize thumbnail gallery
    function initializeThumbnailGallery() {
        const thumbnailGallery = document.getElementById(`thumbnailGallery-${sectionId}`);
        
        if (!thumbnailGallery) {
            console.warn('⚠️ Thumbnail gallery not found');
            return;
        }
        
        // Create thumbnails
        const thumbnailHTML = productGallery.views.map((view, index) => `
            <div class="cts-thumbnail-item-${sectionId} ${index === 0 ? 'active' : ''}" 
                 data-view="${view.id}">
                <img src="${view.image}" 
                     alt="${view.label}" 
                     class="cts-thumbnail-img-${sectionId}">
                <div class="cts-thumbnail-label-${sectionId}">${view.label}</div>
            </div>
        `).join('');
        thumbnailGallery.innerHTML = thumbnailHTML;
        
        // Add event listeners
        document.querySelectorAll(`.cts-thumbnail-item-${sectionId}`).forEach(thumb => {
            thumb.addEventListener('click', function() {
                const viewId = this.getAttribute('data-view');
                switchView(viewId);
            });
        });
        
        console.log('✅ Thumbnail gallery initialized with', productGallery.views.length, 'views');
    }
    
    // Switch between views
    function switchView(viewId) {
        currentView = viewId;
        const view = productGallery.views.find(v => v.id === viewId);
        
        if (view) {
            // Update t-shirt image with fade effect
            tshirtImage.style.opacity = '0';
            setTimeout(() => {
                tshirtImage.src = view.image;
                tshirtImage.style.opacity = '1';
            }, 200);
            
            // Update active thumbnail states
            document.querySelectorAll(`.cts-thumbnail-item-${sectionId}`).forEach(thumb => {
                thumb.classList.toggle('active', thumb.getAttribute('data-view') === viewId);
            });
            
            console.log(`🔄 Switched to view: ${view.label}`);
        }
    }

    // ============================================
    // SVG HEXAGONAL COLOR PICKER (Axial Coordinates + HSV Brightness)
    // ============================================
    
    const SQRT3 = Math.sqrt(3);
    const HEX_RADIUS = 5;      // Number of hexagon rings
    const HEX_SIZE = 22;       // Pixel radius of each hexagon
    const HEX_PADDING = 24;    // Padding around the grid
    
    // HSV state for brightness control
    let pickerHue = 0;
    let pickerSat = 0;
    let pickerVal = 1;
    
    // Convert axial coordinates (q, r) to pixel position (pointy-top hex)
    function axialToPixel(q, r, size) {
        const x = size * (1.5 * q);
        const y = size * (SQRT3 * (r + q / 2));
        return { x, y };
    }
    
    // Generate polygon points for a hexagon
    function polygonPoints(cx, cy, size) {
        const points = [];
        for (let i = 0; i < 6; i++) {
            const angle = (Math.PI / 180) * (60 * i - 30);
            const x = cx + size * Math.cos(angle);
            const y = cy + size * Math.sin(angle);
            points.push(`${x},${y}`);
        }
        return points.join(' ');
    }
    
    // Convert HSL to HEX
    function hslToHex(h, s, l) {
        s /= 100;
        l /= 100;
        const k = n => (n + h / 30) % 12;
        const a = s * Math.min(l, 1 - l);
        const f = n => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
        const r = Math.round(255 * f(0));
        const g = Math.round(255 * f(8));
        const b = Math.round(255 * f(4));
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }
    
    // Convert HSV to HEX
    function hsvToHex(h, s, v) {
        s = Math.max(0, Math.min(1, s));
        v = Math.max(0, Math.min(1, v));
        const c = v * s;
        const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
        const m = v - c;
        let r = 0, g = 0, b = 0;
        if (0 <= h && h < 60) [r, g, b] = [c, x, 0];
        else if (60 <= h && h < 120) [r, g, b] = [x, c, 0];
        else if (120 <= h && h < 180) [r, g, b] = [0, c, x];
        else if (180 <= h && h < 240) [r, g, b] = [0, x, c];
        else if (240 <= h && h < 300) [r, g, b] = [x, 0, c];
        else [r, g, b] = [c, 0, x];
        const toHex = (n) => Math.round((n + m) * 255).toString(16).padStart(2, '0');
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
    }
    
    // Extract hue from axial coordinates
    function hueFromAxial(q, r) {
        const angle = Math.atan2(SQRT3 * (r + q / 2), 1.5 * q);
        return ((angle * 180) / Math.PI + 360) % 360;
    }
    
    // Extract saturation from axial coordinates
    function satFromAxial(q, r, radius) {
        const x = q;
        const y = -q - r;
        const z = r;
        const dist = Math.max(Math.abs(x), Math.abs(y), Math.abs(z));
        return dist === 0 ? 0 : Math.min(1, 0.9 * (dist / radius) + 0.1);
    }
    
    // Map axial coordinate to a color (hue by angle, lightness by distance)
    function colorForAxial(q, r, radius) {
        const x = q;
        const y = -q - r;
        const z = r;
        const dist = Math.max(Math.abs(x), Math.abs(y), Math.abs(z));
        const angle = Math.atan2(SQRT3 * (r + q / 2), 1.5 * q);
        const hue = ((angle * 180) / Math.PI + 360) % 360;
        const l = 85 - (dist / radius) * 40; // 85% at center to ~45% at edge
        const s = dist === 0 ? 0 : 80; // Neutral center
        return hslToHex(hue, s, l);
    }
    
    // Update brightness slider gradient
    function updateBrightnessSliderGradient() {
        const track = document.getElementById(`brightnessTrack-${sectionId}`);
        if (track) {
            const topColor = hsvToHex(pickerHue, pickerSat, 1);
            const bottomColor = '#000000';
            track.style.background = `linear-gradient(to bottom, ${topColor} 0%, ${bottomColor} 100%)`;
        }
    }
    
    // Build all hex cells in a disk of given radius
    function buildAxialHexDisk(radius) {
        const cells = [];
        for (let q = -radius; q <= radius; q++) {
            const r1 = Math.max(-radius, -q - radius);
            const r2 = Math.min(radius, -q + radius);
            for (let r = r1; r <= r2; r++) {
                cells.push({ q, r });
            }
        }
        return cells;
    }
    
    // Initialize SVG hexagonal picker
    function initSVGHexagonalPicker() {
        const svg = document.getElementById(`hexSvg-${sectionId}`);
        const cells = buildAxialHexDisk(HEX_RADIUS);
        
        // Create magnifier element for mobile preview
        let magnifier = document.getElementById(`colorMagnifier-${sectionId}`);
        if (!magnifier) {
            magnifier = document.createElement('div');
            magnifier.id = `colorMagnifier-${sectionId}`;
            magnifier.className = `cts-color-magnifier-${sectionId}`;
            document.body.appendChild(magnifier);
        }
        
        // Calculate viewBox dimensions
        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
        cells.forEach(({ q, r }) => {
            const { x, y } = axialToPixel(q, r, HEX_SIZE);
            minX = Math.min(minX, x - HEX_SIZE);
            maxX = Math.max(maxX, x + HEX_SIZE);
            minY = Math.min(minY, y - HEX_SIZE);
            maxY = Math.max(maxY, y + HEX_SIZE);
        });
        
        const viewBoxX = minX - HEX_PADDING;
        const viewBoxY = minY - HEX_PADDING;
        const viewBoxWidth = (maxX - minX) + 2 * HEX_PADDING;
        const viewBoxHeight = (maxY - minY) + 2 * HEX_PADDING;
        
        svg.setAttribute('viewBox', `${viewBoxX} ${viewBoxY} ${viewBoxWidth} ${viewBoxHeight}`);
        
        // Create hexagon polygons
        cells.forEach(({ q, r }) => {
            const { x, y } = axialToPixel(q, r, HEX_SIZE);
            const fill = colorForAxial(q, r, HEX_RADIUS);
            const points = polygonPoints(x, y, HEX_SIZE * 0.95);
            const isCenter = q === 0 && r === 0;
            const stroke = isCenter ? '#ffffff' : '#111827';
            const strokeWidth = isCenter ? 1.25 : 1;
            
            const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
            polygon.setAttribute('points', points);
            polygon.setAttribute('fill', fill);
            polygon.setAttribute('stroke', stroke);
            polygon.setAttribute('stroke-width', strokeWidth);
            polygon.setAttribute('filter', `url(#hexShadow-${sectionId})`);
            polygon.dataset.color = fill.toUpperCase();
            
            // Store color data for touch handling
            polygon.dataset.q = q;
            polygon.dataset.r = r;
            polygon.dataset.color = fill;
            
            // Desktop click handler
            polygon.addEventListener('click', () => {
                saveState();
                
                // Update HSV state from axial coordinates
                pickerHue = hueFromAxial(q, r);
                pickerSat = satFromAxial(q, r, HEX_RADIUS);
                // Keep current brightness value
                
                // Generate color with current brightness
                const newColor = hsvToHex(pickerHue, pickerSat, pickerVal).toUpperCase();
                currentColor = newColor;
                designText.style.color = currentColor;
                hexInput.value = currentColor;
                hexPreview.style.background = currentColor;
                updateSVGHexSelection(currentColor);
                updateBrightnessSliderGradient();
            });
            
            svg.appendChild(polygon);
        });
        
        // Mobile Touch Variables
        let isDragging = false;
        let activePolygon = null;
        
        // Helper: Get polygon at touch point
        function getPolygonAtPoint(x, y) {
            magnifier.style.pointerEvents = 'none';
            const element = document.elementFromPoint(x, y);
            magnifier.style.pointerEvents = 'none';
            
            if (element && element.tagName === 'polygon' && element.dataset.color) {
                return element;
            }
            return null;
        }
        
        // Helper: Update magnifier position and color
        function updateMagnifier(x, y, color) {
            magnifier.style.left = x + 'px';
            magnifier.style.top = (y - 100) + 'px'; // Position above finger
            magnifier.style.backgroundColor = color;
            magnifier.textContent = color;
            
            // Adjust text color for contrast
            const rgb = parseInt(color.slice(1), 16);
            const r = (rgb >> 16) & 0xff;
            const g = (rgb >> 8) & 0xff;
            const b = rgb & 0xff;
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            magnifier.style.color = brightness > 128 ? '#000' : '#fff';
        }
        
        // Helper: Set active hexagon
        function setActiveHex(polygon) {
            if (activePolygon) {
                activePolygon.classList.remove('active-hex');
            }
            if (polygon) {
                polygon.classList.add('active-hex');
                activePolygon = polygon;
            }
        }
        
        // Helper: Select color
        function selectColorFromPolygon(polygon) {
            if (!polygon) return;
            
            saveState();
            const q = parseInt(polygon.dataset.q);
            const r = parseInt(polygon.dataset.r);
            
            pickerHue = hueFromAxial(q, r);
            pickerSat = satFromAxial(q, r, HEX_RADIUS);
            const newColor = hsvToHex(pickerHue, pickerSat, pickerVal).toUpperCase();
            currentColor = newColor;
            designText.style.color = currentColor;
            hexInput.value = currentColor;
            hexPreview.style.background = currentColor;
            updateSVGHexSelection(currentColor);
            updateBrightnessSliderGradient();
            
            console.log('✅ Color selected:', newColor);
        }
        
        // MOBILE: Touch Start - Show Magnifier
        svg.addEventListener('touchstart', (e) => {
            e.preventDefault();
            isDragging = true;
            const touch = e.touches[0];
            const polygon = getPolygonAtPoint(touch.clientX, touch.clientY);
            
            if (polygon && polygon.dataset.color) {
                const color = polygon.dataset.color;
                setActiveHex(polygon);
                updateMagnifier(touch.clientX, touch.clientY, color);
                magnifier.classList.add('visible');
            }
        }, { passive: false });
        
        // MOBILE: Touch Move - Drag to Preview Colors
        svg.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (!isDragging) return;
            
            const touch = e.touches[0];
            const polygon = getPolygonAtPoint(touch.clientX, touch.clientY);
            
            if (polygon && polygon.dataset.color) {
                const color = polygon.dataset.color;
                setActiveHex(polygon);
                updateMagnifier(touch.clientX, touch.clientY, color);
            }
        }, { passive: false });
        
        // MOBILE: Touch End - Select Color
        svg.addEventListener('touchend', (e) => {
            e.preventDefault();
            isDragging = false;
            magnifier.classList.remove('visible');
            
            if (activePolygon) {
                selectColorFromPolygon(activePolygon);
            }
            
            setTimeout(() => setActiveHex(null), 200);
        }, { passive: false });
        
        // MOBILE: Touch Cancel
        svg.addEventListener('touchcancel', () => {
            isDragging = false;
            magnifier.classList.remove('visible');
            setTimeout(() => setActiveHex(null), 200);
        });
        
        // Set initial selection
        updateSVGHexSelection(currentColor);
        updateBrightnessSliderGradient();
        
        // Brightness slider handler
        const brightnessSlider = document.getElementById(`brightnessSlider-${sectionId}`);
        if (brightnessSlider) {
            brightnessSlider.addEventListener('input', (e) => {
                saveState();
                pickerVal = Number(e.target.value) / 100;
                const newColor = hsvToHex(pickerHue, pickerSat, pickerVal).toUpperCase();
                currentColor = newColor;
                designText.style.color = currentColor;
                hexInput.value = currentColor;
                hexPreview.style.background = currentColor;
                updateSVGHexSelection(newColor);
            });
        }
    }
    
    // Update selection state in SVG hexagonal grid
    function updateSVGHexSelection(selectedColor) {
        const svg = document.getElementById(`hexSvg-${sectionId}`);
        const polygons = svg.querySelectorAll('polygon');
        polygons.forEach(polygon => {
            if (polygon.dataset.color && polygon.dataset.color.toUpperCase() === selectedColor.toUpperCase()) {
                polygon.classList.add('selected');
            } else {
                polygon.classList.remove('selected');
            }
        });
    }
    
    // Initialize the SVG hexagonal picker on load
    initSVGHexagonalPicker();

    // Save state for undo
    function saveState() {
        const state = {
            text: textInput.value,
            color: currentColor,
            font: currentFont,
            fontSize: currentFontSize,
            size: sizeSlider.value,
            rotation: rotateSlider.value,
            flipH: flipH,
            flipV: flipV,
            inverted: inverted,
            left: designOverlay.style.left,
            top: designOverlay.style.top
        };
        
        undoHistory.push(state);
        if (undoHistory.length > MAX_UNDO) {
            undoHistory.shift();
        }
        
        undoBtn.disabled = undoHistory.length === 0;
    }

    // Undo last action
    undoBtn.addEventListener('click', () => {
        if (undoHistory.length > 0) {
            const state = undoHistory.pop();
            
            textInput.value = state.text;
            designText.textContent = state.text || 'YOUR DESIGN HERE';
            currentColor = state.color;
            designText.style.color = state.color;
            hexInput.value = state.color;
            hexPreview.style.background = state.color;
            currentFont = state.font;
            designText.style.fontFamily = state.font;
            if (state.fontSize) {
                updateFontSize(state.fontSize);
            }
            sizeSlider.value = state.size;
            sizeValue.textContent = `${state.size}%`;
            rotateSlider.value = state.rotation;
            rotateValue.textContent = `${state.rotation}°`;
            flipH = state.flipH;
            flipV = state.flipV;
            inverted = state.inverted;
            designOverlay.style.left = state.left;
            designOverlay.style.top = state.top;
            
            updateTransform();
            updateFlipButtons();
            updateColorSwatches();
            
            undoBtn.disabled = undoHistory.length === 0;
        }
    });

    // Placement guide toggle
    guideBtn.addEventListener('click', () => {
        guideActive = !guideActive;
        if (guideActive) {
            placementGuide.classList.add('active');
            guideBtn.textContent = '✓ Guide On';
            guideBtn.style.background = 'rgba(96, 165, 250, 0.2)';
            guideBtn.style.borderColor = '#60a5fa';
        } else {
            placementGuide.classList.remove('active');
            guideBtn.textContent = '📐 Placement Guide';
            guideBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            guideBtn.style.borderColor = 'rgba(255, 255, 255, 0.2)';
        }
    });

    // T-Shirt color toggle
    document.querySelectorAll(`.cts-tshirt-color-option-${sectionId}`).forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll(`.cts-tshirt-color-option-${sectionId}`).forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            tshirtColor = btn.dataset.color;
            
            // Update t-shirt image - use actual black t-shirt mockup
            if (tshirtColor === 'black') {
                tshirtImage.src = "{{ 'tshirt-black-v2.png' | asset_url }}";
                tshirtImage.style.filter = 'none';
                
                // Adjust text color for visibility on black shirt
                if (currentColor === '#000000') {
                    currentColor = '#ffffff';
                    designText.style.color = currentColor;
                    hexInput.value = currentColor;
                    hexPreview.style.background = currentColor;
                    updateColorSwatches();
                    updateSVGHexSelection(currentColor);
                }
            } else {
                tshirtImage.src = "{{ 'tshirt-view.png' | asset_url }}";
                tshirtImage.style.filter = 'none';
            }
        });
      });
      
    // Text input with boundary control
    textInput.addEventListener('input', (e) => {
        if (!uploadedImage) {
            saveState();
            designText.textContent = e.target.value || 'YOUR DESIGN HERE';
            checkBoundary();
        }
    });

    // Hex color input
    hexInput.addEventListener('input', (e) => {
        let hex = e.target.value.trim();
        
        // Add # if missing
        if (hex && !hex.startsWith('#')) {
            hex = '#' + hex;
            e.target.value = hex;
        }
        
        // Validate hex color (supports both 3 and 6 character formats)
        if (/^#([0-9A-F]{3}|[0-9A-F]{6})$/i.test(hex)) {
            // Convert short format to long format
            if (hex.length === 4) {
                hex = '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
            }
            
            saveState();
            currentColor = hex.toUpperCase();
            designText.style.color = currentColor;
            hexPreview.style.background = currentColor;
            updateSVGHexSelection(currentColor);
        }
    });

    // Update color swatches to show active state
    function updateColorSwatches() {
        document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
            if (option.dataset.color.toLowerCase() === currentColor.toLowerCase()) {
                option.classList.add('active');
            } else {
                option.classList.remove('active');
            }
        });
    }

    // Font selector with search and filtering
    const fontSelector = document.getElementById(`fontSelector-${sectionId}`);
    const fontOptions = document.querySelectorAll(`.cts-font-option-${sectionId}`);
    const fontSearch = document.getElementById(`fontSearch-${sectionId}`);
    const categoryButtons = document.querySelectorAll(`.cts-font-category-${sectionId}`);
    
    let currentCategory = 'all';
    let currentSearch = '';
    
    // Font Selection
    fontOptions.forEach(option => {
        option.addEventListener('click', function() {
            saveState();
            // Remove active class from all
            fontOptions.forEach(opt => opt.classList.remove('active'));
            
            // Add active class to clicked option
            this.classList.add('active');
            
            // Get font family and apply it
            currentFont = this.getAttribute('data-font');
            designText.style.fontFamily = currentFont;
        });
    });
    
    // Search Functionality
    if (fontSearch) {
        fontSearch.addEventListener('input', function() {
            currentSearch = this.value.toLowerCase().trim();
            filterFonts();
        });
    }
    
    // Category Filtering
    categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
            saveState();
            // Update active category button
            categoryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Update current category
            currentCategory = this.getAttribute('data-category');
            filterFonts();
        });
    });
    
    // Combined Filter Function
    function filterFonts() {
        let visibleCount = 0;
        
        fontOptions.forEach(option => {
            const fontName = option.getAttribute('data-name');
            const fontCategory = option.getAttribute('data-category');
            
            // Check if matches search
            const matchesSearch = currentSearch === '' || fontName.includes(currentSearch);
            
            // Check if matches category
            const matchesCategory = currentCategory === 'all' || fontCategory === currentCategory;
            
            // Show or hide based on both filters
            if (matchesSearch && matchesCategory) {
                option.classList.remove('hidden');
                visibleCount++;
            } else {
                option.classList.add('hidden');
            }
        });
        
        // Show "no results" message if needed
        showNoResults(visibleCount === 0);
    }
    
    function showNoResults(show) {
        if (!fontSelector) return;
        
        let noResultsMsg = fontSelector.querySelector(`.cts-font-no-results-${sectionId}`);
        
        if (show && !noResultsMsg) {
            noResultsMsg = document.createElement('div');
            noResultsMsg.className = `cts-font-no-results-${sectionId}`;
            noResultsMsg.textContent = 'No fonts found. Try a different search or category.';
            fontSelector.appendChild(noResultsMsg);
        } else if (!show && noResultsMsg) {
            noResultsMsg.remove();
        }
    }

    // Color selector
    document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
        option.addEventListener('click', () => {
            saveState();
            document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(o => o.classList.remove('active'));
            option.classList.add('active');
            currentColor = option.dataset.color;
            designText.style.color = currentColor;
            hexInput.value = currentColor;
            hexPreview.style.background = currentColor;
        });
    });

    // Flip Horizontal
    flipHBtn.addEventListener('click', () => {
        saveState();
        flipH = !flipH;
        updateTransform();
        updateFlipButtons();
    });

    // Flip Vertical
    flipVBtn.addEventListener('click', () => {
        saveState();
        flipV = !flipV;
        updateTransform();
        updateFlipButtons();
    });

    // Update flip button states
    function updateFlipButtons() {
        flipHBtn.classList.toggle('active', flipH);
        flipVBtn.classList.toggle('active', flipV);
    }

    // Invert colors
    invertBtn.addEventListener('click', () => {
        saveState();
        inverted = !inverted;
        invertBtn.classList.toggle('active', inverted);
        
        if (inverted) {
            designText.style.filter = 'invert(1) hue-rotate(180deg)';
            if (uploadedImage) {
                uploadedImage.style.filter = 'invert(1) hue-rotate(180deg)';
            }
        } else {
            designText.style.filter = 'none';
            if (uploadedImage) {
                uploadedImage.style.filter = 'none';
            }
        }
    });

    // Image upload
    imageUpload.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            // Validate file type
            const validTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/webp', 'image/svg+xml'];
            const isValidType = validTypes.includes(file.type.toLowerCase());
            
            if (!isValidType) {
                alert('❌ Invalid file format!\n\nSupported formats:\n✅ PNG (.png)\n✅ JPG/JPEG (.jpg, .jpeg)\n✅ GIF (.gif)\n✅ WebP (.webp)\n✅ SVG (.svg)');
                imageUpload.value = ''; // Clear the input
        return;
      }
      
            // Validate file size (max 10MB)
            const maxSize = 10 * 1024 * 1024; // 10MB in bytes
      if (file.size > maxSize) {
                alert('❌ File too large!\n\nMaximum file size: 10MB\nYour file: ' + (file.size / 1024 / 1024).toFixed(2) + 'MB');
                imageUpload.value = ''; // Clear the input
        return;
      }
      
            console.log('✅ Valid image uploaded:', file.name, file.type, (file.size / 1024).toFixed(2) + 'KB');
      
            saveState();
      const reader = new FileReader();
            reader.onload = (event) => {
                if (uploadedImage) {
                    uploadedImage.remove();
                }
                
                uploadedImage = document.createElement('img');
                uploadedImage.className = `cts-design-image-${sectionId}`;
                uploadedImage.src = event.target.result;
                
                if (inverted) {
                    uploadedImage.style.filter = 'invert(1) hue-rotate(180deg)';
                }
                
                designText.style.display = 'none';
                designOverlay.appendChild(uploadedImage);
            };
            reader.readAsDataURL(file);
        }
    });

    // Size slider
    sizeSlider.addEventListener('input', (e) => {
        sizeValue.textContent = `${e.target.value}%`;
        updateTransform();
    });

    sizeSlider.addEventListener('change', () => {
        saveState();
    });

    // Rotation slider
    rotateSlider.addEventListener('input', (e) => {
        rotateValue.textContent = `${e.target.value}°`;
        updateTransform();
    });

    rotateSlider.addEventListener('change', () => {
        saveState();
    });

    // ============================================
    // CANVAS ZOOM FUNCTIONALITY
    // ============================================
    
    // Store references
    const mockupStage = document.querySelector(`.cts-mockup-stage-${sectionId}`);
    const tshirtContainer = document.getElementById(`tshirtContainer-${sectionId}`);
    
    // Update canvas zoom - MOBILE-OPTIMIZED APPROACH
    function updateCanvasZoom() {
        const zoomLevel = canvasZoomSlider.value / 100;
        
        if (mockupCanvas && tshirtContainer && mockupStage) {
            // Update zoom display
            zoomValue.textContent = `${canvasZoomSlider.value}%`;
            
            // MOBILE FIX: Use CSS transform scale instead of changing dimensions
            // This prevents layout shifts and white space issues
            mockupStage.style.transform = `scale(${zoomLevel})`;
            mockupStage.style.transformOrigin = 'center center';
            
            // Make canvas scrollable when zoomed
            if (zoomLevel > 1) {
                mockupCanvas.style.overflow = 'auto';
                mockupCanvas.style.overscrollBehavior = 'contain';
                
                // Center the scrolled content
                setTimeout(() => {
                    mockupCanvas.scrollLeft = (mockupCanvas.scrollWidth - mockupCanvas.clientWidth) / 2;
                    mockupCanvas.scrollTop = (mockupCanvas.scrollHeight - mockupCanvas.clientHeight) / 2;
                }, 50);
      } else {
                mockupCanvas.style.overflow = 'hidden';
            }
            
            console.log(`🔍 Canvas zoom: ${canvasZoomSlider.value}% (using CSS transform: scale)`);
        }
    }
    
    // Canvas zoom slider
    if (canvasZoomSlider) {
        canvasZoomSlider.addEventListener('input', (e) => {
            updateCanvasZoom();
        });
        
        // MOBILE FIX: Prevent page scroll when using slider
        canvasZoomSlider.addEventListener('touchstart', (e) => {
            e.stopPropagation();
        }, { passive: true });
        
        canvasZoomSlider.addEventListener('touchmove', (e) => {
            e.stopPropagation();
        }, { passive: true });
    }
    
    // Zoom in button
    if (zoomInBtn) {
        zoomInBtn.addEventListener('click', () => {
            const currentZoom = parseInt(canvasZoomSlider.value);
            const newZoom = Math.min(200, currentZoom + 10);
            canvasZoomSlider.value = newZoom;
            updateCanvasZoom();
        });
        
        // MOBILE FIX: Prevent double-tap zoom
        zoomInBtn.addEventListener('touchend', (e) => {
            e.preventDefault();
            const currentZoom = parseInt(canvasZoomSlider.value);
            const newZoom = Math.min(200, currentZoom + 10);
            canvasZoomSlider.value = newZoom;
            updateCanvasZoom();
        });
    }
    
    // Zoom out button
    if (zoomOutBtn) {
        zoomOutBtn.addEventListener('click', () => {
            const currentZoom = parseInt(canvasZoomSlider.value);
            const newZoom = Math.max(50, currentZoom - 10);
            canvasZoomSlider.value = newZoom;
            updateCanvasZoom();
        });
        
        // MOBILE FIX: Prevent double-tap zoom
        zoomOutBtn.addEventListener('touchend', (e) => {
            e.preventDefault();
            const currentZoom = parseInt(canvasZoomSlider.value);
            const newZoom = Math.max(50, currentZoom - 10);
            canvasZoomSlider.value = newZoom;
            updateCanvasZoom();
        });
    }
    
    // Keyboard shortcuts for zoom (Ctrl/Cmd + Plus/Minus)
    document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && !e.shiftKey) {
            if (e.key === '=' || e.key === '+') {
                e.preventDefault();
                zoomInBtn.click();
            } else if (e.key === '-' || e.key === '_') {
                e.preventDefault();
                zoomOutBtn.click();
            } else if (e.key === '0') {
                e.preventDefault();
                canvasZoomSlider.value = 100;
                updateCanvasZoom();
            }
        }
    });
    
    // Mouse wheel zoom (Ctrl + Scroll)
    if (mockupCanvas) {
        mockupCanvas.addEventListener('wheel', (e) => {
            if (e.ctrlKey || e.metaKey) {
                e.preventDefault();
                
                const currentZoom = parseInt(canvasZoomSlider.value);
                const delta = e.deltaY > 0 ? -5 : 5;
                const newZoom = Math.max(50, Math.min(200, currentZoom + delta));
                
                canvasZoomSlider.value = newZoom;
                updateCanvasZoom();
            }
        }, { passive: false });
    }

    function updateTransform() {
        const scale = sizeSlider.value / 100;
        const rotate = rotateSlider.value;
        const scaleX = flipH ? -1 : 1;
        const scaleY = flipV ? -1 : 1;
        
        designOverlay.style.transform = `translateX(-50%) scale(${scale * scaleX}, ${scale * scaleY}) rotate(${rotate}deg)`;
        checkBoundary();
    }

    // Check if design stays within boundary
    function checkBoundary() {
        const overlay = designOverlay.getBoundingClientRect();
        const container = designOverlay.parentElement.getBoundingClientRect();
        
        // Print area boundaries (37% width, 42% height from center)
        const printAreaLeft = container.left + (container.width * 0.315); // (1 - 0.37) / 2
        const printAreaRight = container.right - (container.width * 0.315);
        const printAreaTop = container.top + (container.height * 0.29);
        const printAreaBottom = printAreaTop + (container.height * 0.42);
        
        // Check if design is outside print area
        const isOutside = overlay.left < printAreaLeft || 
                         overlay.right > printAreaRight || 
                         overlay.top < printAreaTop || 
                         overlay.bottom > printAreaBottom;
        
        if (isOutside) {
            designOverlay.style.outline = '2px solid rgba(239, 68, 68, 0.8)';
          } else {
            designOverlay.style.outline = '';
        }
    }

    // Drag functionality with boundary constraints
    let isDragging = false;
    let startX, startY, startLeft, startTop;

    designOverlay.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        
        // Get current position from style or use defaults
        const currentLeft = parseFloat(designOverlay.style.left) || 50;
        const currentTop = parseFloat(designOverlay.style.top) || 29;
        
        startLeft = currentLeft;
        startTop = currentTop;
        designOverlay.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const parent = designOverlay.parentElement.getBoundingClientRect();
        const deltaX = ((e.clientX - startX) / parent.width) * 100;
        const deltaY = ((e.clientY - startY) / parent.height) * 100;
        
        let newLeft = startLeft + deltaX;
        let newTop = startTop + deltaY;
        
        // Constrain to safe area (with some margin)
        const margin = 5;
        newLeft = Math.max(31.5 + margin, Math.min(68.5 - margin, newLeft));
        newTop = Math.max(29 + margin, Math.min(71 - margin, newTop));
        
        designOverlay.style.left = `${newLeft}%`;
        designOverlay.style.top = `${newTop}%`;
        
        checkBoundary();
    });

    document.addEventListener('mouseup', () => {
        if (isDragging) {
            saveState();
            isDragging = false;
            designOverlay.style.cursor = 'move';
        }
    });

    // Reset button
    resetBtn.addEventListener('click', () => {
        saveState();
        
        textInput.value = 'YOUR DESIGN HERE';
        designText.textContent = 'YOUR DESIGN HERE';
        designText.style.display = 'block';
        designText.style.fontFamily = "'Bebas Neue', sans-serif";
        designText.style.color = '#000000';
        designText.style.filter = 'none';
        
        currentColor = '#000000';
        hexInput.value = '#000000';
        hexPreview.style.background = '#000000';
        currentFont = "'Bebas Neue', sans-serif";
        updateFontSize(32); // Reset font size to default
        
        // Reset font selection
        document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(o => o.classList.remove('active'));
        document.querySelector(`.cts-font-option-${sectionId}`).classList.add('active');
        
        // Reset font search and category
        if (fontSearch) {
            fontSearch.value = '';
            currentSearch = '';
        }
        currentCategory = 'all';
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        if (categoryButtons.length > 0) {
            categoryButtons[0].classList.add('active'); // Activate "All" category
        }
        filterFonts(); // Apply filters to show all fonts
        
        updateColorSwatches();
        
        sizeSlider.value = 100;
        rotateSlider.value = 0;
        sizeValue.textContent = '100%';
        rotateValue.textContent = '0°';
        designOverlay.style.left = '50%';
        designOverlay.style.top = '29%';
        
        flipH = false;
        flipV = false;
        inverted = false;
        updateFlipButtons();
        invertBtn.classList.remove('active');
        
        if (uploadedImage) {
            uploadedImage.remove();
            uploadedImage = null;
        }
        
        imageUpload.value = '';
        updateTransform();
    });

    // Add to cart
    document.getElementById(`addToCartBtn-${sectionId}`).addEventListener('click', () => {
        alert('🎉 Design added to cart! (This is a demo)');
    });

    // Download preview
    // Download Preview
    document.getElementById(`downloadBtn-${sectionId}`).addEventListener('click', async () => {
        try {
            console.log('📥 Download button clicked');
            
            // Capture the current mockup
            const mockupDataUrl = await window.designerCaptureMockup();
            
            if (!mockupDataUrl) {
                alert('⚠️ Please create a design first!');
                return;
            }
            
            // Create download link
            const link = document.createElement('a');
            const timestamp = new Date().toISOString().slice(0, 10);
            link.download = `newthrifts-design-${timestamp}.png`;
            link.href = mockupDataUrl;
            link.click();
            
            console.log('✅ Design downloaded successfully!');
            
            // Show success feedback
            const btn = document.getElementById(`downloadBtn-${sectionId}`);
            const originalText = btn.textContent;
            btn.textContent = '✅ Downloaded!';
            btn.style.background = 'linear-gradient(135deg, #10b981, #059669)';
            
            setTimeout(() => {
                btn.textContent = originalText;
                btn.style.background = '';
            }, 2000);
      } catch (error) {
            console.error('❌ Download failed:', error);
            alert('⚠️ Unable to download. Please try again.');
        }
    });

    // Share design
    // Share Design
    document.getElementById(`shareBtn-${sectionId}`).addEventListener('click', async () => {
        try {
            console.log('🔗 Share button clicked');
            
            // Capture the current mockup
            const mockupDataUrl = await window.designerCaptureMockup();
            
            if (!mockupDataUrl) {
                alert('⚠️ Please create a design first!');
                return;
            }
            
            // Get design details
            const designText = textInput.value;
            const tshirtColorName = tshirtColor.charAt(0).toUpperCase() + tshirtColor.slice(1);
            
            // Create share data
            const shareTitle = 'Check out my custom T-shirt design!';
            const shareText = `I designed a custom ${tshirtColorName} t-shirt${designText && designText !== 'YOUR DESIGN HERE' ? ` with "${designText}"` : ''} on NewThrifts!`;
            
            // Check if Web Share API is available (mobile)
            if (navigator.share) {
                // Convert data URL to Blob for sharing
                const response = await fetch(mockupDataUrl);
                const blob = await response.blob();
                const file = new File([blob], 'my-tshirt-design.png', { type: 'image/png' });
                
                // Check if files can be shared
                if (navigator.canShare && navigator.canShare({ files: [file] })) {
                    await navigator.share({
                        title: shareTitle,
                        text: shareText,
                        files: [file]
                    });
                    console.log('✅ Design shared successfully!');
        } else {
                    // Share without file
                    await navigator.share({
                        title: shareTitle,
                        text: shareText,
                        url: window.location.href
                    });
                    console.log('✅ Link shared successfully!');
                }
            } else {
                // Fallback: Download the image
                const link = document.createElement('a');
                link.download = 'my-tshirt-design.png';
                link.href = mockupDataUrl;
                link.click();
                
                alert('✅ Design downloaded! You can now share the image file.');
            }
        } catch (error) {
            console.error('❌ Share failed:', error);
            
            // If share was cancelled, don't show error
            if (error.name === 'AbortError') {
                console.log('Share cancelled by user');
        return;
      }
            
            alert('⚠️ Unable to share. Try downloading the design instead!');
        }
    });

    // Initialize
    checkBoundary();
    
    // ============================================
    // INTEGRATION POINTS FOR ENHANCEMENTS
    // ============================================
    
    // Create a state object that enhancements can access
    const state = {
        layers: uploadedImage ? [{ type: 'image', src: uploadedImage.src, transform: { x: 50, y: 50 } }] : [],
        selectedLayerId: null,
        designText: textInput.value,
        fontSize: parseInt(sizeSlider.value),
        rotation: parseInt(rotateSlider.value),
        inverted: invertBtn.classList.contains('active'),
        flippedH: flipHBtn.classList.contains('active'),
        flippedV: flipVBtn.classList.contains('active')
    };
    
    // Expose functions for enhanced features to use
    window.designerGetState = function() {
        return {
            layers: window.designerGetLayers(), // Use the properly built layers
            designText: textInput.value,
            fontSize: parseInt(sizeSlider.value),
            rotation: parseInt(rotateSlider.value),
            currentColor: currentColor,
            currentFont: currentFont,
            tshirtColor: tshirtColor,
            uploadedImage: uploadedImage ? uploadedImage.src : null,
            inverted: invertBtn.classList.contains('active'),
            flippedH: flipHBtn.classList.contains('active'),
            flippedV: flipVBtn.classList.contains('active')
        };
    };
    
    window.designerLoadState = function(newState) {
        if (newState.layers) state.layers = newState.layers;
        if (newState.designText) textInput.value = newState.designText;
        if (newState.fontSize) sizeSlider.value = newState.fontSize;
        if (newState.rotation) rotateSlider.value = newState.rotation;
        updateTransform();
    };
    
    window.designerGetLayers = function() {
        // Build layers array from current design state
        const layers = [];
        
        // Add uploaded image layer if exists
        if (uploadedImage && uploadedImage.src) {
            layers.push({
                id: 'image-layer',
                type: 'image',
                src: uploadedImage.src,
                visible: true,
                transform: {
                    x: 50, // Center position
                    y: 50,
                    rotation: parseInt(rotateSlider.value) || 0,
                    scale: (parseInt(sizeSlider.value) || 100) / 100,
                    flipH: flipHBtn.classList.contains('active'),
                    flipV: flipVBtn.classList.contains('active')
                },
                filters: {
                    brightness: 100,
                    contrast: 100,
                    saturate: 100,
                    grayscale: 0,
                    sepia: 0,
                    blur: 0
                }
            });
        }
        
        // Add text layer if text exists
        if (textInput.value && textInput.value.trim() !== '' && textInput.value !== 'YOUR DESIGN HERE') {
            layers.push({
                id: 'text-layer',
                type: 'text',
                text: textInput.value,
                fontFamily: currentFont || 'Arial',
                fontSize: parseInt(sizeSlider.value) || 48,
                color: currentColor || '#000000',
                visible: true,
                letterSpacing: 0,
                align: 'center',
                textCase: 'none',
                stroke: { enabled: false },
                shadow: { enabled: false },
                transform: {
                    x: 50, // Center position
                    y: 50,
                    rotation: parseInt(rotateSlider.value) || 0,
                    scale: 1,
                    flipH: flipHBtn.classList.contains('active'),
                    flipV: flipVBtn.classList.contains('active')
                }
            });
        }
        
        return layers;
    };
    
    // Expose mockup capture function for exports
    window.designerCaptureMockup = captureMockupPreview;
    
    // Expose original design capture for exports
    window.designerCaptureOriginal = captureOriginalDesign;
    
    window.designerGetSelectedLayer = function() {
        return state.layers.find(l => l.id === state.selectedLayerId);
    };
    
    window.designerLoadTemplate = function(layers) {
        if (!Array.isArray(layers)) return;
        state.layers = layers;
        // Apply first text layer if exists
        const firstTextLayer = layers.find(l => l.type === 'text');
        if (firstTextLayer) {
            textInput.value = firstTextLayer.text || 'YOUR DESIGN HERE';
            designText.textContent = textInput.value;
            if (firstTextLayer.fontSize) sizeSlider.value = firstTextLayer.fontSize;
            if (firstTextLayer.transform && firstTextLayer.transform.rotation !== undefined) {
                rotateSlider.value = firstTextLayer.transform.rotation;
            }
            updateTransform();
        }
    };
    
    window.designerApplyGradient = function(gradient) {
        // Apply gradient to text using the Gradients enhancement
        if (window.DesignerEnhancements && window.DesignerEnhancements.Gradients) {
            window.DesignerEnhancements.Gradients.applyGradientToText(designText, gradient);
        }
    };
    
    // ============================================
    // SUBMIT REQUEST FUNCTIONALITY
    // ============================================
    
    const submitRequestBtn = document.getElementById(`submitRequestBtn-${sectionId}`);
    const customerInfoForm = document.getElementById(`customerInfoForm-${sectionId}`);
    const requestForm = document.getElementById(`requestForm-${sectionId}`);
    const cancelRequestBtn = document.getElementById(`cancelRequestBtn-${sectionId}`);
    const formStatus = document.getElementById(`formStatus-${sectionId}`);
    
    // Show customer info form when Submit Request is clicked
    if (submitRequestBtn && customerInfoForm) {
        submitRequestBtn.addEventListener('click', () => {
            customerInfoForm.style.display = 'block';
            customerInfoForm.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        });
    }
    
    // Hide form when Cancel is clicked
    if (cancelRequestBtn && customerInfoForm) {
        cancelRequestBtn.addEventListener('click', () => {
            customerInfoForm.style.display = 'none';
            requestForm.reset();
        });
    }
    
    // Function to capture JUST the original design (no t-shirt)
    async function captureOriginalDesign() {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const overlay = designOverlay;
            
            if (!overlay) {
                console.error('❌ Design overlay not found');
                resolve(null);
                return;
            }
            
            const overlayRect = overlay.getBoundingClientRect();
            const scale = 2; // 2x resolution for better quality
            canvas.width = overlayRect.width * scale;
            canvas.height = overlayRect.height * scale;
            
            // Scale context for high-res rendering
            ctx.scale(scale, scale);
            
            // Transparent background for original design
            ctx.clearRect(0, 0, overlayRect.width, overlayRect.height);
            
            // Save context state
            ctx.save();
            
            // Center the design
            ctx.translate(overlayRect.width / 2, overlayRect.height / 2);
            ctx.rotate((rotateSlider.value * Math.PI) / 180);
            
            // Draw text or image
            if (uploadedImage) {
                ctx.drawImage(uploadedImage, -overlayRect.width / 2, -overlayRect.height / 2, overlayRect.width, overlayRect.height);
            } else if (designText) {
                const fontSize = parseInt(window.getComputedStyle(designText).fontSize);
                ctx.font = `bold ${fontSize}px ${currentFont}`;
                ctx.fillStyle = currentColor;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(textInput.value, 0, 0);
            }
            
            ctx.restore();
            
            console.log('✅ Original design captured', `${canvas.width}x${canvas.height}`);
            
            // Convert to base64 with good quality
            resolve(canvas.toDataURL('image/png', 0.95));
        });
    }
    
    // Function to capture the mockup (t-shirt with design)
    async function captureMockupPreview() {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const mockupContainer = document.getElementById(`mockupCanvas-${sectionId}`);
            
            if (!mockupContainer) {
                console.error('❌ Mockup container not found:', `mockupCanvas-${sectionId}`);
                resolve(null);
                return;
            }
            
            console.log('✅ Mockup container found', mockupContainer);
            
            // Set canvas size to match the mockup container (higher resolution for email)
            const rect = mockupContainer.getBoundingClientRect();
            const scale = 2; // 2x resolution for better quality
            canvas.width = rect.width * scale;
            canvas.height = rect.height * scale;
            
            // Scale context for high-res rendering
            ctx.scale(scale, scale);
            
            // Draw white background
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, rect.width, rect.height);
            
            // Draw the t-shirt image
            const tshirtImg = tshirtImage;
            if (tshirtImg && tshirtImg.complete) {
                ctx.drawImage(tshirtImg, 0, 0, rect.width, rect.height);
            }
            
            // Draw the design overlay
            const overlay = designOverlay;
            if (overlay) {
                const overlayRect = overlay.getBoundingClientRect();
                const containerRect = mockupContainer.getBoundingClientRect();
                
                // Calculate position relative to container
                const x = overlayRect.left - containerRect.left;
                const y = overlayRect.top - containerRect.top;
                
                // Save context state
                ctx.save();
                
                // Apply transformations
                ctx.translate(x + overlayRect.width / 2, y + overlayRect.height / 2);
                ctx.rotate((rotateSlider.value * Math.PI) / 180);
                
                // Draw text or image
                if (uploadedImage) {
                    ctx.drawImage(uploadedImage, -overlayRect.width / 2, -overlayRect.height / 2, overlayRect.width, overlayRect.height);
                } else if (designText) {
                    const fontSize = parseInt(window.getComputedStyle(designText).fontSize);
                    ctx.font = `bold ${fontSize}px ${currentFont}`;
                    ctx.fillStyle = currentColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(textInput.value, 0, 0);
                }
                
                ctx.restore();
            }
            
            console.log('✅ Mockup preview captured', `${canvas.width}x${canvas.height}`);
            
            // Convert to base64 with good quality
            resolve(canvas.toDataURL('image/png', 0.95));
        });
    }
    
    // Function to upload image to Supabase Storage (if available) or use base64
    async function uploadDesignImage(dataUrl) {
        // Check if Supabase is available
        if (window.NewThriftsCustomRequests && window.NewThriftsCustomRequests.uploadImageToStorage) {
            try {
                console.log('📤 Uploading design to Supabase Storage...');
                const imageUrl = await window.NewThriftsCustomRequests.uploadImageToStorage(
                    dataUrl, 
                    'mockup-previews'
                );
                console.log('✅ Image uploaded:', imageUrl);
                return imageUrl;
            } catch (error) {
                console.warn('⚠️ Supabase upload failed, using base64 fallback:', error);
                return dataUrl; // Fallback to base64
    }
  } else {
            console.log('ℹ️ Supabase not available, using base64 data');
            return dataUrl; // Use base64 if Supabase not available
        }
    }
    
    // Initialize EmailJS
    emailjs.init('p3BJ3t5_tiP_xTf5L');
    
    // Handle form submission
    if (requestForm) {
        requestForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Get form values
            const customerName = document.getElementById(`customerName-${sectionId}`).value;
            const customerEmail = document.getElementById(`customerEmail-${sectionId}`).value;
            const customerPhone = document.getElementById(`customerPhone-${sectionId}`).value || 'Not provided';
            const tshirtSizeValue = document.getElementById(`tshirtSize-${sectionId}`).value || 'Not specified';
            const customerMessage = document.getElementById(`customerMessage-${sectionId}`).value || 'No special instructions';
            
            // Validate required fields
            if (!customerName || !customerEmail) {
                alert('❌ Please fill in all required fields (Name and Email)');
      return;
    }
    
            // Show loading status
            formStatus.style.display = 'block';
            formStatus.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
            formStatus.style.color = 'white';
            formStatus.innerHTML = '⏳ Capturing your design and sending request...';
            
            try {
                // Capture BOTH images: original design and mockup
                console.log('📸 Capturing original design...');
                const originalDesignDataUrl = await captureOriginalDesign();
                
                console.log('📸 Capturing mockup preview...');
                const mockupPreviewDataUrl = await captureMockupPreview();
                
                if (!originalDesignDataUrl || !mockupPreviewDataUrl) {
                    throw new Error('Failed to capture design images');
                }
                
                // Upload both images to Supabase Storage (or use base64 fallback)
                console.log('📤 Uploading original design...');
                const originalDesignUrl = await uploadDesignImage(originalDesignDataUrl);
                
                console.log('📤 Uploading mockup preview...');
                const mockupPreviewUrl = await uploadDesignImage(mockupPreviewDataUrl);
                
                // Helper function to safely convert values to strings (from working code)
                const s = v => (v == null || v === "") ? "-" : String(v);
                
                // Ensure URLs are absolute HTTPS links (from working code)
                const ensureAbsoluteUrl = (url) => {
                    if (!url || url === '#') return '-';
                    if (url.startsWith('http://') || url.startsWith('https://')) return url;
                    // If relative URL, make it absolute (shouldn't happen, but just in case)
                    return url.startsWith('/') ? `https://newthrifts.com${url}` : url;
                };
                
                // Prepare email data with correct variable names matching EmailJS template
                const emailData = {
                    // Customer info
                    name: s(customerName),
                    email: s(customerEmail),
                    phone: s(customerPhone),
                    tshirt_size: s(tshirtSizeValue),
                    message: s(customerMessage),
                    
                    // Design specifications (matching template variables)
                    design_position: s('Center'),  // Placeholder - update if you track position
                    design_size: s(sizeSlider.value + '%'),
                    design_rotation: s(rotateSlider.value + '°'),
                    design_view: s('Front'),  // Placeholder - update if you track view
                    tshirt_color: s(tshirtColor),
                    
                    // Additional design details
                    design_text: s(textInput.value),
                    text_color: s(currentColor),
                    font_family: s(currentFont),
                    font_size: s(sizeSlider.value + '%'),
                    rotation: s(rotateSlider.value + '°'),
                    has_uploaded_image: uploadedImage ? 'Yes' : 'No',
                    
                // Metadata
                submission_date: s(new Date().toLocaleString()),
                request_id: s(`REQ-${Date.now().toString().slice(-8)}`),
                
                // Image URLs - SEPARATE IMAGES FOR ORIGINAL AND MOCKUP
                design_url: ensureAbsoluteUrl(originalDesignUrl),  // Just the design
                mockup_url: ensureAbsoluteUrl(mockupPreviewUrl),   // T-shirt with design
                logo_url: 'https://cdn.shopify.com/s/files/1/0644/9525/5650/files/NewThriftsLogo.svg?v=1760718145'
            };
            
            console.log('📧 Sending design request email...', emailData);
            console.log('🖼️ Image URLs (SEPARATE):');
            console.log('   🎨 Original Design:', emailData.design_url);
            console.log('   👕 Mockup Preview:', emailData.mockup_url);
                
                // Send email via EmailJS
                const result = await emailjs.send(
                    'service_f4r34d3',
                    'template_qiquke8',
                    emailData
                );
                
                console.log('✅ Email sent successfully:', result);
                
                // Show success message
                formStatus.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                formStatus.innerHTML = `
                    ✅ <strong>Request Submitted Successfully!</strong><br>
                    <span style="font-size: 14px; font-weight: normal; opacity: 0.9;">
                        Thank you, ${customerName}! We've received your design and will contact you at ${customerEmail} shortly.
                    </span>
                `;
                
                // Reset form after 3 seconds
      setTimeout(() => {
                    requestForm.reset();
                    customerInfoForm.style.display = 'none';
                    formStatus.style.display = 'none';
                }, 5000);
                
            } catch (error) {
                console.error('❌ Email send failed:', error);
                
                // Show error message
                formStatus.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                formStatus.innerHTML = `
                    ❌ <strong>Submission Failed</strong><br>
                    <span style="font-size: 14px; font-weight: normal; opacity: 0.9;">
                        ${error.message || 'Please check your EmailJS configuration or try again later.'}
                    </span>
                `;
            }
        });
    }
    
    // ============================================
    // MOBILE TOUCH GESTURE SUPPORT
    // ============================================
    
    // Add touch gesture support for mobile devices
    let touchStartDistance = 0;
    let touchStartRotation = 0;
    let initialSize = 0;
    let initialRotation = 0;
    
    // Helper function to get distance between two touch points
    function getTouchDistance(touch1, touch2) {
        const dx = touch1.clientX - touch2.clientX;
        const dy = touch1.clientY - touch2.clientY;
        return Math.sqrt(dx * dx + dy * dy);
    }
    
    // Helper function to get angle between two touch points
    function getTouchAngle(touch1, touch2) {
        const dx = touch2.clientX - touch1.clientX;
        const dy = touch2.clientY - touch1.clientY;
        return Math.atan2(dy, dx) * 180 / Math.PI;
    }
    
    // Add pinch-to-zoom and rotate gestures on design overlay
    if (designOverlay) {
        designOverlay.addEventListener('touchstart', (e) => {
            if (e.touches.length === 2) {
                e.preventDefault();
                saveState();
                
                // Store initial values
                touchStartDistance = getTouchDistance(e.touches[0], e.touches[1]);
                touchStartRotation = getTouchAngle(e.touches[0], e.touches[1]);
                initialSize = parseInt(sizeSlider.value);
                initialRotation = parseInt(rotateSlider.value);
                
                console.log('📱 Touch gesture started - pinch/rotate enabled');
            }
        }, { passive: false });
        
        designOverlay.addEventListener('touchmove', (e) => {
            if (e.touches.length === 2) {
                e.preventDefault();
                
                // Calculate new distance and angle
                const currentDistance = getTouchDistance(e.touches[0], e.touches[1]);
                const currentAngle = getTouchAngle(e.touches[0], e.touches[1]);
                
                // Pinch to zoom (size)
                const scaleFactor = currentDistance / touchStartDistance;
                let newSize = Math.round(initialSize * scaleFactor);
                newSize = Math.max(10, Math.min(200, newSize)); // Clamp between 10-200%
                
                if (sizeSlider.value !== newSize.toString()) {
                    sizeSlider.value = newSize;
                    sizeValue.textContent = `${newSize}%`;
                    updateTransform();
                }
                
                // Rotate gesture
                const angleDiff = currentAngle - touchStartRotation;
                let newRotation = initialRotation + angleDiff;
                
                // Normalize rotation to -180 to 180
                while (newRotation > 180) newRotation -= 360;
                while (newRotation < -180) newRotation += 360;
                
                newRotation = Math.round(newRotation);
                
                if (rotateSlider.value !== newRotation.toString()) {
                    rotateSlider.value = newRotation;
                    rotateValue.textContent = `${newRotation}°`;
                    updateTransform();
                }
            }
        }, { passive: false });
        
        designOverlay.addEventListener('touchend', (e) => {
            if (e.touches.length < 2) {
                console.log('📱 Touch gesture ended');
            }
        });
    }
    
    // Prevent double-tap zoom on buttons (improves mobile UX)
    const buttons = document.querySelectorAll(`
        .cts-header-btn-${sectionId},
        .cts-transform-btn-${sectionId},
        .cts-tshirt-color-btn-${sectionId},
        .cts-action-btn-${sectionId},
        .cts-workflow-action-btn-${sectionId}
    `);
    
    buttons.forEach(button => {
        button.addEventListener('touchend', (e) => {
            e.preventDefault();
            button.click();
        });
    });
    
    // Add mobile-friendly scroll behavior
    if ('ontouchstart' in window) {
        console.log('📱 Mobile device detected - Touch optimizations enabled');
        
        // Smooth scroll for mobile
        document.querySelectorAll(`[id*="workflow-${sectionId}"]`).forEach(btn => {
            btn.addEventListener('click', () => {
                setTimeout(() => {
                    window.scrollTo({
                        top: window.scrollY + 100,
                        behavior: 'smooth'
                    });
                }, 100);
            });
        });
    }
    
    // ============================================
    // COLOR PALETTE HELPER MODAL
    // ============================================
    
    const colorPaletteHelperBtn = document.getElementById(`colorPaletteHelperBtn-${sectionId}`);
    const colorPaletteModal = document.getElementById(`colorPaletteModal-${sectionId}`);
    const colorPaletteClose = document.getElementById(`colorPaletteClose-${sectionId}`);
    
    // Color palette data - Expanded with 96 colors!
    const colorPalettes = {
        basic: [
            { name: 'Black', hex: '#000000' },
            { name: 'White', hex: '#FFFFFF' },
            { name: 'Red', hex: '#FF0000' },
            { name: 'Blue', hex: '#0000FF' },
            { name: 'Green', hex: '#00FF00' },
            { name: 'Yellow', hex: '#FFFF00' },
            { name: 'Orange', hex: '#FFA500' },
            { name: 'Purple', hex: '#800080' },
            { name: 'Gray', hex: '#808080' },
            { name: 'Brown', hex: '#A52A2A' },
            { name: 'Cyan', hex: '#00FFFF' },
            { name: 'Pink', hex: '#FFC0CB' }
        ],
        vibrant: [
            { name: 'Hot Pink', hex: '#FF69B4' },
            { name: 'Electric Blue', hex: '#00FFFF' },
            { name: 'Lime Green', hex: '#32CD32' },
            { name: 'Coral', hex: '#FF7F50' },
            { name: 'Magenta', hex: '#FF00FF' },
            { name: 'Turquoise', hex: '#40E0D0' },
            { name: 'Crimson', hex: '#DC143C' },
            { name: 'Gold', hex: '#FFD700' },
            { name: 'Neon Green', hex: '#39FF14' },
            { name: 'Neon Pink', hex: '#FF10F0' },
            { name: 'Bright Orange', hex: '#FF5F1F' },
            { name: 'Vivid Purple', hex: '#BF00FF' },
            { name: 'Spring Green', hex: '#00FF7F' },
            { name: 'Deep Sky Blue', hex: '#00BFFF' },
            { name: 'Tomato Red', hex: '#FF6347' },
            { name: 'Yellow Green', hex: '#9ACD32' }
        ],
        pastel: [
            { name: 'Baby Blue', hex: '#89CFF0' },
            { name: 'Mint Green', hex: '#98FF98' },
            { name: 'Lavender', hex: '#E6E6FA' },
            { name: 'Peach', hex: '#FFDAB9' },
            { name: 'Light Pink', hex: '#FFB6C1' },
            { name: 'Pale Yellow', hex: '#FFFFE0' },
            { name: 'Powder Blue', hex: '#B0E0E6' },
            { name: 'Cream', hex: '#FFFDD0' },
            { name: 'Light Coral', hex: '#F08080' },
            { name: 'Pale Green', hex: '#98FB98' },
            { name: 'Thistle', hex: '#D8BFD8' },
            { name: 'Misty Rose', hex: '#FFE4E1' },
            { name: 'Light Cyan', hex: '#E0FFFF' },
            { name: 'Lemon Chiffon', hex: '#FFFACD' },
            { name: 'Alice Blue', hex: '#F0F8FF' },
            { name: 'Honeydew', hex: '#F0FFF0' }
        ],
        dark: [
            { name: 'Navy Blue', hex: '#000080' },
            { name: 'Forest Green', hex: '#228B22' },
            { name: 'Maroon', hex: '#800000' },
            { name: 'Dark Purple', hex: '#301934' },
            { name: 'Charcoal', hex: '#36454F' },
            { name: 'Chocolate', hex: '#D2691E' },
            { name: 'Olive', hex: '#808000' },
            { name: 'Midnight', hex: '#191970' },
            { name: 'Dark Slate Gray', hex: '#2F4F4F' },
            { name: 'Saddle Brown', hex: '#8B4513' },
            { name: 'Dark Olive', hex: '#556B2F' },
            { name: 'Dark Red', hex: '#8B0000' },
            { name: 'Dark Green', hex: '#006400' },
            { name: 'Dark Cyan', hex: '#008B8B' },
            { name: 'Dark Magenta', hex: '#8B008B' },
            { name: 'Slate Gray', hex: '#708090' }
        ],
        special: [
            { name: 'Rose Gold', hex: '#B76E79' },
            { name: 'Silver', hex: '#C0C0C0' },
            { name: 'Bronze', hex: '#CD7F32' },
            { name: 'Copper', hex: '#B87333' },
            { name: 'Teal', hex: '#008080' },
            { name: 'Indigo', hex: '#4B0082' },
            { name: 'Aqua', hex: '#00FFFF' },
            { name: 'Salmon', hex: '#FA8072' },
            { name: 'Platinum', hex: '#E5E4E2' },
            { name: 'Champagne', hex: '#F7E7CE' },
            { name: 'Pearl', hex: '#EAE0C8' },
            { name: 'Sage', hex: '#BCB88A' },
            { name: 'Rust', hex: '#B7410E' },
            { name: 'Mauve', hex: '#E0B0FF' },
            { name: 'Burgundy', hex: '#800020' },
            { name: 'Plum', hex: '#DDA0DD' }
        ]
    };
    
    // Populate color samples
    function populateColorSamples() {
        Object.keys(colorPalettes).forEach(category => {
            const container = document.getElementById(`${category}Colors-${sectionId}`);
            if (container) {
                container.innerHTML = colorPalettes[category].map(color => `
                    <div class="cts-color-sample-${sectionId}" data-hex="${color.hex}">
                        <div class="cts-color-sample-box-${sectionId}" style="background: ${color.hex};"></div>
                        <div class="cts-color-sample-name-${sectionId}">${color.name}</div>
                        <div class="cts-color-sample-hex-${sectionId}">${color.hex}</div>
                    </div>
                `).join('');
            }
        });
        
        // Add click handlers to color samples
        document.querySelectorAll(`.cts-color-sample-${sectionId}`).forEach(sample => {
            sample.addEventListener('click', () => {
                const hex = sample.getAttribute('data-hex');
                selectColor(hex);
                closeModal();
            });
        });
    }
    
    // Select color
    function selectColor(hex) {
        currentColor = hex;
        designText.style.color = hex;
        hexInput.value = hex;
        hexPreview.style.background = hex;
        console.log(`🎨 Color selected from palette: ${hex}`);
    }
    
    // Open modal
    function openModal() {
        colorPaletteModal.classList.add('active');
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }
    
    // Close modal
    function closeModal() {
        colorPaletteModal.classList.remove('active');
        document.body.style.overflow = ''; // Restore scrolling
    }
    
    // Event listeners
    if (colorPaletteHelperBtn) {
        colorPaletteHelperBtn.addEventListener('click', openModal);
    }
    
    if (colorPaletteClose) {
        colorPaletteClose.addEventListener('click', closeModal);
    }
    
    // Close modal when clicking outside content
    if (colorPaletteModal) {
        colorPaletteModal.addEventListener('click', (e) => {
            if (e.target === colorPaletteModal) {
                closeModal();
            }
        });
    }
    
    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && colorPaletteModal.classList.contains('active')) {
            closeModal();
        }
    });
    
    // Initialize color samples
    populateColorSamples();
    
    // Initialize thumbnail gallery
    initializeThumbnailGallery();
    
    // ============================================
    // TEXT & IMAGE CONTAINMENT SYSTEM
    // ============================================

    console.log('🎯 Loading complete containment system (text + images)...');

    // Configuration
    const CONTAINMENT_CONFIG = {
        maxWidth: 0.95,
        maxHeight: 0.95,
        padding: 8,
        minFontSize: 14,
        maxFontSize: 72,
        imageMaxWidth: 0.90,    // Images use slightly less space
        imageMaxHeight: 0.90
    };

    // Get elements
    const cOverlay = document.getElementById(`designOverlay-${sectionId}`);
    const cText = document.getElementById(`designText-${sectionId}`);
    const cTextInput = document.getElementById(`textInput-${sectionId}`);
    const cSizeSlider = document.getElementById(`sizeSlider-${sectionId}`);
    const cSizeValue = document.getElementById(`sizeValue-${sectionId}`);
    const cImageUpload = document.getElementById(`imageUpload-${sectionId}`);

    // Track state
    let hasUploadedImage = false;
    let currentImageElement = null;

    // Verify elements exist
    if (!cOverlay || !cText) {
        console.error('❌ Containment: Required elements not found');
    } else {
        console.log('✅ Containment: Elements found successfully');
    }

    // Create warning indicator
    function createWarningIndicator() {
        if (document.getElementById(`containmentWarning-${sectionId}`)) {
            return document.getElementById(`containmentWarning-${sectionId}`);
        }
        
        const warning = document.createElement('div');
        warning.id = `containmentWarning-${sectionId}`;
        warning.style.cssText = `
            position: absolute;
            top: -50px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            padding: 12px 20px;
            border-radius: 10px;
            font-size: 13px;
            font-weight: 600;
            display: none;
            z-index: 2000;
            box-shadow: 0 6px 16px rgba(239, 68, 68, 0.5);
            animation: warningPulse-${sectionId} 2s infinite, slideIn-${sectionId} 0.3s ease-out;
            white-space: nowrap;
            pointer-events: none;
        `;
        warning.innerHTML = '⚠️ Design exceeds print area';
        
        if (cOverlay) {
            if (window.getComputedStyle(cOverlay).position === 'static') {
                cOverlay.style.position = 'relative';
            }
            cOverlay.appendChild(warning);
            console.log('✅ Warning indicator created');
        }
        
        return warning;
    }

    const cWarning = createWarningIndicator();

    // Check if content fits
    function checkContentFit(element) {
        if (!element || !cOverlay) {
            return { fits: true, reason: 'Elements not found' };
        }
        
        try {
            const contentRect = element.getBoundingClientRect();
            const overlayRect = cOverlay.getBoundingClientRect();
            
            if (overlayRect.width === 0 || overlayRect.height === 0) {
                return { fits: true, reason: 'Not rendered yet' };
            }
            
            const maxWidth = overlayRect.width * CONTAINMENT_CONFIG.maxWidth - (CONTAINMENT_CONFIG.padding * 2);
            const maxHeight = overlayRect.height * CONTAINMENT_CONFIG.maxHeight - (CONTAINMENT_CONFIG.padding * 2);
            
            const exceedsWidth = contentRect.width > maxWidth;
            const exceedsHeight = contentRect.height > maxHeight;
            
            return {
                fits: !exceedsWidth && !exceedsHeight,
                exceedsWidth,
                exceedsHeight,
                contentWidth: contentRect.width,
                contentHeight: contentRect.height,
                maxWidth,
                maxHeight,
                usageWidth: ((contentRect.width / maxWidth) * 100).toFixed(1),
                usageHeight: ((contentRect.height / maxHeight) * 100).toFixed(1)
            };
        } catch (error) {
            console.error('Error checking fit:', error);
            return { fits: true, reason: 'Error' };
        }
    }

    // Check if overall design (text + image) fits
    function checkOverallFit() {
        let textFits = { fits: true };
        let imageFits = { fits: true };
        
        // Check text if visible
        if (cText && cText.style.display !== 'none') {
            textFits = checkContentFit(cText);
        }
        
        // Check image if present
        if (currentImageElement && currentImageElement.style.display !== 'none') {
            imageFits = checkContentFit(currentImageElement);
        }
        
        return {
            textFits: textFits.fits,
            imageFits: imageFits.fits,
            overallFits: textFits.fits && imageFits.fits,
            textData: textFits,
            imageData: imageFits
        };
    }

    // Auto-adjust text size
    function autoAdjustText() {
        if (!cText || !cOverlay) return;
        
        console.log('📏 Auto-adjusting text size...');
        
        let currentSize = parseInt(window.getComputedStyle(cText).fontSize);
        let fits = checkContentFit(cText);
        let iterations = 0;
        
        while (!fits.fits && currentSize > CONTAINMENT_CONFIG.minFontSize && iterations < 100) {
            currentSize -= 1;
            cText.style.fontSize = currentSize + 'px';
            fits = checkContentFit(cText);
            iterations++;
        }
        
        // Update slider
        if (cSizeSlider && cSizeValue) {
            cSizeSlider.value = currentSize;
            cSizeValue.textContent = currentSize;
        }
        
        if (fits.fits) {
            console.log(`✅ Text adjusted to ${currentSize}px (${fits.usageWidth}% width, ${fits.usageHeight}% height)`);
        } else {
            console.warn('⚠️ Text still too large at minimum size');
        }
        
        return fits.fits;
    }

    // Constrain uploaded image
    function constrainImage(img) {
        if (!img || !cOverlay) return;
        
        try {
            const overlayRect = cOverlay.getBoundingClientRect();
            if (overlayRect.width === 0) return;
            
            const maxWidth = (overlayRect.width * CONTAINMENT_CONFIG.imageMaxWidth) - (CONTAINMENT_CONFIG.padding * 2);
            const maxHeight = (overlayRect.height * CONTAINMENT_CONFIG.imageMaxHeight) - (CONTAINMENT_CONFIG.padding * 2);
            
            // Set max dimensions
            img.style.maxWidth = maxWidth + 'px';
            img.style.maxHeight = maxHeight + 'px';
            img.style.width = 'auto';
            img.style.height = 'auto';
            img.style.objectFit = 'contain';
            
            console.log(`🖼️ Image constrained: ${maxWidth.toFixed(0)}px × ${maxHeight.toFixed(0)}px`);
            
            // Check if it fits
            setTimeout(() => {
                const fits = checkContentFit(img);
                if (!fits.fits) {
                    console.warn('⚠️ Image still exceeds boundaries after constraint');
                } else {
                    console.log(`✅ Image fits: ${fits.usageWidth}% width, ${fits.usageHeight}% height`);
                }
            }, 100);
        } catch (error) {
            console.error('Error constraining image:', error);
        }
    }

    // Show warning
    function showWarning() {
        if (cWarning) cWarning.style.display = 'block';
        if (cOverlay) {
            cOverlay.style.outline = '3px solid #ef4444';
            cOverlay.style.outlineOffset = '4px';
        }
    }

    // Hide warning
    function hideWarning() {
        if (cWarning) cWarning.style.display = 'none';
        if (cOverlay) {
            cOverlay.style.outline = '';
            cOverlay.style.outlineOffset = '';
        }
    }

    // Apply word wrapping
    function applyWordWrapping() {
        if (!cText || !cOverlay) return;
        
        try {
            const overlayRect = cOverlay.getBoundingClientRect();
            if (overlayRect.width === 0) return;
            
            const maxWidth = (overlayRect.width * CONTAINMENT_CONFIG.maxWidth) - (CONTAINMENT_CONFIG.padding * 2);
            
            cText.style.maxWidth = maxWidth + 'px';
            cText.style.wordWrap = 'break-word';
            cText.style.overflowWrap = 'break-word';
            
            console.log('📐 Word wrapping applied');
        } catch (error) {
            console.error('Error applying wrapping:', error);
        }
    }

    // Monitor text input
    if (cTextInput) {
        cTextInput.addEventListener('input', function(e) {
            setTimeout(() => {
                applyWordWrapping();
                const overall = checkOverallFit();
                
                if (!overall.overallFits) {
                    showWarning();
                    if (!overall.textFits) {
                        console.log('📏 Text exceeds boundaries');
                    }
                } else {
                    hideWarning();
                }
            }, 100);
        });
        console.log('✅ Text input monitoring active');
    }

    // Monitor size slider
    if (cSizeSlider) {
        cSizeSlider.addEventListener('input', function(e) {
            setTimeout(() => {
                const overall = checkOverallFit();
                
                if (!overall.overallFits) {
                    showWarning();
                } else {
                    hideWarning();
                }
            }, 100);
        });
        console.log('✅ Size slider monitoring active');
    }

    // Enhanced image upload handler
    if (cImageUpload) {
        // Store original handler if exists
        const originalUploadHandler = cImageUpload.onchange;
        
        cImageUpload.addEventListener('change', function(e) {
            // Call original handler first if it exists
            if (originalUploadHandler) {
                originalUploadHandler.call(this, e);
            }
            
            const file = e.target.files[0];
            if (!file) return;
            
            console.log('📁 Image upload detected:', file.name);
            
            const reader = new FileReader();
            reader.onload = function(event) {
                // Wait a moment for existing handler to create/update image element
                setTimeout(() => {
                    // Find the image element (it should have been created by existing code)
                    currentImageElement = document.getElementById(`designImage-${sectionId}`);
                    
                    if (currentImageElement) {
                        hasUploadedImage = true;
                        
                        // Constrain the image
                        constrainImage(currentImageElement);
                        
                        // Check overall fit after image loads
                        currentImageElement.onload = function() {
                            setTimeout(() => {
                                const overall = checkOverallFit();
                                
                                if (!overall.overallFits) {
                                    showWarning();
                                    console.log('⚠️ Design (text + image) exceeds print area');
                                } else {
                                    hideWarning();
                                    console.log('✅ Design (text + image) fits within print area');
                                }
                            }, 200);
                        };
                        
                        console.log('✅ Image upload processed with containment');
                    } else {
                        console.warn('⚠️ Could not find image element after upload');
                    }
                }, 300);
            };
            reader.readAsDataURL(file);
        });
        console.log('✅ Image upload monitoring active');
    }

    // Add Auto-Fit button
    function addAutoFitButton() {
        if (document.getElementById(`containmentAutoFitBtn-${sectionId}`)) {
            console.log('ℹ️ Auto-fit button already exists');
            return;
        }
        
        const sizeGroup = cSizeSlider?.parentElement?.parentElement;
        if (!sizeGroup) {
            console.warn('⚠️ Could not find size slider group');
            return;
        }
        
        const autoFitBtn = document.createElement('button');
        autoFitBtn.id = `containmentAutoFitBtn-${sectionId}`;
        autoFitBtn.className = `cts-btn-${sectionId} cts-btn-secondary-${sectionId}`;
        autoFitBtn.style.marginTop = '10px';
        autoFitBtn.innerHTML = '📏 Auto-Fit Design to Print Area';
        autoFitBtn.type = 'button';
        
        autoFitBtn.onclick = function(e) {
            e.preventDefault();
            console.log('🎯 Auto-fit triggered');
            
            applyWordWrapping();
            
            // Adjust text
            if (cText && cText.style.display !== 'none') {
                autoAdjustText();
            }
            
            // Re-constrain image if present
            if (currentImageElement && currentImageElement.style.display !== 'none') {
                constrainImage(currentImageElement);
            }
            
            // Check overall result
            setTimeout(() => {
                const overall = checkOverallFit();
                if (!overall.overallFits) {
                    showWarning();
                    console.log('⚠️ Design still exceeds after auto-fit');
                } else {
                    hideWarning();
                    console.log('✅ Design now fits within print area');
                }
            }, 300);
        };
        
        if (sizeGroup.nextSibling) {
            sizeGroup.parentNode.insertBefore(autoFitBtn, sizeGroup.nextSibling);
        } else {
            sizeGroup.parentNode.appendChild(autoFitBtn);
        }
        
        console.log('✅ Auto-fit button added');
    }

    // Window resize handler
    let cResizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(cResizeTimeout);
        cResizeTimeout = setTimeout(() => {
            console.log('📱 Window resized, recalculating...');
            
            applyWordWrapping();
            
            // Re-constrain image if present
            if (currentImageElement) {
                constrainImage(currentImageElement);
            }
            
            // Check fit
            setTimeout(() => {
                const overall = checkOverallFit();
                if (!overall.overallFits) {
                    showWarning();
                } else {
                    hideWarning();
                }
            }, 100);
        }, 300);
    });

    // Initialize containment system
    function initCompleteContainment() {
        console.log('🎯 Initializing complete containment system...');
        console.log('📐 Config:', CONTAINMENT_CONFIG);
        
        setTimeout(() => {
            applyWordWrapping();
            addAutoFitButton();
            
            // Check for existing image
            const existingImage = document.getElementById(`designImage-${sectionId}`);
            if (existingImage) {
                currentImageElement = existingImage;
                hasUploadedImage = true;
                constrainImage(existingImage);
                console.log('🖼️ Found existing image, applying constraints');
            }
            
            // Initial check
            setTimeout(() => {
                const overall = checkOverallFit();
                
                if (cText && cText.textContent !== 'YOUR TEXT HERE') {
                    if (!overall.overallFits) {
                        showWarning();
                        console.log('⚠️ Initial design exceeds boundaries');
                    } else {
                        console.log('✅ Initial design fits');
                    }
                }
            }, 500);
        }, 1000);
        
        console.log('✅ Complete containment system initialized');
    }

    // Start initialization
    initCompleteContainment();

    console.log('🎨 Complete containment module loaded (text + images)');

    // Export functions for debugging
    window.ContainmentSystem = window.ContainmentSystem || {};
    window.ContainmentSystem[sectionId] = {
        checkOverallFit,
        checkContentFit,
        autoAdjustText,
        constrainImage,
        showWarning,
        hideWarning,
        config: CONTAINMENT_CONFIG
    };

    // ============================================
    // END COMPLETE CONTAINMENT SYSTEM
    // ============================================
    
    console.log('✅ Submit Request functionality initialized');
    console.log('✅ Designer integration points ready for enhancements');
    console.log('📱 Mobile touch gestures enabled (pinch-to-zoom, rotate)');
    console.log('🎨 Color Palette Helper initialized (76 colors available)');
    console.log('🖼️ Thumbnail Gallery initialized with 4 views');

    // ============================================
    // DEBUG CONTROL PANEL FOR PRINT AREA METRICS
    // ============================================
    
    // Create Debug Panel
    function createDebugPanel() {
        // Check if panel already exists
        if (document.getElementById(`debugPanel-${sectionId}`)) {
            return;
        }

        const panel = document.createElement('div');
        panel.id = `debugPanel-${sectionId}`;
        panel.className = `cts-debug-panel-${sectionId}`;
        
        panel.innerHTML = `
            <div class="cts-debug-header-${sectionId}">
                <div class="cts-debug-title-${sectionId}">🔧 Print Area Debug Panel</div>
                <button class="cts-debug-close-${sectionId}" onclick="document.getElementById('debugPanel-${sectionId}').remove()">✕</button>
            </div>

            <!-- CURRENT METRICS -->
            <div class="cts-debug-section-${sectionId}">
                <div class="cts-debug-section-title-${sectionId}">📊 Current Metrics</div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Print Area Width:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugPrintWidth-${sectionId}">-</span>
                </div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Print Area Height:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugPrintHeight-${sectionId}">-</span>
                </div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Text Width:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugTextWidth-${sectionId}">-</span>
                </div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Text Height:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugTextHeight-${sectionId}">-</span>
                </div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Image Width:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugImageWidth-${sectionId}">-</span>
                </div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Image Height:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugImageHeight-${sectionId}">-</span>
                </div>
                
                <div class="cts-debug-metric-${sectionId}">
                    <span class="cts-debug-label-${sectionId}">Font Size:</span>
                    <span class="cts-debug-value-${sectionId}" id="debugFontSize-${sectionId}">-</span>
                </div>
            </div>

            <!-- STATUS -->
            <div class="cts-debug-status-${sectionId} fits" id="debugStatus-${sectionId}">
                ✓ Design Fits
            </div>

            <!-- ADJUSTABLE CONFIG -->
            <div class="cts-debug-section-${sectionId}">
                <div class="cts-debug-section-title-${sectionId}">⚙️ Adjustable Config</div>
                
                <!-- Text Max Width -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Text Max Width (%)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugMaxWidth-${sectionId}" 
                           min="50" max="100" step="1" value="95">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>50%</span>
                        <span id="debugMaxWidthVal-${sectionId}">95%</span>
                        <span>100%</span>
                    </div>
                </div>

                <!-- Text Max Height -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Text Max Height (%)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugMaxHeight-${sectionId}" 
                           min="50" max="100" step="1" value="95">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>50%</span>
                        <span id="debugMaxHeightVal-${sectionId}">95%</span>
                        <span>100%</span>
                    </div>
                </div>

                <!-- Image Max Width -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Image Max Width (%)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugImageMaxWidth-${sectionId}" 
                           min="50" max="100" step="1" value="90">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>50%</span>
                        <span id="debugImageMaxWidthVal-${sectionId}">90%</span>
                        <span>100%</span>
                    </div>
                </div>

                <!-- Image Max Height -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Image Max Height (%)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugImageMaxHeight-${sectionId}" 
                           min="50" max="100" step="1" value="90">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>50%</span>
                        <span id="debugImageMaxHeightVal-${sectionId}">90%</span>
                        <span>100%</span>
                    </div>
                </div>

                <!-- Padding -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Padding (px)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugPadding-${sectionId}" 
                           min="0" max="50" step="1" value="8">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>0px</span>
                        <span id="debugPaddingVal-${sectionId}">8px</span>
                        <span>50px</span>
                    </div>
                </div>

                <!-- Min Font Size -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Min Font Size (px)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugMinFontSize-${sectionId}" 
                           min="8" max="30" step="1" value="14">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>8px</span>
                        <span id="debugMinFontSizeVal-${sectionId}">14px</span>
                        <span>30px</span>
                    </div>
                </div>

                <!-- Max Font Size -->
                <div class="cts-debug-slider-group-${sectionId}">
                    <div class="cts-debug-label-${sectionId}">Max Font Size (px)</div>
                    <input type="range" class="cts-debug-slider-${sectionId}" 
                           id="debugMaxFontSize-${sectionId}" 
                           min="30" max="120" step="2" value="72">
                    <div class="cts-debug-slider-label-${sectionId}">
                        <span>30px</span>
                        <span id="debugMaxFontSizeVal-${sectionId}">72px</span>
                        <span>120px</span>
                    </div>
                </div>

                <button class="cts-debug-reset-btn-${sectionId}" id="debugReset-${sectionId}">
                    🔄 Reset to Defaults
                </button>

                <button class="cts-debug-export-${sectionId}" id="debugExport-${sectionId}">
                    📋 Copy Config to Clipboard
                </button>
            </div>
        `;

        document.body.appendChild(panel);
        
        // Setup event listeners
        setupDebugControls();
        
        // Start real-time updates
        startRealTimeUpdates();
        
        console.log('✅ Debug panel created');
    }

    // Setup controls
    function setupDebugControls() {
        // Get sliders
        const maxWidthSlider = document.getElementById(`debugMaxWidth-${sectionId}`);
        const maxHeightSlider = document.getElementById(`debugMaxHeight-${sectionId}`);
        const imageMaxWidthSlider = document.getElementById(`debugImageMaxWidth-${sectionId}`);
        const imageMaxHeightSlider = document.getElementById(`debugImageMaxHeight-${sectionId}`);
        const paddingSlider = document.getElementById(`debugPadding-${sectionId}`);
        const minFontSlider = document.getElementById(`debugMinFontSize-${sectionId}`);
        const maxFontSlider = document.getElementById(`debugMaxFontSize-${sectionId}`);
        
        const resetBtn = document.getElementById(`debugReset-${sectionId}`);
        const exportBtn = document.getElementById(`debugExport-${sectionId}`);

        // Update CONTAINMENT_CONFIG when sliders change
        function updateConfig() {
            if (window.ContainmentSystem && window.ContainmentSystem[sectionId]) {
                const config = window.ContainmentSystem[sectionId].config;
                
                config.maxWidth = parseFloat(maxWidthSlider.value) / 100;
                config.maxHeight = parseFloat(maxHeightSlider.value) / 100;
                config.imageMaxWidth = parseFloat(imageMaxWidthSlider.value) / 100;
                config.imageMaxHeight = parseFloat(imageMaxHeightSlider.value) / 100;
                config.padding = parseInt(paddingSlider.value);
                config.minFontSize = parseInt(minFontSlider.value);
                config.maxFontSize = parseInt(maxFontSlider.value);
                
                // Update displays
                document.getElementById(`debugMaxWidthVal-${sectionId}`).textContent = maxWidthSlider.value + '%';
                document.getElementById(`debugMaxHeightVal-${sectionId}`).textContent = maxHeightSlider.value + '%';
                document.getElementById(`debugImageMaxWidthVal-${sectionId}`).textContent = imageMaxWidthSlider.value + '%';
                document.getElementById(`debugImageMaxHeightVal-${sectionId}`).textContent = imageMaxHeightSlider.value + '%';
                document.getElementById(`debugPaddingVal-${sectionId}`).textContent = paddingSlider.value + 'px';
                document.getElementById(`debugMinFontSizeVal-${sectionId}`).textContent = minFontSlider.value + 'px';
                document.getElementById(`debugMaxFontSizeVal-${sectionId}`).textContent = maxFontSlider.value + 'px';
                
                console.log('📐 Config updated:', config);
            }
        }

        // Add event listeners
        maxWidthSlider.addEventListener('input', updateConfig);
        maxHeightSlider.addEventListener('input', updateConfig);
        imageMaxWidthSlider.addEventListener('input', updateConfig);
        imageMaxHeightSlider.addEventListener('input', updateConfig);
        paddingSlider.addEventListener('input', updateConfig);
        minFontSlider.addEventListener('input', updateConfig);
        maxFontSlider.addEventListener('input', updateConfig);

        // Reset button
        resetBtn.addEventListener('click', () => {
            maxWidthSlider.value = 95;
            maxHeightSlider.value = 95;
            imageMaxWidthSlider.value = 90;
            imageMaxHeightSlider.value = 90;
            paddingSlider.value = 8;
            minFontSlider.value = 14;
            maxFontSlider.value = 72;
            updateConfig();
            console.log('🔄 Config reset to defaults');
        });

        // Export button
        exportBtn.addEventListener('click', () => {
            if (window.ContainmentSystem && window.ContainmentSystem[sectionId]) {
                const config = window.ContainmentSystem[sectionId].config;
                const configText = `const CONTAINMENT_CONFIG = {
    maxWidth: ${config.maxWidth},
    maxHeight: ${config.maxHeight},
    padding: ${config.padding},
    minFontSize: ${config.minFontSize},
    maxFontSize: ${config.maxFontSize},
    imageMaxWidth: ${config.imageMaxWidth},
    imageMaxHeight: ${config.imageMaxHeight}
};`;
                
                navigator.clipboard.writeText(configText).then(() => {
                    exportBtn.textContent = '✅ Copied!';
                    setTimeout(() => {
                        exportBtn.textContent = '📋 Copy Config to Clipboard';
                    }, 2000);
                });
            }
        });
    }

    // Real-time metric updates
    function startRealTimeUpdates() {
        setInterval(() => {
            updateDebugMetrics();
        }, 200); // Update every 200ms
    }

    function updateDebugMetrics() {
        const cOverlay = document.getElementById(`designOverlay-${sectionId}`);
        const cText = document.getElementById(`designText-${sectionId}`);
        const cImage = document.getElementById(`designImage-${sectionId}`);

        if (!cOverlay) return;

        const overlayRect = cOverlay.getBoundingClientRect();
        
        // Update print area dimensions
        document.getElementById(`debugPrintWidth-${sectionId}`).textContent = 
            Math.round(overlayRect.width) + 'px';
        document.getElementById(`debugPrintHeight-${sectionId}`).textContent = 
            Math.round(overlayRect.height) + 'px';

        // Update text dimensions
        if (cText && cText.style.display !== 'none') {
            const textRect = cText.getBoundingClientRect();
            document.getElementById(`debugTextWidth-${sectionId}`).textContent = 
                Math.round(textRect.width) + 'px';
            document.getElementById(`debugTextHeight-${sectionId}`).textContent = 
                Math.round(textRect.height) + 'px';
            
            const computedStyle = window.getComputedStyle(cText);
            document.getElementById(`debugFontSize-${sectionId}`).textContent = 
                computedStyle.fontSize;
        } else {
            document.getElementById(`debugTextWidth-${sectionId}`).textContent = 'N/A';
            document.getElementById(`debugTextHeight-${sectionId}`).textContent = 'N/A';
            document.getElementById(`debugFontSize-${sectionId}`).textContent = 'N/A';
        }

        // Update image dimensions
        if (cImage && cImage.style.display !== 'none') {
            const imageRect = cImage.getBoundingClientRect();
            document.getElementById(`debugImageWidth-${sectionId}`).textContent = 
                Math.round(imageRect.width) + 'px';
            document.getElementById(`debugImageHeight-${sectionId}`).textContent = 
                Math.round(imageRect.height) + 'px';
        } else {
            document.getElementById(`debugImageWidth-${sectionId}`).textContent = 'N/A';
            document.getElementById(`debugImageHeight-${sectionId}`).textContent = 'N/A';
        }

        // Check fit status
        if (window.ContainmentSystem && window.ContainmentSystem[sectionId]) {
            const fitResult = window.ContainmentSystem[sectionId].checkOverallFit();
            const statusEl = document.getElementById(`debugStatus-${sectionId}`);
            
            if (fitResult.overallFits) {
                statusEl.className = `cts-debug-status-${sectionId} fits`;
                statusEl.textContent = '✓ Design Fits';
            } else {
                statusEl.className = `cts-debug-status-${sectionId} exceeds`;
                statusEl.textContent = '⚠ Design Exceeds Print Area';
            }
        }
    }

    // Initialize debug panel after a short delay
    setTimeout(() => {
        createDebugPanel();
        console.log('🔧 Debug control panel initialized');
    }, 2000);

    // ============================================
    // END DEBUG CONTROL PANEL
    // ============================================

})();
</script>

{% schema %}
{
  "name": "Custom T-Shirt Studio",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "✨ Custom T-Shirt Designer"
    }
  ],
  "presets": [
    {
      "name": "Custom T-Shirt Studio"
    }
  ]
}
{% endschema %}
