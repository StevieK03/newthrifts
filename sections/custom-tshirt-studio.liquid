{% comment %}
  Custom T-Shirt Design Studio Section
  FINAL FIX: Mobile print area enlarged + auto-fit text + direct canvas editing
  - Larger print area on phones (55-58% width vs 37%)
  - Auto-shrink text to fit instead of warning too early
  - Tap "Your design here" to type directly on canvas
  - Real-time sync between canvas and sidebar input
{% endcomment %}

<script src="{{ 'designer-enhancements.js' | asset_url }}" defer></script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Inter:wght@700&family=Playfair+Display:wght@700&family=Montserrat:wght@700&family=Oswald:wght@700&family=Raleway:wght@700&family=Lato:wght@700&family=Roboto:wght@700&family=Open+Sans:wght@700&family=Poppins:wght@700&family=Merriweather:wght@700&family=Ubuntu:wght@700&family=Nunito:wght@700&family=Rubik:wght@700&family=Work+Sans:wght@700&family=Quicksand:wght@700&family=Outfit:wght@700&family=Space+Grotesk:wght@700&family=Libre+Baskerville:wght@700&family=Crimson+Text:wght@700&family=Archivo+Black&family=Righteous&family=Bangers&family=Pacifico&family=Dancing+Script:wght@700&family=Permanent+Marker&family=Caveat:wght@700&family=Satisfy&family=Shadows+Into+Light&family=Lobster&family=Abril+Fatface&family=Alfa+Slab+One&family=Anton&family=Fjalla+One&family=Russo+One&family=Teko:wght@700&display=swap" rel="stylesheet">

<style>
  .custom-tshirt-studio-{{ section.id }} * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .custom-tshirt-studio-{{ section.id }} {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    min-height: 100vh;
    color: #e2e8f0;
    padding: 0;
    width: 100%;
    overflow-x: hidden;
    box-sizing: border-box;
  }

  .cts-header-{{ section.id }} {
    background: rgba(15, 23, 42, 0.8);
    backdrop-filter: blur(10px);
    padding: 20px 40px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .cts-header-{{ section.id }} h1 {
    font-size: 24px;
    font-weight: 700;
    background: linear-gradient(135deg, #60a5fa, #a78bfa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .cts-header-actions-{{ section.id }} {
    display: flex;
    gap: 12px;
  }

  .cts-header-btn-{{ section.id }} {
    padding: 10px 20px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .cts-header-btn-{{ section.id }}:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
  }

  .cts-header-btn-{{ section.id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .cts-container-{{ section.id }} {
    max-width: 1400px;
    margin: 0 auto;
    padding: 40px 20px;
    display: grid;
    grid-template-columns: 120px 1fr 400px;
    gap: 20px;
  }

  /* THUMBNAIL GALLERY */
  .cts-thumbnail-gallery-{{ section.id }} {
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 16px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    max-height: 600px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(96, 165, 250, 0.5) transparent;
  }

  .cts-thumbnail-gallery-{{ section.id }}::-webkit-scrollbar {
    width: 6px;
  }

  .cts-thumbnail-gallery-{{ section.id }}::-webkit-scrollbar-track {
    background: transparent;
  }

  .cts-thumbnail-gallery-{{ section.id }}::-webkit-scrollbar-thumb {
    background: rgba(96, 165, 250, 0.5);
    border-radius: 3px;
  }

  .cts-thumbnail-item-{{ section.id }} {
    position: relative;
    width: 100px;
    height: 100px;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    border: 2px solid transparent;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.1);
  }

  .cts-thumbnail-item-{{ section.id }}:hover {
    border-color: rgba(96, 165, 250, 0.5);
    transform: translateX(5px);
  }

  .cts-thumbnail-item-{{ section.id }}.active {
    border-color: #60a5fa;
    box-shadow: 0 0 20px rgba(96, 165, 250, 0.4);
  }

  .cts-thumbnail-img-{{ section.id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .cts-thumbnail-label-{{ section.id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
    padding: 4px 6px;
    font-size: 10px;
    font-weight: 600;
    text-align: center;
    color: white;
  }

  /* PREVIEW SECTION */
  .cts-preview-section-{{ section.id }} {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .cts-preview-card-{{ section.id }} {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 24px;
    padding: 40px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    overflow: visible;
    width: 100%;
    box-sizing: border-box;
  }

  .cts-mockup-stage-{{ section.id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background: linear-gradient(135deg, #27e1c1 0%, #667eea 20%, #764ba2 35%, #f093fb 50%, #4facfe 65%, #27e1c1 100%);
    background-size: 300% 300%;
    animation: gradientShift-{{ section.id }} 15s ease infinite;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 25px 80px rgba(39, 225, 193, 0.2);
    transition: all 0.3s ease;
    min-width: 0;
  }

  @keyframes gradientShift-{{ section.id }} {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  .cts-mockup-canvas-{{ section.id }} {
    position: relative;
    width: 100%;
    height: 100%;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* PRINT AREA OVERLAY - Desktop default */
  .cts-design-overlay-{{ section.id }} {
    position: absolute;
    top: 25%;
    left: 15%;
    width: 70%;
    height: 50%;
    pointer-events: none;
    z-index: 2;
    border: 2px dashed rgba(96, 165, 250, 0.3);
    box-sizing: border-box;
    transition: border-color 0.3s ease;
  }

  /* Border-only flashing red animation when exceeds */
  .cts-design-overlay-{{ section.id }}.exceeds {
    border-color: rgba(239, 68, 68, 0.8);
    border-width: 3px;
    animation: flashBorder-{{ section.id }} 1s ease-in-out infinite;
  }

  @keyframes flashBorder-{{ section.id }} {
    0%, 100% {
      border-color: rgba(239, 68, 68, 0.8);
      border-width: 3px;
    }
    50% {
      border-color: rgba(239, 68, 68, 0.3);
      border-width: 2px;
    }
  }

  /* Visual affordance when focused for typing */
  .cts-design-overlay-{{ section.id }}:focus-within .cts-design-text-{{ section.id }} {
    outline: 2px dashed rgba(96, 165, 250, 0.6);
    outline-offset: 4px;
  }

  .cts-design-content-{{ section.id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    box-sizing: border-box;
    padding: 10px;
  }

  /* EDITABLE TEXT - pointer-events: auto for direct editing */
  .cts-design-text-{{ section.id }} {
    font-family: var(--custom-font-family, 'Bebas Neue', sans-serif);
    font-size: 32px;
    font-weight: 700;
    text-align: center;
    word-wrap: break-word;
    word-break: break-word;
    overflow-wrap: anywhere;
    max-width: 100%;
    line-height: 1.2;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    color: #000000;
    pointer-events: auto; /* FIXED: Allow clicks for direct editing */
    cursor: text;
    transition: opacity 0.3s ease;
    caret-color: #000;
    outline: none; /* Remove default contenteditable outline */
  }

  .cts-design-text-{{ section.id }}.placeholder {
    opacity: 0.5;
  }

  .cts-design-text-{{ section.id }}:hover {
    opacity: 0.8;
  }

  .cts-design-text-{{ section.id }}:focus {
    opacity: 1;
  }

  .cts-design-image-{{ section.id }} {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    display: none;
    pointer-events: none;
  }

  /* CANVAS CONTROLS */
  .cts-canvas-zoom-controls-{{ section.id }} {
    display: flex;
    align-items: center;
    gap: 12px;
    background: rgba(255, 255, 255, 0.1);
    padding: 8px 16px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .cts-canvas-zoom-controls-{{ section.id }} svg {
    width: 18px;
    height: 18px;
    fill: currentColor;
  }

  .cts-zoom-btn-{{ section.id }} {
    width: 36px;
    height: 36px;
    background: rgba(96, 165, 250, 0.2);
    border: 1px solid rgba(96, 165, 250, 0.4);
    border-radius: 8px;
    color: white;
    font-size: 20px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cts-zoom-btn-{{ section.id }}:hover {
    background: rgba(96, 165, 250, 0.3);
    transform: scale(1.05);
  }

  .cts-zoom-slider-{{ section.id }} {
    width: 150px;
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    border-radius: 3px;
    background: rgba(255, 255, 255, 0.2);
    outline: none;
  }

  .cts-zoom-slider-{{ section.id }}::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: #60a5fa;
    cursor: pointer;
    border: 2px solid white;
  }

  .cts-zoom-slider-{{ section.id }}::-moz-range-thumb {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: #60a5fa;
    cursor: pointer;
    border: 2px solid white;
  }

  .cts-zoom-label-{{ section.id }} {
    font-size: 14px;
    font-weight: 600;
    min-width: 50px;
    text-align: center;
  }

  .cts-canvas-actions-{{ section.id }} {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .cts-canvas-action-btn-{{ section.id }} {
    padding: 10px 16px;
    background: rgba(96, 165, 250, 0.2);
    border: 1px solid rgba(96, 165, 250, 0.4);
    border-radius: 8px;
    color: white;
    font-size: 13px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 6px;
  }

  .cts-canvas-action-btn-{{ section.id }}:hover {
    background: rgba(96, 165, 250, 0.3);
    transform: translateY(-2px);
  }

  .cts-canvas-action-btn-{{ section.id }} svg {
    width: 16px;
    height: 16px;
    fill: currentColor;
  }

  /* CONTROLS SECTION */
  .cts-controls-section-{{ section.id }} {
    display: flex;
    flex-direction: column;
    gap: 20px;
    max-height: calc(100vh - 200px);
    overflow-y: auto;
    padding-right: 10px;
    scrollbar-width: thin;
    scrollbar-color: rgba(96, 165, 250, 0.5) transparent;
  }

  .cts-controls-section-{{ section.id }}::-webkit-scrollbar {
    width: 8px;
  }

  .cts-controls-section-{{ section.id }}::-webkit-scrollbar-track {
    background: transparent;
  }

  .cts-controls-section-{{ section.id }}::-webkit-scrollbar-thumb {
    background: rgba(96, 165, 250, 0.5);
    border-radius: 4px;
  }

  .cts-control-group-{{ section.id }} {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 20px;
  }

  .cts-control-group-{{ section.id }} h3 {
    font-size: 16px;
    font-weight: 700;
    margin-bottom: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
    color: #60a5fa;
  }

  .cts-control-group-{{ section.id }} h3 svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
  }

  .cts-control-item-{{ section.id }} {
    margin-bottom: 16px;
  }

  .cts-control-item-{{ section.id }} label {
    display: block;
    font-size: 13px;
    font-weight: 600;
    margin-bottom: 8px;
    color: #cbd5e1;
  }

  .cts-tshirt-color-picker-{{ section.id }} {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  .cts-color-option-{{ section.id }} {
    width: 45px;
    height: 45px;
    border-radius: 10px;
    cursor: pointer;
    border: 3px solid transparent;
    transition: all 0.2s;
    position: relative;
  }

  .cts-color-option-{{ section.id }}:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .cts-color-option-{{ section.id }}.active {
    border-color: #60a5fa;
    box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.3);
  }

  .cts-color-option-{{ section.id }}::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 16px;
    height: 16px;
    background: white;
    border-radius: 50%;
    transition: transform 0.2s;
  }

  .cts-color-option-{{ section.id }}.active::after {
    transform: translate(-50%, -50%) scale(1);
  }

  .cts-text-input-{{ section.id }} {
    width: 100%;
    padding: 12px 16px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    font-size: 14px;
    font-family: inherit;
    transition: all 0.2s;
  }

  .cts-text-input-{{ section.id }}:focus {
    outline: none;
    border-color: #60a5fa;
    background: rgba(255, 255, 255, 0.15);
  }

  .cts-font-size-control-{{ section.id }} {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .cts-font-size-btn-{{ section.id }} {
    width: 36px;
    height: 36px;
    background: rgba(96, 165, 250, 0.2);
    border: 1px solid rgba(96, 165, 250, 0.4);
    border-radius: 8px;
    color: white;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cts-font-size-btn-{{ section.id }}:hover {
    background: rgba(96, 165, 250, 0.3);
    transform: scale(1.05);
  }

  .cts-font-size-slider-{{ section.id }} {
    flex: 1;
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    border-radius: 3px;
    background: rgba(255, 255, 255, 0.2);
    outline: none;
  }

  .cts-font-size-slider-{{ section.id }}::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: #60a5fa;
    cursor: pointer;
    border: 2px solid white;
  }

  .cts-font-size-slider-{{ section.id }}::-moz-range-thumb {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: #60a5fa;
    cursor: pointer;
    border: 2px solid white;
  }

  .cts-font-size-display-{{ section.id }} {
    min-width: 50px;
    text-align: center;
    font-weight: 600;
    font-size: 14px;
  }

  .cts-font-style-buttons-{{ section.id }} {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 8px;
  }

  .cts-style-btn-{{ section.id }} {
    padding: 10px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    font-size: 13px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    text-align: center;
  }

  .cts-style-btn-{{ section.id }}:hover {
    background: rgba(255, 255, 255, 0.15);
  }

  .cts-style-btn-{{ section.id }}.active {
    background: rgba(96, 165, 250, 0.3);
    border-color: #60a5fa;
  }

  .cts-font-picker-grid-{{ section.id }} {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    max-height: 300px;
    overflow-y: auto;
    padding-right: 8px;
    scrollbar-width: thin;
    scrollbar-color: rgba(96, 165, 250, 0.5) transparent;
  }

  .cts-font-picker-grid-{{ section.id }}::-webkit-scrollbar {
    width: 6px;
  }

  .cts-font-picker-grid-{{ section.id }}::-webkit-scrollbar-track {
    background: transparent;
  }

  .cts-font-picker-grid-{{ section.id }}::-webkit-scrollbar-thumb {
    background: rgba(96, 165, 250, 0.5);
    border-radius: 3px;
  }

  .cts-font-btn-{{ section.id }} {
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: white;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .cts-font-btn-{{ section.id }}:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
  }

  .cts-font-btn-{{ section.id }}.active {
    background: rgba(96, 165, 250, 0.2);
    border-color: #60a5fa;
  }

  .cts-text-color-picker-{{ section.id }} {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .cts-color-presets-{{ section.id }} {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    gap: 8px;
  }

  .cts-color-preset-{{ section.id }} {
    width: 100%;
    aspect-ratio: 1;
    border-radius: 8px;
    cursor: pointer;
    border: 2px solid transparent;
    transition: all 0.2s;
  }

  .cts-color-preset-{{ section.id }}:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .cts-color-preset-{{ section.id }}.active {
    border-color: white;
    box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.5);
  }

  .cts-hex-color-input-{{ section.id }} {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .cts-hex-input-{{ section.id }} {
    flex: 1;
    padding: 10px 12px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    font-size: 13px;
    font-family: 'Courier New', monospace;
    text-transform: uppercase;
  }

  .cts-hex-input-{{ section.id }}:focus {
    outline: none;
    border-color: #60a5fa;
    background: rgba(255, 255, 255, 0.15);
  }

  .cts-color-picker-btn-{{ section.id }} {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    cursor: pointer;
    border: 2px solid rgba(255, 255, 255, 0.3);
    position: relative;
    overflow: hidden;
  }

  .cts-color-picker-btn-{{ section.id }} input[type="color"] {
    position: absolute;
    top: -5px;
    left: -5px;
    width: calc(100% + 10px);
    height: calc(100% + 10px);
    border: none;
    cursor: pointer;
  }

  .cts-submit-btn-{{ section.id }} {
    width: 100%;
    padding: 16px;
    background: linear-gradient(135deg, #ef4444, #dc2626);
    border: none;
    border-radius: 12px;
    color: white;
    font-size: 16px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .cts-submit-btn-{{ section.id }}:hover {
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(239, 68, 68, 0.4);
  }

  .cts-submit-btn-{{ section.id }} svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
  }

  /* ============================================
     MOBILE RESPONSIVENESS - ENLARGED PRINT AREA
     ============================================ */
  @media (max-width: 1024px) {
    .cts-container-{{ section.id }} {
      grid-template-columns: 1fr;
      padding: 20px 15px;
    }

    .cts-thumbnail-gallery-{{ section.id }} {
      flex-direction: row;
      max-height: none;
      overflow-x: auto;
      overflow-y: hidden;
    }

    .cts-thumbnail-item-{{ section.id }}:hover {
      transform: translateY(-5px);
    }

    .cts-header-{{ section.id }} {
      padding: 15px 20px;
    }

    .cts-header-{{ section.id }} h1 {
      font-size: 18px;
    }

    .cts-header-btn-{{ section.id }} {
      padding: 8px 14px;
      font-size: 12px;
    }

    .cts-preview-card-{{ section.id }} {
      padding: 20px 10px;
    }

    .cts-mockup-stage-{{ section.id }} {
      padding: 20px;
      min-height: 400px;
    }

    .cts-font-picker-grid-{{ section.id }} {
      grid-template-columns: 1fr;
    }
    
    .cts-controls-section-{{ section.id }} {
      max-height: none;
    }
  }

  /* FIX: Larger print area on phones (480px and below) */
  @media (max-width: 480px) {
    .cts-design-overlay-{{ section.id }} {
      width: 55%; /* Up from 37% */
      height: 58%; /* Up from 42% */
      top: 24%; /* Adjusted from 29% */
    }

    .cts-design-text-{{ section.id }} {
      font-size: 24px; /* Smaller baseline so more text fits before downscaling */
      line-height: 1.15; /* Tighter line-height */
      word-break: break-word;
      overflow-wrap: anywhere;
    }

    .cts-header-actions-{{ section.id }} {
      gap: 8px;
    }

    .cts-header-btn-{{ section.id }} span {
      display: none;
    }

    .cts-canvas-zoom-controls-{{ section.id }} {
      flex-wrap: wrap;
    }

    .cts-zoom-slider-{{ section.id }} {
      width: 100%;
    }

    .cts-canvas-actions-{{ section.id }} {
      justify-content: center;
    }

    .cts-font-size-control-{{ section.id }} {
      flex-wrap: wrap;
    }

    .cts-font-size-slider-{{ section.id }} {
      width: 100%;
    }
  }

  /* Extra small screens - even larger print area */
  @media (max-width: 375px) {
    .cts-design-overlay-{{ section.id }} {
      width: 58%; /* Even larger */
      height: 62%;
      top: 22%;
    }

    .cts-design-text-{{ section.id }} {
      font-size: 22px;
    }

    .cts-mockup-stage-{{ section.id }} {
      min-height: 350px;
      padding: 15px;
    }

    .cts-preview-card-{{ section.id }} {
      padding: 15px 5px;
      border-radius: 16px;
    }
  }

  /* ACCESSIBILITY */
  @media (prefers-reduced-motion: reduce) {
    *,
    .cts-design-overlay-{{ section.id }}.exceeds {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* PRINT STYLES */
  @media print {
    .cts-header-{{ section.id }},
    .cts-controls-section-{{ section.id }},
    .cts-thumbnail-gallery-{{ section.id }},
    .cts-canvas-zoom-controls-{{ section.id }},
    .cts-canvas-actions-{{ section.id }} {
      display: none !important;
    }

    .cts-preview-card-{{ section.id }} {
      box-shadow: none;
      border: 1px solid #ddd;
    }
  }
</style>

<div class="custom-tshirt-studio-{{ section.id }}">
  <!-- Header -->
  <div class="cts-header-{{ section.id }}">
    <h1>{{ section.settings.heading }}</h1>
    <div class="cts-header-actions-{{ section.id }}">
      <button class="cts-header-btn-{{ section.id }}" id="undoBtn-{{ section.id }}" disabled>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
          <path d="M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z"/>
        </svg>
        <span>Undo</span>
      </button>
      <button class="cts-header-btn-{{ section.id }}" id="placementBtn-{{ section.id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
          <path d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5zm-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-2zm-3-4h8v2H8z"/>
        </svg>
        <span>Placement Guide</span>
      </button>
    </div>
  </div>

  <!-- Main Container -->
  <div class="cts-container-{{ section.id }}">
    
    <!-- Thumbnail Gallery Sidebar -->
    <div class="cts-thumbnail-gallery-{{ section.id }}">
      <div class="cts-thumbnail-item-{{ section.id }} active" data-view="front">
        <img src="https://i.imgur.com/VhPXPZx.png" alt="White T-Shirt Front" class="cts-thumbnail-img-{{ section.id }}">
        <div class="cts-thumbnail-label-{{ section.id }}">Front</div>
      </div>
      <div class="cts-thumbnail-item-{{ section.id }}" data-view="back">
        <img src="https://i.imgur.com/iFCuHK6.png" alt="White T-Shirt Back" class="cts-thumbnail-img-{{ section.id }}">
        <div class="cts-thumbnail-label-{{ section.id }}">Back</div>
      </div>
      <div class="cts-thumbnail-item-{{ section.id }}" data-view="side1">
        <img src="https://i.imgur.com/YqLg8B9.png" alt="White T-Shirt Side 1" class="cts-thumbnail-img-{{ section.id }}">
        <div class="cts-thumbnail-label-{{ section.id }}">Side 1</div>
      </div>
      <div class="cts-thumbnail-item-{{ section.id }}" data-view="side2">
        <img src="https://i.imgur.com/Ns4Oav0.png" alt="White T-Shirt Side 2" class="cts-thumbnail-img-{{ section.id }}">
        <div class="cts-thumbnail-label-{{ section.id }}">Side 2</div>
      </div>
    </div>

    <!-- Preview Section -->
    <div class="cts-preview-section-{{ section.id }}">
      <div class="cts-preview-card-{{ section.id }}">
        <div class="cts-mockup-stage-{{ section.id }}" id="mockupStage-{{ section.id }}">
          <div class="cts-mockup-canvas-{{ section.id }}" id="mockupCanvas-{{ section.id }}">
            <div class="cts-design-overlay-{{ section.id }}" id="designOverlay-{{ section.id }}">
              <div class="cts-design-content-{{ section.id }}" id="designContent-{{ section.id }}">
                <div class="cts-design-text-{{ section.id }} placeholder" 
                     id="designText-{{ section.id }}"
                     data-placeholder="Your Design Here">Your Design Here</div>
                <img src="" alt="Design Image" class="cts-design-image-{{ section.id }}" id="designImage-{{ section.id }}">
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Canvas Controls -->
      <div class="cts-canvas-zoom-controls-{{ section.id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        </svg>
        <button class="cts-zoom-btn-{{ section.id }}" id="zoomOut-{{ section.id }}">−</button>
        <input type="range" min="50" max="200" value="100" class="cts-zoom-slider-{{ section.id }}" id="zoomSlider-{{ section.id }}">
        <button class="cts-zoom-btn-{{ section.id }}" id="zoomIn-{{ section.id }}">+</button>
        <span class="cts-zoom-label-{{ section.id }}" id="zoomLabel-{{ section.id }}">100%</span>
      </div>

      <div class="cts-canvas-actions-{{ section.id }}">
        <button class="cts-canvas-action-btn-{{ section.id }}" id="downloadBtn-{{ section.id }}">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"/>
          </svg>
          Download Preview
        </button>
        <button class="cts-canvas-action-btn-{{ section.id }}" id="shareBtn-{{ section.id }}">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
          </svg>
          Share Design
        </button>
        <button class="cts-canvas-action-btn-{{ section.id }}" id="resetBtn-{{ section.id }}">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
          </svg>
          Reset All
        </button>
      </div>
    </div>

    <!-- Controls Panel -->
    <div class="cts-controls-section-{{ section.id }}">
      
      <!-- T-Shirt Color -->
      <div class="cts-control-group-{{ section.id }}">
        <h3>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M12 22C6.49 22 2 17.51 2 12S6.49 2 12 2s10 4.04 10 9c0 3.31-2.69 6-6 6h-1.77c-.28 0-.5.22-.5.5 0 .12.05.23.13.33.41.47.64 1.06.64 1.67 0 1.38-1.12 2.5-2.5 2.5zm0-18c-4.41 0-8 3.59-8 8s3.59 8 8 8c.28 0 .5-.22.5-.5 0-.16-.08-.28-.14-.35-.41-.46-.63-1.05-.63-1.65 0-1.38 1.12-2.5 2.5-2.5H16c2.21 0 4-1.79 4-4 0-3.86-3.59-7-8-7z"/><circle cx="6.5" cy="11.5" r="1.5"/><circle cx="9.5" cy="7.5" r="1.5"/><circle cx="14.5" cy="7.5" r="1.5"/><circle cx="17.5" cy="11.5" r="1.5"/>
          </svg>
          T-Shirt Color
        </h3>
        <label>Choose Background</label>
        <div class="cts-tshirt-color-picker-{{ section.id }}">
          <div class="cts-color-option-{{ section.id }} active" style="background: #FFFFFF;" data-color="white"></div>
          <div class="cts-color-option-{{ section.id }}" style="background: #000000;" data-color="black"></div>
        </div>
      </div>

      <!-- Design Text -->
      <div class="cts-control-group-{{ section.id }}">
        <h3>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M5 4v3h5.5v12h3V7H19V4z"/>
          </svg>
          Design Text
        </h3>
        <div class="cts-control-item-{{ section.id }}">
          <label>Your Text (or tap on canvas to type)</label>
          <input type="text" 
                 class="cts-text-input-{{ section.id }}" 
                 id="designTextInput-{{ section.id }}" 
                 placeholder="Enter your text here..." 
                 maxlength="200"
                 value="Your Design Here">
          <div style="margin-top: 8px; font-size: 11px; color: #94a3b8; text-align: right;">
            <span id="charCount-{{ section.id }}">16</span>/200 characters
          </div>
        </div>

        <div class="cts-control-item-{{ section.id }}">
          <label>Font Size</label>
          <div class="cts-font-size-control-{{ section.id }}">
            <button class="cts-font-size-btn-{{ section.id }}" id="decreaseFontSize-{{ section.id }}">−</button>
            <input type="range" 
                   min="16" 
                   max="96" 
                   value="32" 
                   class="cts-font-size-slider-{{ section.id }}" 
                   id="fontSizeSlider-{{ section.id }}">
            <button class="cts-font-size-btn-{{ section.id }}" id="increaseFontSize-{{ section.id }}">+</button>
            <span class="cts-font-size-display-{{ section.id }}" id="fontSizeDisplay-{{ section.id }}">32px</span>
          </div>
        </div>

        <div class="cts-control-item-{{ section.id }}">
          <label>Font Style</label>
          <div class="cts-font-style-buttons-{{ section.id }}">
            <button class="cts-style-btn-{{ section.id }}" data-style="bold">Bold</button>
            <button class="cts-style-btn-{{ section.id }}" data-style="italic">Italic</button>
            <button class="cts-style-btn-{{ section.id }}" data-style="underline">Under</button>
            <button class="cts-style-btn-{{ section.id }}" data-style="uppercase">CAPS</button>
          </div>
        </div>

        <div class="cts-control-item-{{ section.id }}">
          <label>Font Family</label>
          <div class="cts-font-picker-grid-{{ section.id }}" id="fontPicker-{{ section.id }}">
            <!-- Font buttons will be generated by JavaScript -->
          </div>
        </div>
      </div>

      <!-- Text Color -->
      <div class="cts-control-group-{{ section.id }}">
        <h3>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/>
          </svg>
          Text Color
        </h3>
        <div class="cts-text-color-picker-{{ section.id }}">
          <div class="cts-color-presets-{{ section.id }}" id="colorPresets-{{ section.id }}">
            <!-- Color preset buttons generated by JavaScript -->
          </div>
          <div class="cts-hex-color-input-{{ section.id }}">
            <input type="text" 
                   class="cts-hex-input-{{ section.id }}" 
                   id="hexInput-{{ section.id }}" 
                   placeholder="#000000" 
                   maxlength="7"
                   value="#000000">
            <div class="cts-color-picker-btn-{{ section.id }}">
              <input type="color" id="colorPicker-{{ section.id }}" value="#000000">
            </div>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <button class="cts-submit-btn-{{ section.id }}" id="submitBtn-{{ section.id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
        </svg>
        Submit Your Design Request
      </button>
    </div>
  </div>
</div>

<script>
(function() {
    'use strict';

    const sectionId = '{{ section.id }}';
    
    // STATE MANAGEMENT
    const state = {
        currentView: 'front',
        tshirtColor: 'white',
        designText: 'Your Design Here',
        fontSize: 32,
        fontFamily: 'Bebas Neue',
        textColor: '#000000',
        isBold: false,
        isItalic: false,
        isUnderline: false,
        isUppercase: false,
        zoomLevel: 100,
        uploadedImage: null,
        history: [],
        historyIndex: -1
    };

    // Fonts configuration
    const fonts = [
        { name: 'Bebas Neue', family: "'Bebas Neue', sans-serif" },
        { name: 'Inter', family: "'Inter', sans-serif" },
        { name: 'Montserrat', family: "'Montserrat', sans-serif" },
        { name: 'Lato', family: "'Lato', sans-serif" },
        { name: 'Roboto', family: "'Roboto', sans-serif" },
        { name: 'Open Sans', family: "'Open Sans', sans-serif" },
        { name: 'Poppins', family: "'Poppins', sans-serif" },
        { name: 'Ubuntu', family: "'Ubuntu', sans-serif" },
        { name: 'Nunito', family: "'Nunito', sans-serif" },
        { name: 'Raleway', family: "'Raleway', sans-serif" },
        { name: 'Oswald', family: "'Oswald', sans-serif" }
    ];

    // Color presets
    const colorPresets = [
        '#000000', '#FFFFFF', '#FF0000', '#00FF00', '#0000FF', '#FFFF00',
        '#FF00FF', '#00FFFF', '#FFA500', '#800080', '#FFC0CB', '#A52A2A'
    ];

    // T-shirt images by color and view
    const tshirtImages = {
        white: {
            front: 'https://i.imgur.com/VhPXPZx.png',
            back: 'https://i.imgur.com/iFCuHK6.png',
            side1: 'https://i.imgur.com/YqLg8B9.png',
            side2: 'https://i.imgur.com/Ns4Oav0.png'
        },
        black: {
            front: 'https://i.imgur.com/kQ9eCL2.png',
            back: 'https://i.imgur.com/xfGlKp3.png',
            side1: 'https://i.imgur.com/7Vu2nXf.png',
            side2: 'https://i.imgur.com/Mbq5Ude.png'
        }
    };

    // DOM ELEMENTS
    const elements = {
        mockupCanvas: document.getElementById(`mockupCanvas-${sectionId}`),
        designText: document.getElementById(`designText-${sectionId}`),
        designImage: document.getElementById(`designImage-${sectionId}`),
        designOverlay: document.getElementById(`designOverlay-${sectionId}`),
        textInput: document.getElementById(`designTextInput-${sectionId}`),
        charCount: document.getElementById(`charCount-${sectionId}`),
        fontSizeSlider: document.getElementById(`fontSizeSlider-${sectionId}`),
        fontSizeDisplay: document.getElementById(`fontSizeDisplay-${sectionId}`),
        increaseFontSize: document.getElementById(`increaseFontSize-${sectionId}`),
        decreaseFontSize: document.getElementById(`decreaseFontSize-${sectionId}`),
        fontPicker: document.getElementById(`fontPicker-${sectionId}`),
        colorPresets: document.getElementById(`colorPresets-${sectionId}`),
        hexInput: document.getElementById(`hexInput-${sectionId}`),
        colorPicker: document.getElementById(`colorPicker-${sectionId}`),
        zoomSlider: document.getElementById(`zoomSlider-${sectionId}`),
        zoomLabel: document.getElementById(`zoomLabel-${sectionId}`),
        zoomIn: document.getElementById(`zoomIn-${sectionId}`),
        zoomOut: document.getElementById(`zoomOut-${sectionId}`),
        undoBtn: document.getElementById(`undoBtn-${sectionId}`),
        submitBtn: document.getElementById(`submitBtn-${sectionId}`),
        downloadBtn: document.getElementById(`downloadBtn-${sectionId}`),
        shareBtn: document.getElementById(`shareBtn-${sectionId}`),
        resetBtn: document.getElementById(`resetBtn-${sectionId}`),
        placementBtn: document.getElementById(`placementBtn-${sectionId}`)
    };

    // ============================================
    // DIRECT CANVAS EDITING + AUTO-FIT SYSTEM
    // ============================================
    function initDirectCanvasEditing() {
        const overlay = elements.designOverlay;
        const textEl = elements.designText;
        const inputEl = elements.textInput;
        
        if (!textEl || !overlay) return;
        
        // Make on-canvas text directly editable
        textEl.setAttribute('contenteditable', 'true');
        textEl.setAttribute('role', 'textbox');
        textEl.setAttribute('aria-label', 'Design text');
        textEl.style.caretColor = '#000';
        
        // Clicking anywhere in the print area puts focus in the text
        overlay.addEventListener('click', () => {
            textEl.focus();
            // If empty placeholder, clear it
            if (textEl.textContent.trim() === 'Your Design Here' || textEl.classList.contains('placeholder')) {
                textEl.textContent = '';
                textEl.classList.remove('placeholder');
            }
        });
        
        // Keep sidebar input and canvas text in sync (both directions)
        const syncFromCanvas = () => {
            const text = textEl.textContent;
            if (inputEl) inputEl.value = text;
            state.designText = text;
            updateCharCount();
            validateAndFit();
        };
        
        const syncFromInput = () => {
            const text = inputEl.value;
            textEl.textContent = text;
            state.designText = text;
            if (text) {
                textEl.classList.remove('placeholder');
            } else {
                textEl.classList.add('placeholder');
            }
            validateAndFit();
        };
        
        textEl.addEventListener('input', syncFromCanvas);
        if (inputEl) inputEl.addEventListener('input', syncFromInput);
        
        // Enforce character limit on contenteditable
        textEl.addEventListener('paste', (e) => {
            e.preventDefault();
            const text = (e.clipboardData || window.clipboardData).getData('text');
            const maxLength = 200;
            const currentLength = textEl.textContent.length;
            const remainingLength = maxLength - currentLength;
            
            if (remainingLength > 0) {
                document.execCommand('insertText', false, text.substring(0, remainingLength));
            }
        });
        
        textEl.addEventListener('keydown', (e) => {
            if (textEl.textContent.length >= 200 && e.key !== 'Backspace' && e.key !== 'Delete' && !e.ctrlKey && !e.metaKey) {
                e.preventDefault();
            }
        });
    }

    // ============================================
    // AUTO-FIT ALGORITHM
    // ============================================
    function validateAndFit() {
        const textEl = elements.designText;
        const overlay = elements.designOverlay;
        
        if (!textEl || !overlay) return;
        
        // Allow browser to layout before measuring
        requestAnimationFrame(() => {
            const maxW = overlay.clientWidth;
            const maxH = overlay.clientHeight;
            const minPx = 14; // Floor size so text never gets too small
            const maxPx = getBaselineFont(); // Starting size based on viewport
            
            // Binary search for best fit font size
            let low = minPx;
            let high = maxPx;
            let tries = 0;
            let size = maxPx;
            
            const fits = () => {
                return textEl.scrollWidth <= maxW && textEl.scrollHeight <= maxH;
            };
            
            // Fast binary search (max 8 iterations)
            while (tries < 8 && low <= high) {
                size = Math.floor((low + high) / 2);
                textEl.style.fontSize = size + 'px';
                
                // Force reflow
                void textEl.offsetHeight;
                
                if (fits()) {
                    low = size + 1; // Try bigger
                } else {
                    high = size - 1; // Try smaller
                }
                tries++;
            }
            
            // Final size that fits
            size = Math.max(minPx, Math.min(high, maxPx));
            textEl.style.fontSize = size + 'px';
            
            // Force final reflow
            void textEl.offsetHeight;
            
            // Check if text still exceeds after fitting
            const exceeds = !(textEl.scrollWidth <= maxW && textEl.scrollHeight <= maxH);
            
            // Toggle exceeds class for border animation
            if (exceeds) {
                overlay.classList.add('exceeds');
            } else {
                overlay.classList.remove('exceeds');
            }
            
            console.log('Auto-fit:', {
                size: size + 'px',
                textW: textEl.scrollWidth,
                textH: textEl.scrollHeight,
                maxW,
                maxH,
                exceeds,
                viewport: getViewportWidth()
            });
        });
    }

    function getBaselineFont() {
        // Viewport-based baseline (matches CSS media queries)
        const vw = getViewportWidth();
        if (vw <= 375) return 22;
        if (vw <= 480) return 24;
        return 32; // Desktop default
    }

    function getViewportWidth() {
        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }

    // ============================================
    // INITIALIZATION
    // ============================================
    function init() {
        console.log('🎨 Initializing Custom T-Shirt Designer with Direct Editing + Auto-Fit...');
        
        setupEventListeners();
        generateFontPicker();
        generateColorPresets();
        updateCanvas();
        initDirectCanvasEditing(); // NEW: Enable direct canvas editing
        saveState();
        
        // Initial fit check
        requestAnimationFrame(validateAndFit);
        
        // Re-fit on window resize (orientation changes, etc)
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(validateAndFit, 250);
        });
        
        console.log('✅ Designer initialized successfully');
    }

    // ============================================
    // EVENT LISTENERS
    // ============================================
    function setupEventListeners() {
        // Font size
        elements.fontSizeSlider.addEventListener('input', handleFontSizeChange);
        elements.increaseFontSize.addEventListener('click', () => changeFontSize(4));
        elements.decreaseFontSize.addEventListener('click', () => changeFontSize(-4));
        
        // Font style buttons
        document.querySelectorAll(`.cts-style-btn-${sectionId}`).forEach(btn => {
            btn.addEventListener('click', handleStyleToggle);
        });
        
        // T-shirt color
        document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
            option.addEventListener('click', handleTshirtColorChange);
        });
        
        // Text color
        elements.hexInput.addEventListener('input', handleHexColorInput);
        elements.colorPicker.addEventListener('input', handleColorPickerInput);
        
        // Zoom controls
        elements.zoomSlider.addEventListener('input', handleZoomChange);
        elements.zoomIn.addEventListener('click', () => changeZoom(10));
        elements.zoomOut.addEventListener('click', () => changeZoom(-10));
        
        // View thumbnails
        document.querySelectorAll(`.cts-thumbnail-item-${sectionId}`).forEach(thumb => {
            thumb.addEventListener('click', handleViewChange);
        });
        
        // Action buttons
        elements.undoBtn.addEventListener('click', handleUndo);
        elements.submitBtn.addEventListener('click', handleSubmit);
        elements.downloadBtn.addEventListener('click', handleDownload);
        elements.shareBtn.addEventListener('click', handleShare);
        elements.resetBtn.addEventListener('click', handleReset);
        elements.placementBtn.addEventListener('click', togglePlacementGuide);
    }

    function updateCharCount() {
        const count = state.designText.length;
        elements.charCount.textContent = count;
        
        // Visual feedback for character limit
        if (count > 180) {
            elements.charCount.style.color = '#ef4444';
        } else if (count > 150) {
            elements.charCount.style.color = '#f59e0b';
        } else {
            elements.charCount.style.color = '#94a3b8';
        }
    }

    // ============================================
    // FONT SIZE HANDLERS
    // ============================================
    function handleFontSizeChange(e) {
        state.fontSize = parseInt(e.target.value);
        elements.fontSizeDisplay.textContent = `${state.fontSize}px`;
        updateCanvas();
        saveState();
        validateAndFit();
    }

    function changeFontSize(delta) {
        const newSize = Math.max(16, Math.min(96, state.fontSize + delta));
        state.fontSize = newSize;
        elements.fontSizeSlider.value = newSize;
        elements.fontSizeDisplay.textContent = `${newSize}px`;
        updateCanvas();
        saveState();
        validateAndFit();
    }

    // ============================================
    // STYLE TOGGLE HANDLERS
    // ============================================
    function handleStyleToggle(e) {
        const style = e.target.dataset.style;
        e.target.classList.toggle('active');
        
        switch(style) {
            case 'bold':
                state.isBold = !state.isBold;
                break;
            case 'italic':
                state.isItalic = !state.isItalic;
                break;
            case 'underline':
                state.isUnderline = !state.isUnderline;
                break;
            case 'uppercase':
                state.isUppercase = !state.isUppercase;
                break;
        }
        
        updateCanvas();
        saveState();
        validateAndFit();
    }

    // ============================================
    // COLOR HANDLERS
    // ============================================
    function handleTshirtColorChange(e) {
        const color = e.target.dataset.color;
        state.tshirtColor = color;
        
        // Update active state
        document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(opt => {
            opt.classList.remove('active');
        });
        e.target.classList.add('active');
        
        updateCanvas();
        saveState();
    }

    function handleHexColorInput(e) {
        let hex = e.target.value;
        if (!hex.startsWith('#')) {
            hex = '#' + hex;
        }
        
        if (/^#[0-9A-F]{6}$/i.test(hex)) {
            state.textColor = hex;
            elements.colorPicker.value = hex;
            updateCanvas();
            saveState();
        }
    }

    function handleColorPickerInput(e) {
        const color = e.target.value;
        state.textColor = color;
        elements.hexInput.value = color;
        updateActiveColorPreset(color);
        updateCanvas();
        saveState();
    }

    function updateActiveColorPreset(color) {
        document.querySelectorAll(`.cts-color-preset-${sectionId}`).forEach(preset => {
            if (preset.style.backgroundColor.toUpperCase() === color.toUpperCase()) {
                preset.classList.add('active');
            } else {
                preset.classList.remove('active');
            }
        });
    }

    // ============================================
    // ZOOM HANDLERS
    // ============================================
    function handleZoomChange(e) {
        state.zoomLevel = parseInt(e.target.value);
        elements.zoomLabel.textContent = `${state.zoomLevel}%`;
        applyZoom();
    }

    function changeZoom(delta) {
        const newZoom = Math.max(50, Math.min(200, state.zoomLevel + delta));
        state.zoomLevel = newZoom;
        elements.zoomSlider.value = newZoom;
        elements.zoomLabel.textContent = `${newZoom}%`;
        applyZoom();
    }

    function applyZoom() {
        const stage = document.getElementById(`mockupStage-${sectionId}`);
        stage.style.transform = `scale(${state.zoomLevel / 100})`;
    }

    // ============================================
    // VIEW CHANGE HANDLER
    // ============================================
    function handleViewChange(e) {
        const view = e.currentTarget.dataset.view;
        state.currentView = view;
        
        // Update active thumbnail
        document.querySelectorAll(`.cts-thumbnail-item-${sectionId}`).forEach(thumb => {
            thumb.classList.remove('active');
        });
        e.currentTarget.classList.add('active');
        
        updateCanvas();
    }

    // ============================================
    // FONT PICKER GENERATION
    // ============================================
    function generateFontPicker() {
        fonts.forEach((font, index) => {
            const btn = document.createElement('button');
            btn.className = `cts-font-btn-${sectionId}`;
            if (index === 0) btn.classList.add('active');
            btn.textContent = font.name;
            btn.style.fontFamily = font.family;
            btn.addEventListener('click', () => {
                state.fontFamily = font.name;
                document.querySelectorAll(`.cts-font-btn-${sectionId}`).forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                updateCanvas();
                saveState();
                validateAndFit();
            });
            elements.fontPicker.appendChild(btn);
        });
    }

    // ============================================
    // COLOR PRESETS GENERATION
    // ============================================
    function generateColorPresets() {
        colorPresets.forEach((color, index) => {
            const preset = document.createElement('div');
            preset.className = `cts-color-preset-${sectionId}`;
            if (index === 0) preset.classList.add('active');
            preset.style.backgroundColor = color;
            preset.addEventListener('click', () => {
                state.textColor = color;
                elements.hexInput.value = color;
                elements.colorPicker.value = color;
                document.querySelectorAll(`.cts-color-preset-${sectionId}`).forEach(p => p.classList.remove('active'));
                preset.classList.add('active');
                updateCanvas();
                saveState();
            });
            elements.colorPresets.appendChild(preset);
        });
    }

    // ============================================
    // CANVAS UPDATE
    // ============================================
    function updateCanvas() {
        // Update mockup image
        const imageUrl = tshirtImages[state.tshirtColor][state.currentView];
        elements.mockupCanvas.style.backgroundImage = `url('${imageUrl}')`;
        
        // Update text
        let displayText = state.designText;
        if (state.isUppercase) {
            displayText = displayText.toUpperCase();
        }
        
        // Only update if not currently being edited (to avoid cursor issues)
        if (document.activeElement !== elements.designText) {
            elements.designText.textContent = displayText;
        }
        
        // Find font family string
        const fontObj = fonts.find(f => f.name === state.fontFamily);
        const fontFamily = fontObj ? fontObj.family : fonts[0].family;
        
        // Apply styles (except font-size, which is managed by auto-fit)
        elements.designText.style.fontFamily = fontFamily;
        elements.designText.style.color = state.textColor;
        elements.designText.style.fontWeight = state.isBold ? 'bold' : 'normal';
        elements.designText.style.fontStyle = state.isItalic ? 'italic' : 'normal';
        elements.designText.style.textDecoration = state.isUnderline ? 'underline' : 'none';
    }

    // ============================================
    // STATE MANAGEMENT
    // ============================================
    function saveState() {
        const newState = JSON.parse(JSON.stringify(state));
        state.history = state.history.slice(0, state.historyIndex + 1);
        state.history.push(newState);
        state.historyIndex++;
        
        elements.undoBtn.disabled = state.historyIndex <= 0;
    }

    function handleUndo() {
        if (state.historyIndex > 0) {
            state.historyIndex--;
            const previousState = state.history[state.historyIndex];
            Object.assign(state, previousState);
            
            // Update UI
            elements.textInput.value = state.designText;
            elements.designText.textContent = state.designText;
            elements.fontSizeSlider.value = state.fontSize;
            elements.fontSizeDisplay.textContent = `${state.fontSize}px`;
            elements.hexInput.value = state.textColor;
            elements.colorPicker.value = state.textColor;
            
            updateCanvas();
            updateCharCount();
            validateAndFit();
            
            elements.undoBtn.disabled = state.historyIndex <= 0;
        }
    }

    // ============================================
    // ACTION HANDLERS
    // ============================================
    function handleSubmit() {
        console.log('📤 Submitting design request...', state);
        alert('Design request submitted! (This is a demo - integrate with your backend)');
    }

    function handleDownload() {
        console.log('💾 Downloading preview...');
        alert('Download feature coming soon!');
    }

    function handleShare() {
        console.log('🔗 Sharing design...');
        alert('Share feature coming soon!');
    }

    function handleReset() {
        if (confirm('Are you sure you want to reset all changes?')) {
            state.designText = 'Your Design Here';
            state.fontSize = 32;
            state.fontFamily = 'Bebas Neue';
            state.textColor = '#000000';
            state.tshirtColor = 'white';
            state.isBold = false;
            state.isItalic = false;
            state.isUnderline = false;
            state.isUppercase = false;
            state.zoomLevel = 100;
            
            // Reset UI
            elements.textInput.value = state.designText;
            elements.designText.textContent = state.designText;
            elements.designText.classList.add('placeholder');
            elements.fontSizeSlider.value = 32;
            elements.fontSizeDisplay.textContent = '32px';
            elements.hexInput.value = '#000000';
            elements.colorPicker.value = '#000000';
            elements.zoomSlider.value = 100;
            elements.zoomLabel.textContent = '100%';
            
            // Reset active states
            document.querySelectorAll(`.cts-style-btn-${sectionId}`).forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.querySelectorAll(`.cts-font-btn-${sectionId}`).forEach((btn, i) => {
                if (i === 0) btn.classList.add('active');
                else btn.classList.remove('active');
            });
            
            // Remove exceeds class
            elements.designOverlay.classList.remove('exceeds');
            
            updateCanvas();
            applyZoom();
            validateAndFit();
            saveState();
        }
    }

    function togglePlacementGuide() {
        const overlay = elements.designOverlay;
        const currentBorderStyle = window.getComputedStyle(overlay).borderStyle;
        
        if (currentBorderStyle === 'dashed') {
            // Hide guide
            overlay.style.borderStyle = 'none';
            elements.placementBtn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
                    <path d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5zm-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-2zm-3-4h8v2H8z"/>
                </svg>
                <span>Show Placement Guide</span>
            `;
        } else {
            // Show guide
            overlay.style.borderStyle = 'dashed';
            validateAndFit(); // This will apply the correct border state
            elements.placementBtn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
                    <path d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5zm-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-2zm-3-4h8v2H8z"/>
                </svg>
                <span>Hide Placement Guide</span>
            `;
        }
    }

    // ============================================
    // INITIALIZE ON DOM READY
    // ============================================
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
</script>

{% schema %}
{
  "name": "Custom T-Shirt Studio",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "✨ Custom T-Shirt Designer"
    }
  ],
  "presets": [
    {
      "name": "Custom T-Shirt Studio"
    }
  ]
}
{% endschema %}
