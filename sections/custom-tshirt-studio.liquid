{% comment %}
  Custom T-Shirt Design Studio Section
  Enhanced with hex color picker, undo, invert, flip, placement guide, and more
  PLUS: Image layers, Curved text, Full export, Animations, Gradients, Templates, Auto-save
{% endcomment %}

<script src="{{ 'designer-enhancements.js' | asset_url }}" defer></script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style>
    .custom-tshirt-studio-{{ section.id }} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .custom-tshirt-studio-{{ section.id }} {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        min-height: 100vh;
        color: #e2e8f0;
        padding: 0;
    }

    .cts-header-{{ section.id }} {
        background: rgba(15, 23, 42, 0.8);
        backdrop-filter: blur(10px);
        padding: 20px 40px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .cts-header-{{ section.id }} h1 {
        font-size: 24px;
        font-weight: 700;
        background: linear-gradient(135deg, #60a5fa, #a78bfa);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .cts-header-actions-{{ section.id }} {
        display: flex;
        gap: 12px;
    }

    .cts-header-btn-{{ section.id }} {
        padding: 10px 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .cts-header-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .cts-header-btn-{{ section.id }}:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .cts-container-{{ section.id }} {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px 20px;
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 40px;
    }

    .cts-preview-section-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .cts-preview-card-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .cts-mockup-stage-{{ section.id }} {
        position: relative;
        width: 100%;
        aspect-ratio: 1;
        background: linear-gradient(135deg, #27e1c1 0%, #667eea 20%, #764ba2 35%, #f093fb 50%, #4facfe 65%, #27e1c1 100%);
        background-size: 300% 300%;
        animation: gradientShift-{{ section.id }} 15s ease infinite;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 25px 80px rgba(39, 225, 193, 0.2);
    }

    @keyframes gradientShift-{{ section.id }} {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    .cts-mockup-canvas-{{ section.id }} {
        position: relative;
        width: 100%;
        height: 100%;
        background: #f8fafc;
        border-radius: 16px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .cts-tshirt-container-{{ section.id }} {
        position: relative;
        width: 85%;
        height: 85%;
    }

    .cts-tshirt-image-{{ section.id }} {
        width: 100%;
        height: 100%;
        object-fit: contain;
        transition: opacity 0.3s ease;
    }

    .cts-design-overlay-{{ section.id }} {
        position: absolute;
        width: 37%;
        height: 42%;
        left: 50%;
        top: 29%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: move;
        transition: all 0.2s ease;
    }

    .cts-design-overlay-{{ section.id }}:hover {
        outline: 2px dashed rgba(96, 165, 250, 0.5);
        outline-offset: 4px;
    }

    .cts-design-text-{{ section.id }} {
        font-family: 'Bebas Neue', sans-serif;
        font-size: 32px;
        font-weight: bold;
        color: #000000;
        text-align: center;
        user-select: none;
        pointer-events: none;
    }

    .cts-design-image-{{ section.id }} {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        pointer-events: none;
    }

    /* Placement Guide Overlay */
    .cts-placement-guide-{{ section.id }} {
        position: absolute;
        width: 37%;
        height: 42%;
        left: 50%;
        top: 29%;
        transform: translateX(-50%);
        border: 2px dashed rgba(96, 165, 250, 0.6);
        background: rgba(96, 165, 250, 0.1);
        pointer-events: none;
        display: none;
        z-index: 10;
    }

    .cts-placement-guide-{{ section.id }}.active {
        display: block;
    }

    .cts-placement-guide-{{ section.id }}::before {
        content: 'SAFE PRINT AREA';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 12px;
        font-weight: 700;
        color: rgba(96, 165, 250, 0.8);
        letter-spacing: 2px;
    }

    .cts-quick-actions-{{ section.id }} {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .cts-quick-action-btn-{{ section.id }} {
        flex: 1;
        min-width: 150px;
        padding: 14px 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .cts-quick-action-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .cts-controls-panel-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-height: calc(100vh - 200px);
        overflow-y: auto;
        padding-right: 10px;
    }

    .cts-controls-panel-{{ section.id }}::-webkit-scrollbar {
        width: 8px;
    }

    .cts-controls-panel-{{ section.id }}::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 4px;
    }

    .cts-controls-panel-{{ section.id }}::-webkit-scrollbar-thumb {
        background: rgba(96, 165, 250, 0.5);
        border-radius: 4px;
    }

    .cts-control-card-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 24px;
    }

    .cts-control-card-{{ section.id }} h3 {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #f1f5f9;
    }

    .cts-control-group-{{ section.id }} {
        margin-bottom: 20px;
    }

    .cts-control-group-{{ section.id }}:last-child {
        margin-bottom: 0;
    }

    .cts-control-card-{{ section.id }} label {
        display: block;
        font-size: 13px;
        font-weight: 500;
        color: #cbd5e1;
        margin-bottom: 8px;
    }

    .cts-text-input-{{ section.id }} {
        width: 100%;
        padding: 12px 16px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        color: white;
        font-size: 14px;
        font-family: inherit;
        transition: all 0.2s;
    }

    .cts-text-input-{{ section.id }}:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    textarea.cts-text-input-{{ section.id }} {
        resize: vertical;
        min-height: 80px;
    }

    .cts-file-input-{{ section.id }} {
        display: none;
    }

    .cts-file-upload-btn-{{ section.id }} {
        width: 100%;
        padding: 12px;
        background: rgba(96, 165, 250, 0.1);
        border: 2px dashed rgba(96, 165, 250, 0.3);
        border-radius: 10px;
        color: #60a5fa;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        text-align: center;
        display: block;
    }

    .cts-file-upload-btn-{{ section.id }}:hover {
        background: rgba(96, 165, 250, 0.15);
        border-color: rgba(96, 165, 250, 0.5);
    }

    .cts-color-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 8px;
        margin-bottom: 12px;
    }

    .cts-color-option-{{ section.id }} {
        aspect-ratio: 1;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s;
        position: relative;
    }

    .cts-color-option-{{ section.id }}:hover {
        transform: scale(1.1);
    }

    .cts-color-option-{{ section.id }}.active {
        border-color: white;
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
    }

    /* SVG Hexagonal Color Picker with Brightness Slider */
    .hex-picker-container-{{ section.id }} {
        position: relative;
    }

    .hex-picker-grid-wrapper-{{ section.id }} {
        display: flex;
        gap: 16px;
        padding: 20px;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        margin-bottom: 16px;
    }

    .hex-svg-container-{{ section.id }} {
        flex: 1;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 8px;
        padding: 12px;
    }

    .hex-svg-{{ section.id }} {
        width: 100%;
        height: auto;
        display: block;
    }

    .hex-svg-{{ section.id }} polygon {
        cursor: pointer;
        transition: transform 0.15s ease;
    }

    .hex-svg-{{ section.id }} polygon:hover {
        transform: scale(1.03);
        filter: brightness(1.1);
    }

    .hex-svg-{{ section.id }} polygon.selected {
        stroke: #60a5fa !important;
        stroke-width: 2.5 !important;
        filter: brightness(1.2) drop-shadow(0 0 6px rgba(96, 165, 250, 0.6));
    }

    /* Brightness Slider */
    .brightness-slider-container-{{ section.id }} {
        width: 40px;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        user-select: none;
    }

    .brightness-slider-track-{{ section.id }} {
        position: relative;
        width: 24px;
        height: 256px;
        border-radius: 12px;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(0, 0, 0, 0.2);
        cursor: pointer;
    }

    .brightness-slider-input-{{ section.id }} {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        -webkit-appearance: slider-vertical;
        appearance: slider-vertical;
        writing-mode: bt-lr; /* For vertical slider in some browsers */
    }

    .brightness-slider-label-{{ section.id }} {
        font-size: 10px;
        color: rgba(255, 255, 255, 0.4);
        margin-top: 8px;
        text-align: center;
    }

    .hex-display-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
        background: rgba(0, 0, 0, 0.2);
        padding: 12px 16px;
        border-radius: 8px;
    }

    .cts-hex-preview-{{ section.id }} {
        width: 40px;
        height: 40px;
        border-radius: 6px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

    .cts-hex-input-{{ section.id }} {
        flex: 1;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff;
        padding: 10px 12px;
        border-radius: 6px;
        font-size: 14px;
        font-family: 'Courier New', monospace;
        transition: all 0.2s ease;
        text-transform: uppercase;
    }

    .cts-hex-input-{{ section.id }}:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    /* Transform Controls */
    .cts-transform-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
    }

    .cts-transform-btn-{{ section.id }} {
        padding: 12px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        color: white;
        font-size: 13px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
    }

    .cts-transform-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-transform-btn-{{ section.id }}.active {
        background: rgba(96, 165, 250, 0.2);
        border-color: #60a5fa;
    }

    .cts-slider-container-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .cts-slider-{{ section.id }} {
        flex: 1;
        height: 6px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
        outline: none;
        -webkit-appearance: none;
    }

    .cts-slider-{{ section.id }}::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 18px;
        height: 18px;
        background: #60a5fa;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
    }

    .cts-slider-{{ section.id }}::-moz-range-thumb {
        width: 18px;
        height: 18px;
        background: #60a5fa;
        border-radius: 50%;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
    }

    .cts-slider-value-{{ section.id }} {
        font-size: 14px;
        font-weight: 600;
        color: #60a5fa;
        min-width: 45px;
        text-align: right;
    }

    .cts-primary-btn-{{ section.id }} {
        width: 100%;
        padding: 16px;
        background: linear-gradient(135deg, #60a5fa, #a78bfa);
        border: none;
        border-radius: 12px;
        color: white;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        box-shadow: 0 8px 24px rgba(96, 165, 250, 0.3);
    }

    .cts-primary-btn-{{ section.id }}:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 32px rgba(96, 165, 250, 0.4);
    }

    .cts-font-selector-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
    }

    .cts-font-option-{{ section.id }} {
        padding: 10px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .cts-font-option-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-font-option-{{ section.id }}.active {
        background: rgba(96, 165, 250, 0.2);
        border-color: #60a5fa;
    }

    /* T-Shirt Color Picker in Controls Panel */
    .cts-tshirt-color-picker-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
    }

    .cts-tshirt-color-option-{{ section.id }} {
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .cts-tshirt-color-option-{{ section.id }}:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }

    .cts-tshirt-color-option-{{ section.id }}.active {
        box-shadow: 0 0 0 3px #60a5fa;
        transform: scale(1.05);
    }

    @media (max-width: 1024px) {
        .cts-container-{{ section.id }} {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="custom-tshirt-studio-{{ section.id }}" id="custom-tshirt-studio-{{ section.id }}" style="display: none;">
    <div class="cts-header-{{ section.id }}">
        <h1>✨ Custom T-Shirt Designer</h1>
        <div class="cts-header-actions-{{ section.id }}">
            <button class="cts-header-btn-{{ section.id }}" id="undoBtn-{{ section.id }}" disabled>↶ Undo</button>
            <button class="cts-header-btn-{{ section.id }}" id="guideBtn-{{ section.id }}">📐 Placement Guide</button>
        </div>
    </div>

    <div class="cts-container-{{ section.id }}">
        <div class="cts-preview-section-{{ section.id }}">
            <div class="cts-preview-card-{{ section.id }}">
                <div class="cts-mockup-stage-{{ section.id }}">
                    <div class="cts-mockup-canvas-{{ section.id }}" id="mockupCanvas-{{ section.id }}">
                        <div class="cts-tshirt-container-{{ section.id }}" id="tshirtContainer-{{ section.id }}">
                            <img 
                                class="cts-tshirt-image-{{ section.id }}" 
                                id="tshirtImage-{{ section.id }}"
                                src="{{ 'tshirt-view.png' | asset_url }}"
                                alt="T-shirt mockup">
                            
                            <!-- Placement Guide Overlay -->
                            <div class="cts-placement-guide-{{ section.id }}" id="placementGuide-{{ section.id }}"></div>
                            
                            <div class="cts-design-overlay-{{ section.id }}" id="designOverlay-{{ section.id }}">
                                <span class="cts-design-text-{{ section.id }}" id="designText-{{ section.id }}">YOUR DESIGN HERE</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="cts-quick-actions-{{ section.id }}">
                <button class="cts-quick-action-btn-{{ section.id }}" id="downloadBtn-{{ section.id }}">📥 Download Preview</button>
                <button class="cts-quick-action-btn-{{ section.id }}" id="shareBtn-{{ section.id }}">🔗 Share Design</button>
                <button class="cts-quick-action-btn-{{ section.id }}" id="resetBtn-{{ section.id }}">🔄 Reset All</button>
            </div>
            
            <!-- Submit Request Button - Primary CTA -->
            <div class="cts-quick-actions-{{ section.id }}" style="margin-top: 20px;">
                <button class="cts-submit-request-btn-{{ section.id }}" id="submitRequestBtn-{{ section.id }}" style="
                    width: 100%;
                    padding: 18px 36px;
                    background: linear-gradient(135deg, #dc2626, #ef4444);
                    color: white;
                    border: none;
                    border-radius: 16px;
                    font-size: 18px;
                    font-weight: 700;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    box-shadow: 0 8px 32px rgba(220, 38, 38, 0.4);
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 10px;
                ">
                    🚀 Submit Your Design Request
                </button>
            </div>
        </div>

        <div class="cts-controls-panel-{{ section.id }}">
            <div class="cts-control-card-{{ section.id }}">
                <h3>📝 Design Text</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Your Text</label>
                    <textarea class="cts-text-input-{{ section.id }}" id="textInput-{{ section.id }}" placeholder="Enter your custom text...">YOUR DESIGN HERE</textarea>
                </div>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Font Style</label>
                    <div class="cts-font-selector-{{ section.id }}">
                        <div class="cts-font-option-{{ section.id }} active" data-font="'Bebas Neue', sans-serif" style="font-family: 'Bebas Neue', sans-serif;">Bebas</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Inter', sans-serif" style="font-family: 'Inter', sans-serif; font-weight: 700;">Inter</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="Arial, sans-serif" style="font-family: Arial, sans-serif; font-weight: bold;">Arial</div>
                    </div>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>👕 T-Shirt Color</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Choose Background</label>
                    <div class="cts-tshirt-color-picker-{{ section.id }}">
                        <div class="cts-tshirt-color-option-{{ section.id }} active" 
                             data-color="white" 
                             style="background: white; border: 2px solid rgba(0, 0, 0, 0.1);"
                             title="White T-Shirt">
                            <span style="color: #64748b; font-size: 12px; font-weight: 600;">White</span>
                        </div>
                        <div class="cts-tshirt-color-option-{{ section.id }}" 
                             data-color="black" 
                             style="background: #000000; border: 2px solid rgba(255, 255, 255, 0.1);"
                             title="Black T-Shirt">
                            <span style="color: #ffffff; font-size: 12px; font-weight: 600;">Black</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🎨 Text Color</h3>
                
                <div class="hex-picker-container-{{ section.id }}">
                    <!-- SVG Hexagonal Color Grid + Brightness Slider -->
                    <div class="hex-picker-grid-wrapper-{{ section.id }}">
                        <div class="hex-svg-container-{{ section.id }}">
                            <svg id="hexSvg-{{ section.id }}" 
                                 class="hex-svg-{{ section.id }}" 
                                 role="img" 
                                 aria-label="Hexagonal color picker">
                                <defs>
                                    <filter id="hexShadow-{{ section.id }}" x="-50%" y="-50%" width="200%" height="200%">
                                        <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3"/>
                                    </filter>
                                </defs>
                            </svg>
                        </div>
                        
                        <!-- Brightness Slider -->
                        <div class="brightness-slider-container-{{ section.id }}">
                            <div class="brightness-slider-track-{{ section.id }}" id="brightnessTrack-{{ section.id }}">
                                <input type="range" 
                                       class="brightness-slider-input-{{ section.id }}" 
                                       id="brightnessSlider-{{ section.id }}"
                                       min="0" 
                                       max="100" 
                                       value="100"
                                       orient="vertical">
                            </div>
                            <div class="brightness-slider-label-{{ section.id }}">Brightness</div>
                        </div>
                    </div>
                    
                    <!-- Hex Display with Input -->
                    <div class="hex-display-{{ section.id }}">
                        <div class="cts-hex-preview-{{ section.id }}" id="hexPreview-{{ section.id }}" style="background: #000000;"></div>
                        <input type="text" 
                               class="cts-hex-input-{{ section.id }}" 
                               id="hexInput-{{ section.id }}"
                               placeholder="#000000" 
                               maxlength="7"
                               value="#000000">
                    </div>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🔄 Transform</h3>
                <div class="cts-transform-grid-{{ section.id }}">
                    <button class="cts-transform-btn-{{ section.id }}" id="flipHBtn-{{ section.id }}">↔️ Flip H</button>
                    <button class="cts-transform-btn-{{ section.id }}" id="flipVBtn-{{ section.id }}">↕️ Flip V</button>
                    <button class="cts-transform-btn-{{ section.id }}" id="invertBtn-{{ section.id }}">🔁 Invert</button>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🖼️ Upload Image</h3>
                <input type="file" class="cts-file-input-{{ section.id }}" id="imageUpload-{{ section.id }}" accept="image/*">
                <label for="imageUpload-{{ section.id }}" class="cts-file-upload-btn-{{ section.id }}">
                    📤 Choose Image File
                </label>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>⚙️ Adjustments</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Size</label>
                    <div class="cts-slider-container-{{ section.id }}">
                        <input type="range" class="cts-slider-{{ section.id }}" id="sizeSlider-{{ section.id }}" min="50" max="200" value="100">
                        <span class="cts-slider-value-{{ section.id }}" id="sizeValue-{{ section.id }}">100%</span>
                    </div>
                </div>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Rotation</label>
                    <div class="cts-slider-container-{{ section.id }}">
                        <input type="range" class="cts-slider-{{ section.id }}" id="rotateSlider-{{ section.id }}" min="-45" max="45" value="0">
                        <span class="cts-slider-value-{{ section.id }}" id="rotateValue-{{ section.id }}">0°</span>
                    </div>
                </div>
            </div>

            {% comment %} ENHANCED FEATURES - Image layers, Curved text, Animations, Gradients, Templates, Auto-save {% endcomment %}
            {% render 'designer-enhanced-controls', section: section %}

            <button class="cts-primary-btn-{{ section.id }}" id="addToCartBtn-{{ section.id }}">🛒 Add to Cart - $24.99</button>
        </div>
    </div>
    
    <!-- Customer Information Form (Hidden by default) -->
    <div id="customerInfoForm-{{ section.id }}" style="display: none; margin: 40px auto; padding: 32px; background: linear-gradient(135deg, rgba(220, 38, 38, 0.05), rgba(239, 68, 68, 0.05)); border-radius: 20px; border: 2px solid rgba(220, 38, 38, 0.2); max-width: 700px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);">
        <div style="text-align: center; margin-bottom: 24px;">
            <div style="display: inline-flex; align-items: center; gap: 12px; margin-bottom: 8px;">
                <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #dc2626, #ef4444); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px;">
                    👤
                </div>
                <h2 style="margin: 0; font-size: 28px; font-weight: 800; color: #dc2626;">Customer Information</h2>
            </div>
            <p style="margin: 0; font-size: 15px; color: #6b7280;">Please fill in your details to submit your custom t-shirt request</p>
        </div>
        
        <form id="requestForm-{{ section.id }}" style="display: grid; gap: 16px;">
            <!-- Customer Details Row 1 -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Full Name *</label>
                    <input type="text" id="customerName-{{ section.id }}" required 
                           style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; transition: all 0.2s;"
                           onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                           onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
                </div>
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Email *</label>
                    <input type="email" id="customerEmail-{{ section.id }}" required 
                           style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; transition: all 0.2s;"
                           onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                           onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
                </div>
            </div>
            
            <!-- Customer Details Row 2 -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Phone Number</label>
                    <input type="tel" id="customerPhone-{{ section.id }}" 
                           style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; transition: all 0.2s;"
                           onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                           onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
                </div>
                <div>
                    <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">T-Shirt Size</label>
                    <select id="tshirtSize-{{ section.id }}" 
                            style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; box-sizing: border-box; cursor: pointer; transition: all 0.2s;"
                            onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                            onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'">
                        <option value="">Select Size</option>
                        <option value="XXS">XXS</option>
                        <option value="XS">XS</option>
                        <option value="S">S</option>
                        <option value="M">M</option>
                        <option value="L">L</option>
                        <option value="XL">XL</option>
                        <option value="XXL">XXL</option>
                        <option value="3XL">3XL</option>
                    </select>
                </div>
            </div>
            
            <!-- Special Instructions -->
            <div>
                <label style="display: block; margin-bottom: 6px; font-size: 13px; font-weight: 700; color: #374151;">Special Instructions or Message</label>
                <textarea id="customerMessage-{{ section.id }}" rows="4" 
                          placeholder="Any special requirements, color preferences, or additional details..."
                          style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 10px; font-size: 14px; background: white; resize: vertical; box-sizing: border-box; font-family: inherit; transition: all 0.2s;"
                          onfocus="this.style.borderColor='#dc2626'; this.style.boxShadow='0 0 0 3px rgba(220, 38, 38, 0.1)'"
                          onblur="this.style.borderColor='#d1d5db'; this.style.boxShadow='none'"></textarea>
            </div>
            
            <!-- Action Buttons -->
            <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 8px;">
                <button type="button" id="cancelRequestBtn-{{ section.id }}" 
                        style="padding: 12px 28px; background: #6b7280; color: white; border: none; border-radius: 10px; font-size: 15px; cursor: pointer; font-weight: 600; transition: all 0.3s;"
                        onmouseover="this.style.background='#4b5563'"
                        onmouseout="this.style.background='#6b7280'">
                    Cancel
                </button>
                <button type="submit" id="submitFormBtn-{{ section.id }}" 
                        style="padding: 12px 32px; background: linear-gradient(135deg, #dc2626, #ef4444); color: white; border: none; border-radius: 10px; font-size: 15px; cursor: pointer; font-weight: 700; transition: all 0.3s; box-shadow: 0 4px 16px rgba(220, 38, 38, 0.3);"
                        onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 24px rgba(220, 38, 38, 0.4)'"
                        onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 16px rgba(220, 38, 38, 0.3)'">
                    🚀 Submit Request
                </button>
            </div>
        </form>
        
        <!-- Loading/Success Message -->
        <div id="formStatus-{{ section.id }}" style="display: none; margin-top: 20px; padding: 16px; border-radius: 10px; text-align: center; font-weight: 600;"></div>
    </div>
</div>

<!-- Supabase Scripts for Image Upload (optional - falls back to base64 if not available) -->
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script src="{{ 'supabase-config.js' | asset_url }}"></script>
<script src="{{ 'supabase-custom-requests.js' | asset_url }}"></script>

<!-- EmailJS Script -->
<script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<script>
(function() {
    const sectionId = '{{ section.id }}';
    const designOverlay = document.getElementById(`designOverlay-${sectionId}`);
    const designText = document.getElementById(`designText-${sectionId}`);
    const textInput = document.getElementById(`textInput-${sectionId}`);
    const imageUpload = document.getElementById(`imageUpload-${sectionId}`);
    const sizeSlider = document.getElementById(`sizeSlider-${sectionId}`);
    const rotateSlider = document.getElementById(`rotateSlider-${sectionId}`);
    const sizeValue = document.getElementById(`sizeValue-${sectionId}`);
    const rotateValue = document.getElementById(`rotateValue-${sectionId}`);
    const resetBtn = document.getElementById(`resetBtn-${sectionId}`);
    const undoBtn = document.getElementById(`undoBtn-${sectionId}`);
    const guideBtn = document.getElementById(`guideBtn-${sectionId}`);
    const placementGuide = document.getElementById(`placementGuide-${sectionId}`);
    const hexInput = document.getElementById(`hexInput-${sectionId}`);
    const hexPreview = document.getElementById(`hexPreview-${sectionId}`);
    const flipHBtn = document.getElementById(`flipHBtn-${sectionId}`);
    const flipVBtn = document.getElementById(`flipVBtn-${sectionId}`);
    const invertBtn = document.getElementById(`invertBtn-${sectionId}`);
    const tshirtImage = document.getElementById(`tshirtImage-${sectionId}`);

    let uploadedImage = null;
    let currentFont = "'Bebas Neue', sans-serif";
    let currentColor = '#000000';
    let flipH = false;
    let flipV = false;
    let inverted = false;
    let guideActive = false;
    let tshirtColor = 'white';
    
    // Undo history
    let undoHistory = [];
    const MAX_UNDO = 20;

    // ============================================
    // SVG HEXAGONAL COLOR PICKER (Axial Coordinates + HSV Brightness)
    // ============================================
    
    const SQRT3 = Math.sqrt(3);
    const HEX_RADIUS = 5;      // Number of hexagon rings
    const HEX_SIZE = 22;       // Pixel radius of each hexagon
    const HEX_PADDING = 24;    // Padding around the grid
    
    // HSV state for brightness control
    let pickerHue = 0;
    let pickerSat = 0;
    let pickerVal = 1;
    
    // Convert axial coordinates (q, r) to pixel position (pointy-top hex)
    function axialToPixel(q, r, size) {
        const x = size * (1.5 * q);
        const y = size * (SQRT3 * (r + q / 2));
        return { x, y };
    }
    
    // Generate polygon points for a hexagon
    function polygonPoints(cx, cy, size) {
        const points = [];
        for (let i = 0; i < 6; i++) {
            const angle = (Math.PI / 180) * (60 * i - 30);
            const x = cx + size * Math.cos(angle);
            const y = cy + size * Math.sin(angle);
            points.push(`${x},${y}`);
        }
        return points.join(' ');
    }
    
    // Convert HSL to HEX
    function hslToHex(h, s, l) {
        s /= 100;
        l /= 100;
        const k = n => (n + h / 30) % 12;
        const a = s * Math.min(l, 1 - l);
        const f = n => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
        const r = Math.round(255 * f(0));
        const g = Math.round(255 * f(8));
        const b = Math.round(255 * f(4));
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }
    
    // Convert HSV to HEX
    function hsvToHex(h, s, v) {
        s = Math.max(0, Math.min(1, s));
        v = Math.max(0, Math.min(1, v));
        const c = v * s;
        const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
        const m = v - c;
        let r = 0, g = 0, b = 0;
        if (0 <= h && h < 60) [r, g, b] = [c, x, 0];
        else if (60 <= h && h < 120) [r, g, b] = [x, c, 0];
        else if (120 <= h && h < 180) [r, g, b] = [0, c, x];
        else if (180 <= h && h < 240) [r, g, b] = [0, x, c];
        else if (240 <= h && h < 300) [r, g, b] = [x, 0, c];
        else [r, g, b] = [c, 0, x];
        const toHex = (n) => Math.round((n + m) * 255).toString(16).padStart(2, '0');
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
    }
    
    // Extract hue from axial coordinates
    function hueFromAxial(q, r) {
        const angle = Math.atan2(SQRT3 * (r + q / 2), 1.5 * q);
        return ((angle * 180) / Math.PI + 360) % 360;
    }
    
    // Extract saturation from axial coordinates
    function satFromAxial(q, r, radius) {
        const x = q;
        const y = -q - r;
        const z = r;
        const dist = Math.max(Math.abs(x), Math.abs(y), Math.abs(z));
        return dist === 0 ? 0 : Math.min(1, 0.9 * (dist / radius) + 0.1);
    }
    
    // Map axial coordinate to a color (hue by angle, lightness by distance)
    function colorForAxial(q, r, radius) {
        const x = q;
        const y = -q - r;
        const z = r;
        const dist = Math.max(Math.abs(x), Math.abs(y), Math.abs(z));
        const angle = Math.atan2(SQRT3 * (r + q / 2), 1.5 * q);
        const hue = ((angle * 180) / Math.PI + 360) % 360;
        const l = 85 - (dist / radius) * 40; // 85% at center to ~45% at edge
        const s = dist === 0 ? 0 : 80; // Neutral center
        return hslToHex(hue, s, l);
    }
    
    // Update brightness slider gradient
    function updateBrightnessSliderGradient() {
        const track = document.getElementById(`brightnessTrack-${sectionId}`);
        if (track) {
            const topColor = hsvToHex(pickerHue, pickerSat, 1);
            const bottomColor = '#000000';
            track.style.background = `linear-gradient(to bottom, ${topColor} 0%, ${bottomColor} 100%)`;
        }
    }
    
    // Build all hex cells in a disk of given radius
    function buildAxialHexDisk(radius) {
        const cells = [];
        for (let q = -radius; q <= radius; q++) {
            const r1 = Math.max(-radius, -q - radius);
            const r2 = Math.min(radius, -q + radius);
            for (let r = r1; r <= r2; r++) {
                cells.push({ q, r });
            }
        }
        return cells;
    }
    
    // Initialize SVG hexagonal picker
    function initSVGHexagonalPicker() {
        const svg = document.getElementById(`hexSvg-${sectionId}`);
        const cells = buildAxialHexDisk(HEX_RADIUS);
        
        // Calculate viewBox dimensions
        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
        cells.forEach(({ q, r }) => {
            const { x, y } = axialToPixel(q, r, HEX_SIZE);
            minX = Math.min(minX, x - HEX_SIZE);
            maxX = Math.max(maxX, x + HEX_SIZE);
            minY = Math.min(minY, y - HEX_SIZE);
            maxY = Math.max(maxY, y + HEX_SIZE);
        });
        
        const viewBoxX = minX - HEX_PADDING;
        const viewBoxY = minY - HEX_PADDING;
        const viewBoxWidth = (maxX - minX) + 2 * HEX_PADDING;
        const viewBoxHeight = (maxY - minY) + 2 * HEX_PADDING;
        
        svg.setAttribute('viewBox', `${viewBoxX} ${viewBoxY} ${viewBoxWidth} ${viewBoxHeight}`);
        
        // Create hexagon polygons
        cells.forEach(({ q, r }) => {
            const { x, y } = axialToPixel(q, r, HEX_SIZE);
            const fill = colorForAxial(q, r, HEX_RADIUS);
            const points = polygonPoints(x, y, HEX_SIZE * 0.95);
            const isCenter = q === 0 && r === 0;
            const stroke = isCenter ? '#ffffff' : '#111827';
            const strokeWidth = isCenter ? 1.25 : 1;
            
            const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
            polygon.setAttribute('points', points);
            polygon.setAttribute('fill', fill);
            polygon.setAttribute('stroke', stroke);
            polygon.setAttribute('stroke-width', strokeWidth);
            polygon.setAttribute('filter', `url(#hexShadow-${sectionId})`);
            polygon.dataset.color = fill.toUpperCase();
            
            polygon.addEventListener('click', () => {
                saveState();
                
                // Update HSV state from axial coordinates
                pickerHue = hueFromAxial(q, r);
                pickerSat = satFromAxial(q, r, HEX_RADIUS);
                // Keep current brightness value
                
                // Generate color with current brightness
                const newColor = hsvToHex(pickerHue, pickerSat, pickerVal).toUpperCase();
                currentColor = newColor;
                designText.style.color = currentColor;
                hexInput.value = currentColor;
                hexPreview.style.background = currentColor;
                updateSVGHexSelection(currentColor);
                updateBrightnessSliderGradient();
            });
            
            svg.appendChild(polygon);
        });
        
        // Set initial selection
        updateSVGHexSelection(currentColor);
        updateBrightnessSliderGradient();
        
        // Brightness slider handler
        const brightnessSlider = document.getElementById(`brightnessSlider-${sectionId}`);
        if (brightnessSlider) {
            brightnessSlider.addEventListener('input', (e) => {
                saveState();
                pickerVal = Number(e.target.value) / 100;
                const newColor = hsvToHex(pickerHue, pickerSat, pickerVal).toUpperCase();
                currentColor = newColor;
                designText.style.color = currentColor;
                hexInput.value = currentColor;
                hexPreview.style.background = currentColor;
                updateSVGHexSelection(newColor);
            });
        }
    }
    
    // Update selection state in SVG hexagonal grid
    function updateSVGHexSelection(selectedColor) {
        const svg = document.getElementById(`hexSvg-${sectionId}`);
        const polygons = svg.querySelectorAll('polygon');
        polygons.forEach(polygon => {
            if (polygon.dataset.color && polygon.dataset.color.toUpperCase() === selectedColor.toUpperCase()) {
                polygon.classList.add('selected');
            } else {
                polygon.classList.remove('selected');
            }
        });
    }
    
    // Initialize the SVG hexagonal picker on load
    initSVGHexagonalPicker();

    // Save state for undo
    function saveState() {
        const state = {
            text: textInput.value,
            color: currentColor,
            font: currentFont,
            size: sizeSlider.value,
            rotation: rotateSlider.value,
            flipH: flipH,
            flipV: flipV,
            inverted: inverted,
            left: designOverlay.style.left,
            top: designOverlay.style.top
        };
        
        undoHistory.push(state);
        if (undoHistory.length > MAX_UNDO) {
            undoHistory.shift();
        }
        
        undoBtn.disabled = undoHistory.length === 0;
    }

    // Undo last action
    undoBtn.addEventListener('click', () => {
        if (undoHistory.length > 0) {
            const state = undoHistory.pop();
            
            textInput.value = state.text;
            designText.textContent = state.text || 'YOUR DESIGN HERE';
            currentColor = state.color;
            designText.style.color = state.color;
            hexInput.value = state.color;
            hexPreview.style.background = state.color;
            currentFont = state.font;
            designText.style.fontFamily = state.font;
            sizeSlider.value = state.size;
            sizeValue.textContent = `${state.size}%`;
            rotateSlider.value = state.rotation;
            rotateValue.textContent = `${state.rotation}°`;
            flipH = state.flipH;
            flipV = state.flipV;
            inverted = state.inverted;
            designOverlay.style.left = state.left;
            designOverlay.style.top = state.top;
            
            updateTransform();
            updateFlipButtons();
            updateColorSwatches();
            
            undoBtn.disabled = undoHistory.length === 0;
        }
    });

    // Placement guide toggle
    guideBtn.addEventListener('click', () => {
        guideActive = !guideActive;
        if (guideActive) {
            placementGuide.classList.add('active');
            guideBtn.textContent = '✓ Guide On';
            guideBtn.style.background = 'rgba(96, 165, 250, 0.2)';
            guideBtn.style.borderColor = '#60a5fa';
        } else {
            placementGuide.classList.remove('active');
            guideBtn.textContent = '📐 Placement Guide';
            guideBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            guideBtn.style.borderColor = 'rgba(255, 255, 255, 0.2)';
        }
    });

    // T-Shirt color toggle
    document.querySelectorAll(`.cts-tshirt-color-option-${sectionId}`).forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll(`.cts-tshirt-color-option-${sectionId}`).forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            tshirtColor = btn.dataset.color;
            
            // Update t-shirt image - use actual black t-shirt mockup
            if (tshirtColor === 'black') {
                tshirtImage.src = "{{ 'tshirt-black-v2.png' | asset_url }}";
                tshirtImage.style.filter = 'none';
                
                // Adjust text color for visibility on black shirt
                if (currentColor === '#000000') {
                    currentColor = '#ffffff';
                    designText.style.color = currentColor;
                    hexInput.value = currentColor;
                    hexPreview.style.background = currentColor;
                    updateColorSwatches();
                    updateSVGHexSelection(currentColor);
                }
            } else {
                tshirtImage.src = "{{ 'tshirt-view.png' | asset_url }}";
                tshirtImage.style.filter = 'none';
            }
        });
    });

    // Text input with boundary control
    textInput.addEventListener('input', (e) => {
        if (!uploadedImage) {
            saveState();
            designText.textContent = e.target.value || 'YOUR DESIGN HERE';
            checkBoundary();
        }
    });

    // Hex color input
    hexInput.addEventListener('input', (e) => {
        let hex = e.target.value.trim();
        
        // Add # if missing
        if (hex && !hex.startsWith('#')) {
            hex = '#' + hex;
            e.target.value = hex;
        }
        
        // Validate hex color (supports both 3 and 6 character formats)
        if (/^#([0-9A-F]{3}|[0-9A-F]{6})$/i.test(hex)) {
            // Convert short format to long format
            if (hex.length === 4) {
                hex = '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
            }
            
            saveState();
            currentColor = hex.toUpperCase();
            designText.style.color = currentColor;
            hexPreview.style.background = currentColor;
            updateSVGHexSelection(currentColor);
        }
    });

    // Update color swatches to show active state
    function updateColorSwatches() {
        document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
            if (option.dataset.color.toLowerCase() === currentColor.toLowerCase()) {
                option.classList.add('active');
            } else {
                option.classList.remove('active');
            }
        });
    }

    // Font selector
    document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(option => {
        option.addEventListener('click', () => {
            saveState();
            document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(o => o.classList.remove('active'));
            option.classList.add('active');
            currentFont = option.dataset.font;
            designText.style.fontFamily = currentFont;
        });
    });

    // Color selector
    document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
        option.addEventListener('click', () => {
            saveState();
            document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(o => o.classList.remove('active'));
            option.classList.add('active');
            currentColor = option.dataset.color;
            designText.style.color = currentColor;
            hexInput.value = currentColor;
            hexPreview.style.background = currentColor;
        });
    });

    // Flip Horizontal
    flipHBtn.addEventListener('click', () => {
        saveState();
        flipH = !flipH;
        updateTransform();
        updateFlipButtons();
    });

    // Flip Vertical
    flipVBtn.addEventListener('click', () => {
        saveState();
        flipV = !flipV;
        updateTransform();
        updateFlipButtons();
    });

    // Update flip button states
    function updateFlipButtons() {
        flipHBtn.classList.toggle('active', flipH);
        flipVBtn.classList.toggle('active', flipV);
    }

    // Invert colors
    invertBtn.addEventListener('click', () => {
        saveState();
        inverted = !inverted;
        invertBtn.classList.toggle('active', inverted);
        
        if (inverted) {
            designText.style.filter = 'invert(1) hue-rotate(180deg)';
            if (uploadedImage) {
                uploadedImage.style.filter = 'invert(1) hue-rotate(180deg)';
            }
        } else {
            designText.style.filter = 'none';
            if (uploadedImage) {
                uploadedImage.style.filter = 'none';
            }
        }
    });

    // Image upload
    imageUpload.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            saveState();
            const reader = new FileReader();
            reader.onload = (event) => {
                if (uploadedImage) {
                    uploadedImage.remove();
                }
                
                uploadedImage = document.createElement('img');
                uploadedImage.className = `cts-design-image-${sectionId}`;
                uploadedImage.src = event.target.result;
                
                if (inverted) {
                    uploadedImage.style.filter = 'invert(1) hue-rotate(180deg)';
                }
                
                designText.style.display = 'none';
                designOverlay.appendChild(uploadedImage);
            };
            reader.readAsDataURL(file);
        }
    });

    // Size slider
    sizeSlider.addEventListener('input', (e) => {
        sizeValue.textContent = `${e.target.value}%`;
        updateTransform();
    });

    sizeSlider.addEventListener('change', () => {
        saveState();
    });

    // Rotation slider
    rotateSlider.addEventListener('input', (e) => {
        rotateValue.textContent = `${e.target.value}°`;
        updateTransform();
    });

    rotateSlider.addEventListener('change', () => {
        saveState();
    });

    function updateTransform() {
        const scale = sizeSlider.value / 100;
        const rotate = rotateSlider.value;
        const scaleX = flipH ? -1 : 1;
        const scaleY = flipV ? -1 : 1;
        
        designOverlay.style.transform = `translateX(-50%) scale(${scale * scaleX}, ${scale * scaleY}) rotate(${rotate}deg)`;
        checkBoundary();
    }

    // Check if design stays within boundary
    function checkBoundary() {
        const overlay = designOverlay.getBoundingClientRect();
        const container = designOverlay.parentElement.getBoundingClientRect();
        
        // Print area boundaries (37% width, 42% height from center)
        const printAreaLeft = container.left + (container.width * 0.315); // (1 - 0.37) / 2
        const printAreaRight = container.right - (container.width * 0.315);
        const printAreaTop = container.top + (container.height * 0.29);
        const printAreaBottom = printAreaTop + (container.height * 0.42);
        
        // Check if design is outside print area
        const isOutside = overlay.left < printAreaLeft || 
                         overlay.right > printAreaRight || 
                         overlay.top < printAreaTop || 
                         overlay.bottom > printAreaBottom;
        
        if (isOutside) {
            designOverlay.style.outline = '2px solid rgba(239, 68, 68, 0.8)';
        } else {
            designOverlay.style.outline = '';
        }
    }

    // Drag functionality with boundary constraints
    let isDragging = false;
    let startX, startY, startLeft, startTop;

    designOverlay.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        const rect = designOverlay.getBoundingClientRect();
        const parent = designOverlay.parentElement.getBoundingClientRect();
        startLeft = ((rect.left + rect.width / 2 - parent.left) / parent.width) * 100;
        startTop = ((rect.top + rect.height / 2 - parent.top) / parent.height) * 100;
        designOverlay.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const parent = designOverlay.parentElement.getBoundingClientRect();
        const deltaX = ((e.clientX - startX) / parent.width) * 100;
        const deltaY = ((e.clientY - startY) / parent.height) * 100;
        
        let newLeft = startLeft + deltaX;
        let newTop = startTop + deltaY;
        
        // Constrain to safe area (with some margin)
        const margin = 5;
        newLeft = Math.max(31.5 + margin, Math.min(68.5 - margin, newLeft));
        newTop = Math.max(29 + margin, Math.min(71 - margin, newTop));
        
        designOverlay.style.left = `${newLeft}%`;
        designOverlay.style.top = `${newTop}%`;
        
        checkBoundary();
    });

    document.addEventListener('mouseup', () => {
        if (isDragging) {
            saveState();
            isDragging = false;
            designOverlay.style.cursor = 'move';
        }
    });

    // Reset button
    resetBtn.addEventListener('click', () => {
        saveState();
        
        textInput.value = 'YOUR DESIGN HERE';
        designText.textContent = 'YOUR DESIGN HERE';
        designText.style.display = 'block';
        designText.style.fontFamily = "'Bebas Neue', sans-serif";
        designText.style.color = '#000000';
        designText.style.filter = 'none';
        
        currentColor = '#000000';
        hexInput.value = '#000000';
        hexPreview.style.background = '#000000';
        
        document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(o => o.classList.remove('active'));
        document.querySelector(`.cts-font-option-${sectionId}`).classList.add('active');
        
        updateColorSwatches();
        
        sizeSlider.value = 100;
        rotateSlider.value = 0;
        sizeValue.textContent = '100%';
        rotateValue.textContent = '0°';
        designOverlay.style.left = '50%';
        designOverlay.style.top = '29%';
        
        flipH = false;
        flipV = false;
        inverted = false;
        updateFlipButtons();
        invertBtn.classList.remove('active');
        
        if (uploadedImage) {
            uploadedImage.remove();
            uploadedImage = null;
        }
        
        imageUpload.value = '';
        updateTransform();
    });

    // Add to cart
    document.getElementById(`addToCartBtn-${sectionId}`).addEventListener('click', () => {
        alert('🎉 Design added to cart! (This is a demo)');
    });

    // Download preview
    document.getElementById(`downloadBtn-${sectionId}`).addEventListener('click', () => {
        alert('📥 Preview download feature coming soon!');
    });

    // Share design
    document.getElementById(`shareBtn-${sectionId}`).addEventListener('click', () => {
        alert('🔗 Share feature coming soon!');
    });

    // Initialize
    checkBoundary();
    
    // ============================================
    // INTEGRATION POINTS FOR ENHANCEMENTS
    // ============================================
    
    // Create a state object that enhancements can access
    const state = {
        layers: uploadedImage ? [{ type: 'image', src: uploadedImage.src, transform: { x: 50, y: 50 } }] : [],
        selectedLayerId: null,
        designText: textInput.value,
        fontSize: parseInt(sizeSlider.value),
        rotation: parseInt(rotateSlider.value),
        inverted: invertBtn.classList.contains('active'),
        flippedH: flipHBtn.classList.contains('active'),
        flippedV: flipVBtn.classList.contains('active')
    };
    
    // Expose functions for enhanced features to use
    window.designerGetState = function() {
        return {
            layers: state.layers,
            designText: textInput.value,
            fontSize: parseInt(sizeSlider.value),
            rotation: parseInt(rotateSlider.value),
            uploadedImage: uploadedImage ? uploadedImage.src : null
        };
    };
    
    window.designerLoadState = function(newState) {
        if (newState.layers) state.layers = newState.layers;
        if (newState.designText) textInput.value = newState.designText;
        if (newState.fontSize) sizeSlider.value = newState.fontSize;
        if (newState.rotation) rotateSlider.value = newState.rotation;
        updateTransform();
    };
    
    window.designerGetLayers = function() {
        return state.layers;
    };
    
    window.designerGetSelectedLayer = function() {
        return state.layers.find(l => l.id === state.selectedLayerId);
    };
    
    window.designerLoadTemplate = function(layers) {
        if (!Array.isArray(layers)) return;
        state.layers = layers;
        // Apply first text layer if exists
        const firstTextLayer = layers.find(l => l.type === 'text');
        if (firstTextLayer) {
            textInput.value = firstTextLayer.text || 'YOUR DESIGN HERE';
            designText.textContent = textInput.value;
            if (firstTextLayer.fontSize) sizeSlider.value = firstTextLayer.fontSize;
            if (firstTextLayer.transform && firstTextLayer.transform.rotation !== undefined) {
                rotateSlider.value = firstTextLayer.transform.rotation;
            }
            updateTransform();
        }
    };
    
    window.designerApplyGradient = function(gradient) {
        // Apply gradient to text using the Gradients enhancement
        if (window.DesignerEnhancements && window.DesignerEnhancements.Gradients) {
            window.DesignerEnhancements.Gradients.applyGradientToText(designText, gradient);
        }
    };
    
    // ============================================
    // SUBMIT REQUEST FUNCTIONALITY
    // ============================================
    
    const submitRequestBtn = document.getElementById(`submitRequestBtn-${sectionId}`);
    const customerInfoForm = document.getElementById(`customerInfoForm-${sectionId}`);
    const requestForm = document.getElementById(`requestForm-${sectionId}`);
    const cancelRequestBtn = document.getElementById(`cancelRequestBtn-${sectionId}`);
    const formStatus = document.getElementById(`formStatus-${sectionId}`);
    
    // Show customer info form when Submit Request is clicked
    if (submitRequestBtn && customerInfoForm) {
        submitRequestBtn.addEventListener('click', () => {
            customerInfoForm.style.display = 'block';
            customerInfoForm.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        });
    }
    
    // Hide form when Cancel is clicked
    if (cancelRequestBtn && customerInfoForm) {
        cancelRequestBtn.addEventListener('click', () => {
            customerInfoForm.style.display = 'none';
            requestForm.reset();
        });
    }
    
    // Function to capture JUST the original design (no t-shirt)
    async function captureOriginalDesign() {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const overlay = designOverlay;
            
            if (!overlay) {
                console.error('❌ Design overlay not found');
                resolve(null);
                return;
            }
            
            const overlayRect = overlay.getBoundingClientRect();
            const scale = 2; // 2x resolution for better quality
            canvas.width = overlayRect.width * scale;
            canvas.height = overlayRect.height * scale;
            
            // Scale context for high-res rendering
            ctx.scale(scale, scale);
            
            // Transparent background for original design
            ctx.clearRect(0, 0, overlayRect.width, overlayRect.height);
            
            // Save context state
            ctx.save();
            
            // Center the design
            ctx.translate(overlayRect.width / 2, overlayRect.height / 2);
            ctx.rotate((rotateSlider.value * Math.PI) / 180);
            
            // Draw text or image
            if (uploadedImage) {
                ctx.drawImage(uploadedImage, -overlayRect.width / 2, -overlayRect.height / 2, overlayRect.width, overlayRect.height);
            } else if (designText) {
                const fontSize = parseInt(window.getComputedStyle(designText).fontSize);
                ctx.font = `bold ${fontSize}px ${currentFont}`;
                ctx.fillStyle = currentColor;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(textInput.value, 0, 0);
            }
            
            ctx.restore();
            
            console.log('✅ Original design captured', `${canvas.width}x${canvas.height}`);
            
            // Convert to base64 with good quality
            resolve(canvas.toDataURL('image/png', 0.95));
        });
    }
    
    // Function to capture the mockup (t-shirt with design)
    async function captureMockupPreview() {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const mockupContainer = document.getElementById(`mockupCanvas-${sectionId}`);
            
            if (!mockupContainer) {
                console.error('❌ Mockup container not found:', `mockupCanvas-${sectionId}`);
                resolve(null);
                return;
            }
            
            console.log('✅ Mockup container found', mockupContainer);
            
            // Set canvas size to match the mockup container (higher resolution for email)
            const rect = mockupContainer.getBoundingClientRect();
            const scale = 2; // 2x resolution for better quality
            canvas.width = rect.width * scale;
            canvas.height = rect.height * scale;
            
            // Scale context for high-res rendering
            ctx.scale(scale, scale);
            
            // Draw white background
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, rect.width, rect.height);
            
            // Draw the t-shirt image
            const tshirtImg = tshirtImage;
            if (tshirtImg && tshirtImg.complete) {
                ctx.drawImage(tshirtImg, 0, 0, rect.width, rect.height);
            }
            
            // Draw the design overlay
            const overlay = designOverlay;
            if (overlay) {
                const overlayRect = overlay.getBoundingClientRect();
                const containerRect = mockupContainer.getBoundingClientRect();
                
                // Calculate position relative to container
                const x = overlayRect.left - containerRect.left;
                const y = overlayRect.top - containerRect.top;
                
                // Save context state
                ctx.save();
                
                // Apply transformations
                ctx.translate(x + overlayRect.width / 2, y + overlayRect.height / 2);
                ctx.rotate((rotateSlider.value * Math.PI) / 180);
                
                // Draw text or image
                if (uploadedImage) {
                    ctx.drawImage(uploadedImage, -overlayRect.width / 2, -overlayRect.height / 2, overlayRect.width, overlayRect.height);
                } else if (designText) {
                    const fontSize = parseInt(window.getComputedStyle(designText).fontSize);
                    ctx.font = `bold ${fontSize}px ${currentFont}`;
                    ctx.fillStyle = currentColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(textInput.value, 0, 0);
                }
                
                ctx.restore();
            }
            
            console.log('✅ Mockup preview captured', `${canvas.width}x${canvas.height}`);
            
            // Convert to base64 with good quality
            resolve(canvas.toDataURL('image/png', 0.95));
        });
    }
    
    // Function to upload image to Supabase Storage (if available) or use base64
    async function uploadDesignImage(dataUrl) {
        // Check if Supabase is available
        if (window.NewThriftsCustomRequests && window.NewThriftsCustomRequests.uploadImageToStorage) {
            try {
                console.log('📤 Uploading design to Supabase Storage...');
                const imageUrl = await window.NewThriftsCustomRequests.uploadImageToStorage(
                    dataUrl, 
                    'mockup-previews'
                );
                console.log('✅ Image uploaded:', imageUrl);
                return imageUrl;
            } catch (error) {
                console.warn('⚠️ Supabase upload failed, using base64 fallback:', error);
                return dataUrl; // Fallback to base64
            }
        } else {
            console.log('ℹ️ Supabase not available, using base64 data');
            return dataUrl; // Use base64 if Supabase not available
        }
    }
    
    // Initialize EmailJS
    emailjs.init('p3BJ3t5_tiP_xTf5L');
    
    // Handle form submission
    if (requestForm) {
        requestForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Get form values
            const customerName = document.getElementById(`customerName-${sectionId}`).value;
            const customerEmail = document.getElementById(`customerEmail-${sectionId}`).value;
            const customerPhone = document.getElementById(`customerPhone-${sectionId}`).value || 'Not provided';
            const tshirtSizeValue = document.getElementById(`tshirtSize-${sectionId}`).value || 'Not specified';
            const customerMessage = document.getElementById(`customerMessage-${sectionId}`).value || 'No special instructions';
            
            // Validate required fields
            if (!customerName || !customerEmail) {
                alert('❌ Please fill in all required fields (Name and Email)');
                return;
            }
            
            // Show loading status
            formStatus.style.display = 'block';
            formStatus.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
            formStatus.style.color = 'white';
            formStatus.innerHTML = '⏳ Capturing your design and sending request...';
            
            try {
                // Capture BOTH images: original design and mockup
                console.log('📸 Capturing original design...');
                const originalDesignDataUrl = await captureOriginalDesign();
                
                console.log('📸 Capturing mockup preview...');
                const mockupPreviewDataUrl = await captureMockupPreview();
                
                if (!originalDesignDataUrl || !mockupPreviewDataUrl) {
                    throw new Error('Failed to capture design images');
                }
                
                // Upload both images to Supabase Storage (or use base64 fallback)
                console.log('📤 Uploading original design...');
                const originalDesignUrl = await uploadDesignImage(originalDesignDataUrl);
                
                console.log('📤 Uploading mockup preview...');
                const mockupPreviewUrl = await uploadDesignImage(mockupPreviewDataUrl);
                
                // Helper function to safely convert values to strings (from working code)
                const s = v => (v == null || v === "") ? "-" : String(v);
                
                // Ensure URLs are absolute HTTPS links (from working code)
                const ensureAbsoluteUrl = (url) => {
                    if (!url || url === '#') return '-';
                    if (url.startsWith('http://') || url.startsWith('https://')) return url;
                    // If relative URL, make it absolute (shouldn't happen, but just in case)
                    return url.startsWith('/') ? `https://newthrifts.com${url}` : url;
                };
                
                // Prepare email data with correct variable names matching EmailJS template
                const emailData = {
                    // Customer info
                    name: s(customerName),
                    email: s(customerEmail),
                    phone: s(customerPhone),
                    tshirt_size: s(tshirtSizeValue),
                    message: s(customerMessage),
                    
                    // Design specifications (matching template variables)
                    design_position: s('Center'),  // Placeholder - update if you track position
                    design_size: s(sizeSlider.value + '%'),
                    design_rotation: s(rotateSlider.value + '°'),
                    design_view: s('Front'),  // Placeholder - update if you track view
                    tshirt_color: s(tshirtColor),
                    
                    // Additional design details
                    design_text: s(textInput.value),
                    text_color: s(currentColor),
                    font_family: s(currentFont),
                    font_size: s(sizeSlider.value + '%'),
                    rotation: s(rotateSlider.value + '°'),
                    has_uploaded_image: uploadedImage ? 'Yes' : 'No',
                    
                // Metadata
                submission_date: s(new Date().toLocaleString()),
                request_id: s(`REQ-${Date.now().toString().slice(-8)}`),
                
                // Image URLs - SEPARATE IMAGES FOR ORIGINAL AND MOCKUP
                design_url: ensureAbsoluteUrl(originalDesignUrl),  // Just the design
                mockup_url: ensureAbsoluteUrl(mockupPreviewUrl),   // T-shirt with design
                logo_url: 'https://cdn.shopify.com/s/files/1/0644/9525/5650/files/NewThriftsLogo.svg?v=1760718145'
            };
            
            console.log('📧 Sending design request email...', emailData);
            console.log('🖼️ Image URLs (SEPARATE):');
            console.log('   🎨 Original Design:', emailData.design_url);
            console.log('   👕 Mockup Preview:', emailData.mockup_url);
                
                // Send email via EmailJS
                const result = await emailjs.send(
                    'service_f4r34d3',
                    'template_qiquke8',
                    emailData
                );
                
                console.log('✅ Email sent successfully:', result);
                
                // Show success message
                formStatus.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                formStatus.innerHTML = `
                    ✅ <strong>Request Submitted Successfully!</strong><br>
                    <span style="font-size: 14px; font-weight: normal; opacity: 0.9;">
                        Thank you, ${customerName}! We've received your design and will contact you at ${customerEmail} shortly.
                    </span>
                `;
                
                // Reset form after 3 seconds
                setTimeout(() => {
                    requestForm.reset();
                    customerInfoForm.style.display = 'none';
                    formStatus.style.display = 'none';
                }, 5000);
                
            } catch (error) {
                console.error('❌ Email send failed:', error);
                
                // Show error message
                formStatus.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                formStatus.innerHTML = `
                    ❌ <strong>Submission Failed</strong><br>
                    <span style="font-size: 14px; font-weight: normal; opacity: 0.9;">
                        ${error.message || 'Please check your EmailJS configuration or try again later.'}
                    </span>
                `;
            }
        });
    }
    
    console.log('✅ Submit Request functionality initialized');
    console.log('✅ Designer integration points ready for enhancements');
})();
</script>

{% schema %}
{
  "name": "Custom T-Shirt Studio",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "✨ Custom T-Shirt Designer"
    }
  ],
  "presets": [
    {
      "name": "Custom T-Shirt Studio"
    }
  ]
}
{% endschema %}
