{% comment %}
  Custom T-Shirt Design Studio Section
  Enhanced with hex color picker, undo, invert, flip, placement guide, and more
  PLUS: Image layers, Curved text, Full export, Animations, Gradients, Templates, Auto-save
{% endcomment %}

<script src="{{ 'designer-enhancements.js' | asset_url }}" defer></script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style>
    .custom-tshirt-studio-{{ section.id }} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .custom-tshirt-studio-{{ section.id }} {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        min-height: 100vh;
        color: #e2e8f0;
        padding: 0;
    }

    .cts-header-{{ section.id }} {
        background: rgba(15, 23, 42, 0.8);
        backdrop-filter: blur(10px);
        padding: 20px 40px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .cts-header-{{ section.id }} h1 {
        font-size: 24px;
        font-weight: 700;
        background: linear-gradient(135deg, #60a5fa, #a78bfa);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .cts-header-actions-{{ section.id }} {
        display: flex;
        gap: 12px;
    }

    .cts-header-btn-{{ section.id }} {
        padding: 10px 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .cts-header-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .cts-header-btn-{{ section.id }}:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .cts-container-{{ section.id }} {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px 20px;
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 40px;
    }

    .cts-preview-section-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .cts-preview-card-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .cts-mockup-stage-{{ section.id }} {
        position: relative;
        width: 100%;
        aspect-ratio: 1;
        background: linear-gradient(135deg, #27e1c1 0%, #667eea 20%, #764ba2 35%, #f093fb 50%, #4facfe 65%, #27e1c1 100%);
        background-size: 300% 300%;
        animation: gradientShift-{{ section.id }} 15s ease infinite;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 25px 80px rgba(39, 225, 193, 0.2);
    }

    @keyframes gradientShift-{{ section.id }} {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    .cts-mockup-canvas-{{ section.id }} {
        position: relative;
        width: 100%;
        height: 100%;
        background: #f8fafc;
        border-radius: 16px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .cts-tshirt-container-{{ section.id }} {
        position: relative;
        width: 85%;
        height: 85%;
    }

    .cts-tshirt-image-{{ section.id }} {
        width: 100%;
        height: 100%;
        object-fit: contain;
        transition: opacity 0.3s ease;
    }

    .cts-design-overlay-{{ section.id }} {
        position: absolute;
        width: 37%;
        height: 42%;
        left: 50%;
        top: 29%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: move;
        transition: all 0.2s ease;
    }

    .cts-design-overlay-{{ section.id }}:hover {
        outline: 2px dashed rgba(96, 165, 250, 0.5);
        outline-offset: 4px;
    }

    .cts-design-text-{{ section.id }} {
        font-family: 'Bebas Neue', sans-serif;
        font-size: 32px;
        font-weight: bold;
        color: #000000;
        text-align: center;
        user-select: none;
        pointer-events: none;
    }

    .cts-design-image-{{ section.id }} {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        pointer-events: none;
    }

    /* Placement Guide Overlay */
    .cts-placement-guide-{{ section.id }} {
        position: absolute;
        width: 37%;
        height: 42%;
        left: 50%;
        top: 29%;
        transform: translateX(-50%);
        border: 2px dashed rgba(96, 165, 250, 0.6);
        background: rgba(96, 165, 250, 0.1);
        pointer-events: none;
        display: none;
        z-index: 10;
    }

    .cts-placement-guide-{{ section.id }}.active {
        display: block;
    }

    .cts-placement-guide-{{ section.id }}::before {
        content: 'SAFE PRINT AREA';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 12px;
        font-weight: 700;
        color: rgba(96, 165, 250, 0.8);
        letter-spacing: 2px;
    }

    /* T-Shirt Color Toggle */
    .cts-tshirt-toggle-{{ section.id }} {
        position: absolute;
        top: 20px;
        right: 20px;
        display: flex;
        gap: 8px;
        z-index: 5;
    }

    .cts-toggle-btn-{{ section.id }} {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 3px solid white;
        cursor: pointer;
        transition: all 0.2s;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .cts-toggle-btn-{{ section.id }}:hover {
        transform: scale(1.1);
    }

    .cts-toggle-btn-{{ section.id }}.active {
        box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.5);
    }

    .cts-quick-actions-{{ section.id }} {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .cts-quick-action-btn-{{ section.id }} {
        flex: 1;
        min-width: 150px;
        padding: 14px 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .cts-quick-action-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .cts-controls-panel-{{ section.id }} {
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-height: calc(100vh - 200px);
        overflow-y: auto;
        padding-right: 10px;
    }

    .cts-controls-panel-{{ section.id }}::-webkit-scrollbar {
        width: 8px;
    }

    .cts-controls-panel-{{ section.id }}::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 4px;
    }

    .cts-controls-panel-{{ section.id }}::-webkit-scrollbar-thumb {
        background: rgba(96, 165, 250, 0.5);
        border-radius: 4px;
    }

    .cts-control-card-{{ section.id }} {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 24px;
    }

    .cts-control-card-{{ section.id }} h3 {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 16px;
        color: #f1f5f9;
    }

    .cts-control-group-{{ section.id }} {
        margin-bottom: 20px;
    }

    .cts-control-group-{{ section.id }}:last-child {
        margin-bottom: 0;
    }

    .cts-control-card-{{ section.id }} label {
        display: block;
        font-size: 13px;
        font-weight: 500;
        color: #cbd5e1;
        margin-bottom: 8px;
    }

    .cts-text-input-{{ section.id }} {
        width: 100%;
        padding: 12px 16px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        color: white;
        font-size: 14px;
        font-family: inherit;
        transition: all 0.2s;
    }

    .cts-text-input-{{ section.id }}:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    textarea.cts-text-input-{{ section.id }} {
        resize: vertical;
        min-height: 80px;
    }

    .cts-file-input-{{ section.id }} {
        display: none;
    }

    .cts-file-upload-btn-{{ section.id }} {
        width: 100%;
        padding: 12px;
        background: rgba(96, 165, 250, 0.1);
        border: 2px dashed rgba(96, 165, 250, 0.3);
        border-radius: 10px;
        color: #60a5fa;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        text-align: center;
        display: block;
    }

    .cts-file-upload-btn-{{ section.id }}:hover {
        background: rgba(96, 165, 250, 0.15);
        border-color: rgba(96, 165, 250, 0.5);
    }

    .cts-color-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 8px;
        margin-bottom: 12px;
    }

    .cts-color-option-{{ section.id }} {
        aspect-ratio: 1;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s;
        position: relative;
    }

    .cts-color-option-{{ section.id }}:hover {
        transform: scale(1.1);
    }

    .cts-color-option-{{ section.id }}.active {
        border-color: white;
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
    }

    /* Hexagonal Color Picker */
    .hex-picker-container-{{ section.id }} {
        position: relative;
    }

    .hex-grid-{{ section.id }} {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0;
        margin-bottom: 16px;
        padding: 20px;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
    }

    .hex-row-{{ section.id }} {
        display: flex;
        gap: 2px;
        margin-bottom: -8px;
    }

    .hex-row-{{ section.id }}.offset {
        margin-left: 18px;
    }

    .hex-color-{{ section.id }} {
        width: 28px;
        height: 32px;
        clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        cursor: pointer;
        transition: all 0.2s ease;
        position: relative;
    }

    .hex-color-{{ section.id }}:hover {
        transform: scale(1.15);
        filter: brightness(1.2);
        z-index: 10;
    }

    .hex-color-{{ section.id }}.selected {
        transform: scale(1.2);
        filter: brightness(1.3) drop-shadow(0 0 8px rgba(255, 255, 255, 0.8));
        z-index: 11;
    }

    .hex-display-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
        background: rgba(0, 0, 0, 0.2);
        padding: 12px 16px;
        border-radius: 8px;
    }

    .cts-hex-preview-{{ section.id }} {
        width: 40px;
        height: 40px;
        border-radius: 6px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

    .cts-hex-input-{{ section.id }} {
        flex: 1;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff;
        padding: 10px 12px;
        border-radius: 6px;
        font-size: 14px;
        font-family: 'Courier New', monospace;
        transition: all 0.2s ease;
        text-transform: uppercase;
    }

    .cts-hex-input-{{ section.id }}:focus {
        outline: none;
        border-color: #60a5fa;
        background: rgba(255, 255, 255, 0.08);
    }

    /* Transform Controls */
    .cts-transform-grid-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
    }

    .cts-transform-btn-{{ section.id }} {
        padding: 12px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        color: white;
        font-size: 13px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
    }

    .cts-transform-btn-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-transform-btn-{{ section.id }}.active {
        background: rgba(96, 165, 250, 0.2);
        border-color: #60a5fa;
    }

    .cts-slider-container-{{ section.id }} {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .cts-slider-{{ section.id }} {
        flex: 1;
        height: 6px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
        outline: none;
        -webkit-appearance: none;
    }

    .cts-slider-{{ section.id }}::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 18px;
        height: 18px;
        background: #60a5fa;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
    }

    .cts-slider-{{ section.id }}::-moz-range-thumb {
        width: 18px;
        height: 18px;
        background: #60a5fa;
        border-radius: 50%;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
    }

    .cts-slider-value-{{ section.id }} {
        font-size: 14px;
        font-weight: 600;
        color: #60a5fa;
        min-width: 45px;
        text-align: right;
    }

    .cts-primary-btn-{{ section.id }} {
        width: 100%;
        padding: 16px;
        background: linear-gradient(135deg, #60a5fa, #a78bfa);
        border: none;
        border-radius: 12px;
        color: white;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        box-shadow: 0 8px 24px rgba(96, 165, 250, 0.3);
    }

    .cts-primary-btn-{{ section.id }}:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 32px rgba(96, 165, 250, 0.4);
    }

    .cts-font-selector-{{ section.id }} {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
    }

    .cts-font-option-{{ section.id }} {
        padding: 10px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .cts-font-option-{{ section.id }}:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .cts-font-option-{{ section.id }}.active {
        background: rgba(96, 165, 250, 0.2);
        border-color: #60a5fa;
    }

    @media (max-width: 1024px) {
        .cts-container-{{ section.id }} {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="custom-tshirt-studio-{{ section.id }}" id="custom-tshirt-studio-{{ section.id }}" style="display: none;">
    <div class="cts-header-{{ section.id }}">
        <h1>✨ Custom T-Shirt Designer</h1>
        <div class="cts-header-actions-{{ section.id }}">
            <button class="cts-header-btn-{{ section.id }}" id="undoBtn-{{ section.id }}" disabled>↶ Undo</button>
            <button class="cts-header-btn-{{ section.id }}" id="guideBtn-{{ section.id }}">📐 Placement Guide</button>
        </div>
    </div>

    <div class="cts-container-{{ section.id }}">
        <div class="cts-preview-section-{{ section.id }}">
            <div class="cts-preview-card-{{ section.id }}">
                <div class="cts-mockup-stage-{{ section.id }}">
                    <div class="cts-mockup-canvas-{{ section.id }}">
                        <div class="cts-tshirt-container-{{ section.id }}">
                            <!-- T-Shirt Color Toggle -->
                            <div class="cts-tshirt-toggle-{{ section.id }}">
                                <div class="cts-toggle-btn-{{ section.id }} active" 
                                     data-color="white" 
                                     style="background: white;"
                                     title="White T-Shirt"></div>
                                <div class="cts-toggle-btn-{{ section.id }}" 
                                     data-color="black" 
                                     style="background: #1a1a1a;"
                                     title="Black T-Shirt"></div>
                            </div>

                            <img 
                                class="cts-tshirt-image-{{ section.id }}" 
                                id="tshirtImage-{{ section.id }}"
                                src="{{ 'tshirt-view.png' | asset_url }}"
                                alt="T-shirt mockup">
                            
                            <!-- Placement Guide Overlay -->
                            <div class="cts-placement-guide-{{ section.id }}" id="placementGuide-{{ section.id }}"></div>
                            
                            <div class="cts-design-overlay-{{ section.id }}" id="designOverlay-{{ section.id }}">
                                <span class="cts-design-text-{{ section.id }}" id="designText-{{ section.id }}">YOUR DESIGN HERE</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="cts-quick-actions-{{ section.id }}">
                <button class="cts-quick-action-btn-{{ section.id }}" id="downloadBtn-{{ section.id }}">📥 Download Preview</button>
                <button class="cts-quick-action-btn-{{ section.id }}" id="shareBtn-{{ section.id }}">🔗 Share Design</button>
                <button class="cts-quick-action-btn-{{ section.id }}" id="resetBtn-{{ section.id }}">🔄 Reset All</button>
            </div>
        </div>

        <div class="cts-controls-panel-{{ section.id }}">
            <div class="cts-control-card-{{ section.id }}">
                <h3>📝 Design Text</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Your Text</label>
                    <textarea class="cts-text-input-{{ section.id }}" id="textInput-{{ section.id }}" placeholder="Enter your custom text...">YOUR DESIGN HERE</textarea>
                </div>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Font Style</label>
                    <div class="cts-font-selector-{{ section.id }}">
                        <div class="cts-font-option-{{ section.id }} active" data-font="'Bebas Neue', sans-serif" style="font-family: 'Bebas Neue', sans-serif;">Bebas</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="'Inter', sans-serif" style="font-family: 'Inter', sans-serif; font-weight: 700;">Inter</div>
                        <div class="cts-font-option-{{ section.id }}" data-font="Arial, sans-serif" style="font-family: Arial, sans-serif; font-weight: bold;">Arial</div>
                    </div>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🎨 Text Color</h3>
                
                <div class="hex-picker-container-{{ section.id }}">
                    <!-- Hexagonal Color Grid -->
                    <div class="hex-grid-{{ section.id }}" id="hexGrid-{{ section.id }}"></div>
                    
                    <!-- Hex Display with Input -->
                    <div class="hex-display-{{ section.id }}">
                        <div class="cts-hex-preview-{{ section.id }}" id="hexPreview-{{ section.id }}" style="background: #000000;"></div>
                        <input type="text" 
                               class="cts-hex-input-{{ section.id }}" 
                               id="hexInput-{{ section.id }}"
                               placeholder="#000000" 
                               maxlength="7"
                               value="#000000">
                    </div>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🔄 Transform</h3>
                <div class="cts-transform-grid-{{ section.id }}">
                    <button class="cts-transform-btn-{{ section.id }}" id="flipHBtn-{{ section.id }}">↔️ Flip H</button>
                    <button class="cts-transform-btn-{{ section.id }}" id="flipVBtn-{{ section.id }}">↕️ Flip V</button>
                    <button class="cts-transform-btn-{{ section.id }}" id="invertBtn-{{ section.id }}">🔁 Invert</button>
                </div>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>🖼️ Upload Image</h3>
                <input type="file" class="cts-file-input-{{ section.id }}" id="imageUpload-{{ section.id }}" accept="image/*">
                <label for="imageUpload-{{ section.id }}" class="cts-file-upload-btn-{{ section.id }}">
                    📤 Choose Image File
                </label>
            </div>

            <div class="cts-control-card-{{ section.id }}">
                <h3>⚙️ Adjustments</h3>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Size</label>
                    <div class="cts-slider-container-{{ section.id }}">
                        <input type="range" class="cts-slider-{{ section.id }}" id="sizeSlider-{{ section.id }}" min="50" max="200" value="100">
                        <span class="cts-slider-value-{{ section.id }}" id="sizeValue-{{ section.id }}">100%</span>
                    </div>
                </div>
                <div class="cts-control-group-{{ section.id }}">
                    <label>Rotation</label>
                    <div class="cts-slider-container-{{ section.id }}">
                        <input type="range" class="cts-slider-{{ section.id }}" id="rotateSlider-{{ section.id }}" min="-45" max="45" value="0">
                        <span class="cts-slider-value-{{ section.id }}" id="rotateValue-{{ section.id }}">0°</span>
                    </div>
                </div>
            </div>

            {% comment %} ENHANCED FEATURES - Image layers, Curved text, Animations, Gradients, Templates, Auto-save {% endcomment %}
            {% render 'designer-enhanced-controls', section: section %}

            <button class="cts-primary-btn-{{ section.id }}" id="addToCartBtn-{{ section.id }}">🛒 Add to Cart - $24.99</button>
        </div>
    </div>
</div>

<script>
(function() {
    const sectionId = '{{ section.id }}';
    const designOverlay = document.getElementById(`designOverlay-${sectionId}`);
    const designText = document.getElementById(`designText-${sectionId}`);
    const textInput = document.getElementById(`textInput-${sectionId}`);
    const imageUpload = document.getElementById(`imageUpload-${sectionId}`);
    const sizeSlider = document.getElementById(`sizeSlider-${sectionId}`);
    const rotateSlider = document.getElementById(`rotateSlider-${sectionId}`);
    const sizeValue = document.getElementById(`sizeValue-${sectionId}`);
    const rotateValue = document.getElementById(`rotateValue-${sectionId}`);
    const resetBtn = document.getElementById(`resetBtn-${sectionId}`);
    const undoBtn = document.getElementById(`undoBtn-${sectionId}`);
    const guideBtn = document.getElementById(`guideBtn-${sectionId}`);
    const placementGuide = document.getElementById(`placementGuide-${sectionId}`);
    const hexInput = document.getElementById(`hexInput-${sectionId}`);
    const hexPreview = document.getElementById(`hexPreview-${sectionId}`);
    const flipHBtn = document.getElementById(`flipHBtn-${sectionId}`);
    const flipVBtn = document.getElementById(`flipVBtn-${sectionId}`);
    const invertBtn = document.getElementById(`invertBtn-${sectionId}`);
    const tshirtImage = document.getElementById(`tshirtImage-${sectionId}`);

    let uploadedImage = null;
    let currentFont = "'Bebas Neue', sans-serif";
    let currentColor = '#000000';
    let flipH = false;
    let flipV = false;
    let inverted = false;
    let guideActive = false;
    let tshirtColor = 'white';
    
    // Undo history
    let undoHistory = [];
    const MAX_UNDO = 20;

    // ============================================
    // HEXAGONAL COLOR PICKER
    // ============================================
    
    // Generate hexagonal color palette based on HSL color wheel
    function generateHexagonalPalette() {
        const colors = [];
        const rows = 13; // Number of rows in the hexagon
        
        // Define the structure: number of hexagons per row
        const structure = [7, 8, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 7];
        
        let colorIndex = 0;
        const totalColors = structure.reduce((a, b) => a + b, 0);
        
        structure.forEach((count, rowIndex) => {
            const row = [];
            const isOffset = count <= 12 && rowIndex >= 1 && rowIndex <= 11;
            
            for (let i = 0; i < count; i++) {
                // Calculate position in color wheel
                const progress = colorIndex / totalColors;
                
                // Create a spiral pattern from outer edge to center
                let hue, saturation, lightness;
                
                // Determine distance from center
                const centerRow = 6;
                const rowFromCenter = Math.abs(rowIndex - centerRow);
                const colFromCenter = Math.abs(i - count / 2);
                const distanceFromCenter = Math.sqrt(rowFromCenter * rowFromCenter + colFromCenter * colFromCenter);
                const maxDistance = 8;
                
                // Hue based on angle around the wheel
                const angle = Math.atan2(rowIndex - centerRow, i - count / 2);
                hue = ((angle + Math.PI) / (2 * Math.PI)) * 360;
                
                // Saturation decreases toward center
                saturation = Math.min(100, (distanceFromCenter / maxDistance) * 100);
                
                // Lightness varies to create depth
                lightness = 50 + (Math.sin(progress * Math.PI * 2) * 20);
                
                // Adjust for white center and darker edges
                if (distanceFromCenter < 2) {
                    saturation = saturation * 0.3;
                    lightness = 70 + (2 - distanceFromCenter) * 15;
                } else if (distanceFromCenter > 6) {
                    lightness = Math.max(20, lightness - (distanceFromCenter - 6) * 8);
                }
                
                const color = hslToHex(hue, saturation, lightness);
                row.push(color);
                colorIndex++;
            }
            
            colors.push({ hexes: row, offset: isOffset });
        });
        
        return colors;
    }

    // Convert HSL to HEX
    function hslToHex(h, s, l) {
        s /= 100;
        l /= 100;
        
        const k = n => (n + h / 30) % 12;
        const a = s * Math.min(l, 1 - l);
        const f = n => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
        
        const r = Math.round(255 * f(0));
        const g = Math.round(255 * f(8));
        const b = Math.round(255 * f(4));
        
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`.toUpperCase();
    }

    // Update selection state in hexagonal grid
    function updateHexSelection(selectedColor) {
        document.querySelectorAll(`.hex-color-${sectionId}`).forEach(swatch => {
            if (swatch.dataset.color && swatch.dataset.color.toUpperCase() === selectedColor.toUpperCase()) {
                swatch.classList.add('selected');
            } else {
                swatch.classList.remove('selected');
            }
        });
    }

    // Initialize hexagonal color picker
    function initHexagonalPicker() {
        const hexGrid = document.getElementById(`hexGrid-${sectionId}`);
        const palette = generateHexagonalPalette();
        
        // Create hexagonal grid
        palette.forEach(rowData => {
            const rowDiv = document.createElement('div');
            rowDiv.className = `hex-row-${sectionId}` + (rowData.offset ? ' offset' : '');
            
            rowData.hexes.forEach(color => {
                const hex = document.createElement('div');
                hex.className = `hex-color-${sectionId}`;
                hex.style.background = color;
                hex.dataset.color = color;
                
                hex.addEventListener('click', () => {
                    saveState();
                    currentColor = color;
                    designText.style.color = color;
                    hexInput.value = color;
                    hexPreview.style.background = color;
                    updateHexSelection(color);
                });
                
                rowDiv.appendChild(hex);
            });
            
            hexGrid.appendChild(rowDiv);
        });

        // Set initial selection
        updateHexSelection(currentColor);
    }

    // Initialize the hexagonal picker on load
    initHexagonalPicker();

    // Save state for undo
    function saveState() {
        const state = {
            text: textInput.value,
            color: currentColor,
            font: currentFont,
            size: sizeSlider.value,
            rotation: rotateSlider.value,
            flipH: flipH,
            flipV: flipV,
            inverted: inverted,
            left: designOverlay.style.left,
            top: designOverlay.style.top
        };
        
        undoHistory.push(state);
        if (undoHistory.length > MAX_UNDO) {
            undoHistory.shift();
        }
        
        undoBtn.disabled = undoHistory.length === 0;
    }

    // Undo last action
    undoBtn.addEventListener('click', () => {
        if (undoHistory.length > 0) {
            const state = undoHistory.pop();
            
            textInput.value = state.text;
            designText.textContent = state.text || 'YOUR DESIGN HERE';
            currentColor = state.color;
            designText.style.color = state.color;
            hexInput.value = state.color;
            hexPreview.style.background = state.color;
            currentFont = state.font;
            designText.style.fontFamily = state.font;
            sizeSlider.value = state.size;
            sizeValue.textContent = `${state.size}%`;
            rotateSlider.value = state.rotation;
            rotateValue.textContent = `${state.rotation}°`;
            flipH = state.flipH;
            flipV = state.flipV;
            inverted = state.inverted;
            designOverlay.style.left = state.left;
            designOverlay.style.top = state.top;
            
            updateTransform();
            updateFlipButtons();
            updateColorSwatches();
            
            undoBtn.disabled = undoHistory.length === 0;
        }
    });

    // Placement guide toggle
    guideBtn.addEventListener('click', () => {
        guideActive = !guideActive;
        if (guideActive) {
            placementGuide.classList.add('active');
            guideBtn.textContent = '✓ Guide On';
            guideBtn.style.background = 'rgba(96, 165, 250, 0.2)';
            guideBtn.style.borderColor = '#60a5fa';
        } else {
            placementGuide.classList.remove('active');
            guideBtn.textContent = '📐 Placement Guide';
            guideBtn.style.background = 'rgba(255, 255, 255, 0.1)';
            guideBtn.style.borderColor = 'rgba(255, 255, 255, 0.2)';
        }
    });

    // T-Shirt color toggle
    document.querySelectorAll(`.cts-toggle-btn-${sectionId}`).forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll(`.cts-toggle-btn-${sectionId}`).forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            tshirtColor = btn.dataset.color;
            
            // Update t-shirt image (you can add different mockup images here)
            if (tshirtColor === 'black') {
                tshirtImage.style.filter = 'brightness(0.3)';
                // Adjust text color for visibility
                if (currentColor === '#000000') {
                    currentColor = '#ffffff';
                    designText.style.color = currentColor;
                    hexInput.value = currentColor;
                    hexPreview.style.background = currentColor;
                    updateColorSwatches();
                }
            } else {
                tshirtImage.style.filter = 'brightness(1)';
            }
        });
    });

    // Text input with boundary control
    textInput.addEventListener('input', (e) => {
        if (!uploadedImage) {
            saveState();
            designText.textContent = e.target.value || 'YOUR DESIGN HERE';
            checkBoundary();
        }
    });

    // Hex color input
    hexInput.addEventListener('input', (e) => {
        let hex = e.target.value.trim();
        
        // Add # if missing
        if (hex && !hex.startsWith('#')) {
            hex = '#' + hex;
            e.target.value = hex;
        }
        
        // Validate hex color (supports both 3 and 6 character formats)
        if (/^#([0-9A-F]{3}|[0-9A-F]{6})$/i.test(hex)) {
            // Convert short format to long format
            if (hex.length === 4) {
                hex = '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
            }
            
            saveState();
            currentColor = hex.toUpperCase();
            designText.style.color = currentColor;
            hexPreview.style.background = currentColor;
            updateHexSelection(currentColor);
        }
    });

    // Update color swatches to show active state
    function updateColorSwatches() {
        document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
            if (option.dataset.color.toLowerCase() === currentColor.toLowerCase()) {
                option.classList.add('active');
            } else {
                option.classList.remove('active');
            }
        });
    }

    // Font selector
    document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(option => {
        option.addEventListener('click', () => {
            saveState();
            document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(o => o.classList.remove('active'));
            option.classList.add('active');
            currentFont = option.dataset.font;
            designText.style.fontFamily = currentFont;
        });
    });

    // Color selector
    document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(option => {
        option.addEventListener('click', () => {
            saveState();
            document.querySelectorAll(`.cts-color-option-${sectionId}`).forEach(o => o.classList.remove('active'));
            option.classList.add('active');
            currentColor = option.dataset.color;
            designText.style.color = currentColor;
            hexInput.value = currentColor;
            hexPreview.style.background = currentColor;
        });
    });

    // Flip Horizontal
    flipHBtn.addEventListener('click', () => {
        saveState();
        flipH = !flipH;
        updateTransform();
        updateFlipButtons();
    });

    // Flip Vertical
    flipVBtn.addEventListener('click', () => {
        saveState();
        flipV = !flipV;
        updateTransform();
        updateFlipButtons();
    });

    // Update flip button states
    function updateFlipButtons() {
        flipHBtn.classList.toggle('active', flipH);
        flipVBtn.classList.toggle('active', flipV);
    }

    // Invert colors
    invertBtn.addEventListener('click', () => {
        saveState();
        inverted = !inverted;
        invertBtn.classList.toggle('active', inverted);
        
        if (inverted) {
            designText.style.filter = 'invert(1) hue-rotate(180deg)';
            if (uploadedImage) {
                uploadedImage.style.filter = 'invert(1) hue-rotate(180deg)';
            }
        } else {
            designText.style.filter = 'none';
            if (uploadedImage) {
                uploadedImage.style.filter = 'none';
            }
        }
    });

    // Image upload
    imageUpload.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            saveState();
            const reader = new FileReader();
            reader.onload = (event) => {
                if (uploadedImage) {
                    uploadedImage.remove();
                }
                
                uploadedImage = document.createElement('img');
                uploadedImage.className = `cts-design-image-${sectionId}`;
                uploadedImage.src = event.target.result;
                
                if (inverted) {
                    uploadedImage.style.filter = 'invert(1) hue-rotate(180deg)';
                }
                
                designText.style.display = 'none';
                designOverlay.appendChild(uploadedImage);
            };
            reader.readAsDataURL(file);
        }
    });

    // Size slider
    sizeSlider.addEventListener('input', (e) => {
        sizeValue.textContent = `${e.target.value}%`;
        updateTransform();
    });

    sizeSlider.addEventListener('change', () => {
        saveState();
    });

    // Rotation slider
    rotateSlider.addEventListener('input', (e) => {
        rotateValue.textContent = `${e.target.value}°`;
        updateTransform();
    });

    rotateSlider.addEventListener('change', () => {
        saveState();
    });

    function updateTransform() {
        const scale = sizeSlider.value / 100;
        const rotate = rotateSlider.value;
        const scaleX = flipH ? -1 : 1;
        const scaleY = flipV ? -1 : 1;
        
        designOverlay.style.transform = `translateX(-50%) scale(${scale * scaleX}, ${scale * scaleY}) rotate(${rotate}deg)`;
        checkBoundary();
    }

    // Check if design stays within boundary
    function checkBoundary() {
        const overlay = designOverlay.getBoundingClientRect();
        const container = designOverlay.parentElement.getBoundingClientRect();
        
        // Print area boundaries (37% width, 42% height from center)
        const printAreaLeft = container.left + (container.width * 0.315); // (1 - 0.37) / 2
        const printAreaRight = container.right - (container.width * 0.315);
        const printAreaTop = container.top + (container.height * 0.29);
        const printAreaBottom = printAreaTop + (container.height * 0.42);
        
        // Check if design is outside print area
        const isOutside = overlay.left < printAreaLeft || 
                         overlay.right > printAreaRight || 
                         overlay.top < printAreaTop || 
                         overlay.bottom > printAreaBottom;
        
        if (isOutside) {
            designOverlay.style.outline = '2px solid rgba(239, 68, 68, 0.8)';
        } else {
            designOverlay.style.outline = '';
        }
    }

    // Drag functionality with boundary constraints
    let isDragging = false;
    let startX, startY, startLeft, startTop;

    designOverlay.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        const rect = designOverlay.getBoundingClientRect();
        const parent = designOverlay.parentElement.getBoundingClientRect();
        startLeft = ((rect.left + rect.width / 2 - parent.left) / parent.width) * 100;
        startTop = ((rect.top + rect.height / 2 - parent.top) / parent.height) * 100;
        designOverlay.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const parent = designOverlay.parentElement.getBoundingClientRect();
        const deltaX = ((e.clientX - startX) / parent.width) * 100;
        const deltaY = ((e.clientY - startY) / parent.height) * 100;
        
        let newLeft = startLeft + deltaX;
        let newTop = startTop + deltaY;
        
        // Constrain to safe area (with some margin)
        const margin = 5;
        newLeft = Math.max(31.5 + margin, Math.min(68.5 - margin, newLeft));
        newTop = Math.max(29 + margin, Math.min(71 - margin, newTop));
        
        designOverlay.style.left = `${newLeft}%`;
        designOverlay.style.top = `${newTop}%`;
        
        checkBoundary();
    });

    document.addEventListener('mouseup', () => {
        if (isDragging) {
            saveState();
            isDragging = false;
            designOverlay.style.cursor = 'move';
        }
    });

    // Reset button
    resetBtn.addEventListener('click', () => {
        saveState();
        
        textInput.value = 'YOUR DESIGN HERE';
        designText.textContent = 'YOUR DESIGN HERE';
        designText.style.display = 'block';
        designText.style.fontFamily = "'Bebas Neue', sans-serif";
        designText.style.color = '#000000';
        designText.style.filter = 'none';
        
        currentColor = '#000000';
        hexInput.value = '#000000';
        hexPreview.style.background = '#000000';
        
        document.querySelectorAll(`.cts-font-option-${sectionId}`).forEach(o => o.classList.remove('active'));
        document.querySelector(`.cts-font-option-${sectionId}`).classList.add('active');
        
        updateColorSwatches();
        
        sizeSlider.value = 100;
        rotateSlider.value = 0;
        sizeValue.textContent = '100%';
        rotateValue.textContent = '0°';
        designOverlay.style.left = '50%';
        designOverlay.style.top = '29%';
        
        flipH = false;
        flipV = false;
        inverted = false;
        updateFlipButtons();
        invertBtn.classList.remove('active');
        
        if (uploadedImage) {
            uploadedImage.remove();
            uploadedImage = null;
        }
        
        imageUpload.value = '';
        updateTransform();
    });

    // Add to cart
    document.getElementById(`addToCartBtn-${sectionId}`).addEventListener('click', () => {
        alert('🎉 Design added to cart! (This is a demo)');
    });

    // Download preview
    document.getElementById(`downloadBtn-${sectionId}`).addEventListener('click', () => {
        alert('📥 Preview download feature coming soon!');
    });

    // Share design
    document.getElementById(`shareBtn-${sectionId}`).addEventListener('click', () => {
        alert('🔗 Share feature coming soon!');
    });

    // Initialize
    checkBoundary();
    
    // ============================================
    // INTEGRATION POINTS FOR ENHANCEMENTS
    // ============================================
    
    // Create a state object that enhancements can access
    const state = {
        layers: uploadedImage ? [{ type: 'image', src: uploadedImage.src, transform: { x: 50, y: 50 } }] : [],
        selectedLayerId: null,
        designText: textInput.value,
        fontSize: parseInt(sizeSlider.value),
        rotation: parseInt(rotateSlider.value),
        inverted: invertBtn.classList.contains('active'),
        flippedH: flipHBtn.classList.contains('active'),
        flippedV: flipVBtn.classList.contains('active')
    };
    
    // Expose functions for enhanced features to use
    window.designerGetState = function() {
        return {
            layers: state.layers,
            designText: textInput.value,
            fontSize: parseInt(sizeSlider.value),
            rotation: parseInt(rotateSlider.value),
            uploadedImage: uploadedImage ? uploadedImage.src : null
        };
    };
    
    window.designerLoadState = function(newState) {
        if (newState.layers) state.layers = newState.layers;
        if (newState.designText) textInput.value = newState.designText;
        if (newState.fontSize) sizeSlider.value = newState.fontSize;
        if (newState.rotation) rotateSlider.value = newState.rotation;
        updateTransform();
    };
    
    window.designerGetLayers = function() {
        return state.layers;
    };
    
    window.designerGetSelectedLayer = function() {
        return state.layers.find(l => l.id === state.selectedLayerId);
    };
    
    window.designerLoadTemplate = function(layers) {
        if (!Array.isArray(layers)) return;
        state.layers = layers;
        // Apply first text layer if exists
        const firstTextLayer = layers.find(l => l.type === 'text');
        if (firstTextLayer) {
            textInput.value = firstTextLayer.text || 'YOUR DESIGN HERE';
            designText.textContent = textInput.value;
            if (firstTextLayer.fontSize) sizeSlider.value = firstTextLayer.fontSize;
            if (firstTextLayer.transform && firstTextLayer.transform.rotation !== undefined) {
                rotateSlider.value = firstTextLayer.transform.rotation;
            }
            updateTransform();
        }
    };
    
    window.designerApplyGradient = function(gradient) {
        // Apply gradient to text using the Gradients enhancement
        if (window.DesignerEnhancements && window.DesignerEnhancements.Gradients) {
            window.DesignerEnhancements.Gradients.applyGradientToText(designText, gradient);
        }
    };
    
    console.log('✅ Designer integration points ready for enhancements');
})();
</script>

{% schema %}
{
  "name": "Custom T-Shirt Studio",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "✨ Custom T-Shirt Designer"
    }
  ],
  "presets": [
    {
      "name": "Custom T-Shirt Studio"
    }
  ]
}
{% endschema %}
