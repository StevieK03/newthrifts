{% comment %}
  Custom T-Shirt Design Studio Section
  A dedicated section for the custom t-shirt designer with amazing visuals
  Preserves all current working controls, JavaScript, and functionality
{% endcomment %}

<div class="custom-tshirt-studio" id="custom-tshirt-studio-{{ section.id }}" style="display: none;">
  <style>
    .custom-tshirt-studio {
      min-height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .studio-container {
      max-width: 1400px;
      width: 100%;
      padding: 40px 20px;
      position: relative;
      z-index: 2;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .studio-header {
      text-align: center;
      margin-bottom: 60px;
      animation: fadeInUp 1s ease-out;
    }
    
    .studio-title {
      font-size: 4rem;
      font-weight: 900;
      color: white;
      margin: 0 0 20px 0;
      text-shadow: 0 4px 20px rgba(0,0,0,0.3);
      background: linear-gradient(45deg, #fff, #f0f8ff, #fff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      animation: titleGlow 3s ease-in-out infinite alternate;
    }
    
    .studio-subtitle {
      font-size: 1.5rem;
      color: rgba(255,255,255,0.9);
      margin: 0 0 30px 0;
      font-weight: 300;
      letter-spacing: 1px;
    }
    
    .studio-description {
      font-size: 1.1rem;
      color: rgba(255,255,255,0.8);
      max-width: 600px;
      margin: 0 auto;
      line-height: 1.6;
    }
    
    .design-workspace {
      background: rgba(255,255,255,0.95);
      border-radius: 24px;
      padding: 40px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.2);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255,255,255,0.2);
      animation: slideInUp 1s ease-out 0.3s both;
      position: relative;
      overflow: hidden;
      width: 100%;
      margin: 0 auto;
    }
    
    .workspace-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 2px solid #f0f0f0;
    }
    
    .workspace-title {
      font-size: 2rem;
      font-weight: 700;
      color: #2d3748;
      margin: 0;
    }
    
    .close-studio-btn {
      background: linear-gradient(135deg, #ff6b6b, #ee5a52);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 50px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(255,107,107,0.4);
    }
    
    .close-studio-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255,107,107,0.6);
    }
    
    .floating-shapes {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      z-index: 1;
    }
    
    .shape {
      position: absolute;
      opacity: 0.1;
      animation: float 6s ease-in-out infinite;
    }
    
    .shape:nth-child(1) {
      top: 20%;
      left: 10%;
      width: 80px;
      height: 80px;
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
      border-radius: 50%;
      animation-delay: 0s;
    }
    
    .shape:nth-child(2) {
      top: 60%;
      right: 15%;
      width: 120px;
      height: 120px;
      background: linear-gradient(45deg, #a8edea, #fed6e3);
      border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
      animation-delay: 2s;
    }
    
    .shape:nth-child(3) {
      bottom: 20%;
      left: 20%;
      width: 60px;
      height: 60px;
      background: linear-gradient(45deg, #ffecd2, #fcb69f);
      border-radius: 50%;
      animation-delay: 4s;
    }
    
    .shape:nth-child(4) {
      top: 40%;
      right: 30%;
      width: 100px;
      height: 100px;
      background: linear-gradient(45deg, #d299c2, #fef9d7);
      border-radius: 20% 80% 80% 20% / 80% 20% 80% 20%;
      animation-delay: 1s;
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes slideInUp {
      from {
        opacity: 0;
        transform: translateY(50px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes titleGlow {
      from {
        filter: brightness(1) drop-shadow(0 0 10px rgba(255,255,255,0.5));
      }
      to {
        filter: brightness(1.2) drop-shadow(0 0 20px rgba(255,255,255,0.8));
      }
    }
    
    @keyframes float {
      0%, 100% {
        transform: translateY(0px) rotate(0deg);
      }
      50% {
        transform: translateY(-20px) rotate(180deg);
      }
    }
    
    .pulse-ring {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 300px;
      height: 300px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      animation: pulse 2s ease-in-out infinite;
    }
    
    @keyframes pulse {
      0% {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
      }
      100% {
        transform: translate(-50%, -50%) scale(1.5);
        opacity: 0;
      }
    }
    
    @media (max-width: 768px) {
      .custom-tshirt-studio {
        overflow-x: hidden;
        max-width: 100vw;
      }
      
      .studio-title {
        font-size: 2.2rem;
        word-wrap: break-word;
        overflow-wrap: break-word;
        line-height: 1.2;
        padding: 0 15px;
      }
      
      .studio-subtitle {
        font-size: 1.1rem;
        padding: 0 15px;
      }
      
      .studio-description {
        font-size: 1rem;
        padding: 0 15px;
      }
      
      .design-workspace {
        padding: 25px 20px;
        margin: 0 10px;
        border-radius: 20px;
        overflow-x: hidden;
        max-width: calc(100% - 20px);
        box-sizing: border-box;
      }
      
      .workspace-header {
        flex-wrap: wrap;
        gap: 15px;
      }
      
      .workspace-title {
        font-size: 1.3rem;
        word-wrap: break-word;
        overflow-wrap: break-word;
        flex: 1 1 100%;
        text-align: center;
      }
      
      .close-studio-btn {
        flex: 0 0 auto;
        margin: 0 auto;
      }
    }

    /* ===== PRESERVE ALL OUR CURRENT BUTTON ANIMATIONS ===== */
    @keyframes upload-royal-flow {
      0% {
        background-position: 0% 50%;
        box-shadow: 0 8px 32px rgba(30, 64, 175, 0.4);
        transform: scale(1);
      }
      25% {
        background-position: 50% 0%;
        box-shadow: 0 10px 36px rgba(59, 130, 246, 0.5);
        transform: scale(1.01);
      }
      50% {
        background-position: 100% 50%;
        box-shadow: 0 12px 40px rgba(29, 78, 216, 0.6);
        transform: scale(1.02);
      }
      75% {
        background-position: 50% 100%;
        box-shadow: 0 10px 36px rgba(59, 130, 246, 0.5);
        transform: scale(1.01);
      }
      100% {
        background-position: 0% 50%;
        box-shadow: 0 8px 32px rgba(30, 64, 175, 0.4);
        transform: scale(1);
      }
    }

    @keyframes upload-royal-glow {
      0%, 100% {
        box-shadow: 0 8px 32px rgba(30, 64, 175, 0.4), 0 0 20px rgba(59, 130, 246, 0.2);
      }
      50% {
        box-shadow: 0 12px 40px rgba(30, 64, 175, 0.6), 0 0 30px rgba(59, 130, 246, 0.4);
      }
    }

    @keyframes sparkle-float {
      0%, 100% {
        transform: translateY(0px) scale(1);
        opacity: 0.8;
      }
      50% {
        transform: translateY(-8px) scale(1.2);
        opacity: 1;
      }
    }

    @keyframes submit-pulse {
      0%, 100% {
        box-shadow: 0 6px 24px rgba(255, 79, 163, 0.4);
        transform: scale(1);
      }
      50% {
        box-shadow: 0 10px 32px rgba(255, 79, 163, 0.6);
        transform: scale(1.02);
      }
    }

    /* Message animations */
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateX(100%);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    @keyframes slideOut {
      from {
        opacity: 1;
        transform: translateX(0);
      }
      to {
        opacity: 0;
        transform: translateX(100%);
      }
    }

    /* Theme-Responsive Size Chart Button */
    @media (prefers-color-scheme: light) {
      #size-chart-toggle-{{ section.id }} {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8) !important;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3) !important;
      }
      
      #size-chart-toggle-{{ section.id }}:hover {
        background: linear-gradient(135deg, #2563eb, #1e40af) !important;
      }
    }

    @media (prefers-color-scheme: dark) {
      #size-chart-toggle-{{ section.id }} {
        background: linear-gradient(135deg, #1e40af, #1e3a8a) !important;
        box-shadow: 0 4px 12px rgba(30, 64, 175, 0.4) !important;
      }
      
      #size-chart-toggle-{{ section.id }}:hover {
        background: linear-gradient(135deg, #1d4ed8, #1e40af) !important;
      }
    }

    /* Manual theme support */
    .light #size-chart-toggle-{{ section.id }},
    [data-theme="light"] #size-chart-toggle-{{ section.id }} {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8) !important;
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3) !important;
    }

    .dark #size-chart-toggle-{{ section.id }},
    [data-theme="dark"] #size-chart-toggle-{{ section.id }} {
      background: linear-gradient(135deg, #1e40af, #1e3a8a) !important;
      box-shadow: 0 4px 12px rgba(30, 64, 175, 0.4) !important;
    }

    /* Dark Mode Support for Size Chart */
    @media (prefers-color-scheme: dark) {
      .size-chart-container {
        background: #1e293b !important;
        border-color: #334155 !important;
      }
      
      .size-chart-container h5 {
        color: #f1f5f9 !important;
      }
      
      .size-chart-table {
        background: #1e293b !important;
        color: #ffffff !important;
      }
      
      .size-chart-table th {
        background: linear-gradient(135deg, #1e40af, #1d4ed8) !important;
        color: white !important;
      }
      
      .size-chart-table td {
        color: #ffffff !important;
        border-color: #475569 !important;
        background: #334155 !important;
      }
      
      .size-chart-table tr:nth-child(even) td {
        background: #475569 !important;
        color: #ffffff !important;
      }
      
      .size-chart-table tr:nth-child(odd) td {
        background: #334155 !important;
        color: #ffffff !important;
      }
      
      .size-chart-table tr td:first-child {
        background: #f8fafc !important;
        color: #1e293b !important;
        font-weight: 600 !important;
      }
      
      .size-chart-container p {
        background: #fbbf24 !important;
        color: #92400e !important;
      }
    }

    /* Additional dark mode support for any dark theme */
    .dark .size-chart-container,
    [data-theme="dark"] .size-chart-container {
      background: #1e293b !important;
      border-color: #334155 !important;
    }

    .dark .size-chart-container h5,
    [data-theme="dark"] .size-chart-container h5 {
      color: #f1f5f9 !important;
    }

    .dark .size-chart-table,
    [data-theme="dark"] .size-chart-table {
      background: #1e293b !important;
      color: #ffffff !important;
    }

    .dark .size-chart-table th,
    [data-theme="dark"] .size-chart-table th {
      background: linear-gradient(135deg, #1e40af, #1d4ed8) !important;
      color: white !important;
    }

    .dark .size-chart-table td,
    [data-theme="dark"] .size-chart-table td {
      color: #ffffff !important;
      border-color: #475569 !important;
      background: #334155 !important;
    }

    .dark .size-chart-table tr:nth-child(even) td,
    [data-theme="dark"] .size-chart-table tr:nth-child(even) td {
      background: #475569 !important;
      color: #ffffff !important;
    }

    .dark .size-chart-table tr:nth-child(odd) td,
    [data-theme="dark"] .size-chart-table tr:nth-child(odd) td {
      background: #334155 !important;
      color: #ffffff !important;
    }

    .dark .size-chart-table tr td:first-child,
    [data-theme="dark"] .size-chart-table tr td:first-child {
      background: #f8fafc !important;
      color: #1e293b !important;
      font-weight: 600 !important;
    }
  </style>
  
  <!-- Floating Background Shapes -->
  <div class="floating-shapes">
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
  </div>
  
  <!-- Pulse Ring Effect -->
  <div class="pulse-ring"></div>
  
  <div class="studio-container">
    <div class="studio-header">
      <h1 class="studio-title">🎨 Custom T-Shirt Studio</h1>
      <p class="studio-subtitle">Design Your Perfect T-Shirt</p>
      <p class="studio-description">
        Create stunning custom t-shirts with our advanced design tools. Upload your artwork, 
        customize colors, adjust positioning, and see your design come to life in real-time.
      </p>
    </div>
    
    <div class="design-workspace">
      <div class="workspace-header">
        <h2 class="workspace-title">Design Workspace</h2>
        <button class="close-studio-btn" onclick="closeCustomStudio()">
          ✕ Close Studio
        </button>
      </div>
      
      <!-- OUR CURRENT WORKING INTERACTIVE MOCKUP CONTENT -->
      <div class="custom-designer-container">
        <div id="nt-mockup-{{ section.id }}" class="nt-mockup theme-responsive-section" style="padding: 60px 0; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
          <div class="container">
            
            <!-- Section Header -->
            <div class="mockup-header" style="text-align: center; margin-bottom: 60px; padding-top: 20px;">
              <h1 style="font-family: 'Bebas Neue', 'Impact', Arial Black, sans-serif; font-size: 48px; margin: 0 0 20px 0; color: #1f2937; text-shadow: 1px 1px 2px rgba(255,255,255,0.8); letter-spacing: 2px; font-weight: 700; text-transform: uppercase;">
                Custom T-Shirt Design
              </h1>
              <p style="font-size: 20px; color: #374151; margin: 0 0 25px 0; max-width: 700px; margin: 0 auto 25px auto; line-height: 1.6; text-shadow: 1px 1px 2px rgba(255,255,255,0.8);">
                Upload your design and create your own custom t-shirt! 
                <br>Drag, resize, and position your artwork perfectly on the print area.
              </p>
            </div>

            <!-- Design Customization Controls Section -->
            <div style="margin: 40px 0; max-width: 1200px; margin-left: auto; margin-right: auto;">
              <p class="canvas-hint-text" style="color: #374151; font-size: 14px; margin-top: 16px; text-align: center;">
                💡 Tip: Drag the design to move it, use scroll wheel to resize, or use the precise controls below
              </p>

              <!-- Design Customization Controls -->
              <div style="text-align: center; margin: 20px 0 16px 0;">
                <h2 class="canvas-controls-title" style="font-size: 24px; font-weight: 600; color: #1f2937; margin: 0 0 8px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.1);">🎛️ Design Customization Controls</h2>
                <p class="canvas-controls-subtitle" style="font-size: 14px; color: #4b5563; margin: 0; text-shadow: 1px 1px 2px rgba(0,0,0,0.05);">Customize your t-shirt design with precision controls</p>
              </div>

              <div class="nt-mockup__controls" style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center; justify-content: center; background: #ffffff; padding: 24px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); border: 1px solid #e5e7eb; margin: 10px 0;">
                    
                    <!-- View Controls -->
                    <div class="nt-mockup__group">
                      <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #374151; margin-right: 12px;">View</span>
                      <div class="nt-mockup__buttons" role="tablist" aria-label="Mockup view" style="display: flex; gap: 8px;">
                        <button class="nt-btn nt-btn--view is-active enhanced-view-btn" data-view="front" aria-selected="true" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #27e1c1, #20b2aa); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(39, 225, 193, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          👕 Front
                        </button>
                        <button class="nt-btn nt-btn--view enhanced-view-btn" data-view="back" aria-selected="false" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); 
                          color: #374151; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          👕 Back
                        </button>
                        <button class="nt-btn nt-btn--view enhanced-view-btn" data-view="hanging" aria-selected="false" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); 
                          color: #374151; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          🏷️ Hanging
                        </button>
                        <button class="nt-btn nt-btn--view enhanced-view-btn" data-view="person1" aria-selected="false" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); 
                          color: #374151; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          👤 Model 1
                        </button>
                        <button class="nt-btn nt-btn--view enhanced-view-btn" data-view="person2" aria-selected="false" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); 
                          color: #374151; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          👤 Model 2
                        </button>
                      </div>
                    </div>

                    <!-- Color Selection -->
                    <div class="nt-mockup__group">
                      <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #374151; margin-right: 12px;">Color</span>
                      <div class="nt-mockup__buttons" style="display: flex; gap: 8px; flex-wrap: wrap;">
                        <button class="nt-btn nt-btn--color enhanced-color-btn" data-color="white" style="
                          padding: 12px 16px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #ffffff, #f8f9fa); 
                          color: #374151; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          ⚪ White
                        </button>
                        <button class="nt-btn nt-btn--color enhanced-color-btn" data-color="black" style="
                          padding: 12px 16px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #000000, #374151); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(0,0,0,0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          ⚫ Black
                        </button>
                        <button class="nt-btn nt-btn--color enhanced-color-btn" data-color="red" style="
                          padding: 12px 16px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #ef4444, #dc2626); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(239, 68, 68, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          🔴 Red
                        </button>
                        <button class="nt-btn nt-btn--color enhanced-color-btn" data-color="blue" style="
                          padding: 12px 16px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #3b82f6, #1d4ed8); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(59, 130, 246, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          🔵 Blue
                        </button>
                      </div>
                    </div>

                    <!-- Enhanced 3D Controls -->
                    <div class="nt-mockup__group" style="background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); padding: 16px; border-radius: 16px; border: 2px solid rgba(255,255,255,0.2); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px);">
                      <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #334155; margin-right: 12px;">🎯 3D Controls</span>
                      <div class="nt-mockup__buttons" style="display: flex; gap: 8px; flex-wrap: wrap;">
                        <button class="nt-btn nt-btn--3d enhanced-3d-btn" id="nt-3d-rotate-{{ section.id }}" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #3b82f6, #1d4ed8); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(59, 130, 246, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          ↺ Rotate
                        </button>
                        <button class="nt-btn nt-btn--zoom enhanced-3d-btn" id="nt-zoom-{{ section.id }}" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #10b981, #059669); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(16, 185, 129, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          🔍 Zoom
                        </button>
                        <button class="nt-btn nt-btn--validate enhanced-3d-btn" id="nt-validate-{{ section.id }}" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #f59e0b, #d97706); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(245, 158, 11, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          ✅ Validate
                        </button>
                        <button class="nt-btn nt-btn--reset enhanced-3d-btn" id="nt-reset-{{ section.id }}" style="
                          padding: 12px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #6b7280, #4b5563); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(107, 114, 128, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                        ">
                          🔄 Reset
                        </button>
                      </div>
                    </div>

                    <!-- Action Buttons - Organized Grid Layout -->
                    <!-- NOTE: Upload, Perfect Fit, and Submit buttons moved below canvas -->
                    <div class="nt-mockup__group">
                      
                      <!-- Zoom Controls -->
                      <div class="nt-mockup__group" style="background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); padding: 16px; border-radius: 16px; border: 2px solid rgba(255,255,255,0.2); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); margin-bottom: 16px;">
                        <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #334155; margin-right: 12px; display: block; margin-bottom: 12px;">🔍 Zoom Controls</span>
                        <div class="nt-mockup__buttons" style="display: flex; gap: 8px; flex-wrap: wrap; justify-content: center;">
                          <button class="nt-btn nt-btn--zoom-out enhanced-zoom-btn" id="nt-zoom-out-{{ section.id }}" style="
                            padding: 12px 16px; 
                            border: 2px solid transparent; 
                            background: linear-gradient(135deg, #ef4444, #dc2626); 
                            color: white; 
                            border-radius: 12px; 
                            font-size: 14px; 
                            font-weight: 600; 
                            cursor: pointer; 
                            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                            box-shadow: 0 4px 16px rgba(239, 68, 68, 0.3);
                            backdrop-filter: blur(10px);
                            -webkit-backdrop-filter: blur(10px);
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            gap: 6px;
                            min-width: 120px;
                          ">
                            🔍- Zoom Out
                          </button>
                          <button class="nt-btn nt-btn--zoom-reset enhanced-zoom-btn" id="nt-zoom-reset-{{ section.id }}" style="
                            padding: 12px 16px; 
                            border: 2px solid transparent; 
                            background: linear-gradient(135deg, #6b7280, #4b5563); 
                            color: white; 
                            border-radius: 12px; 
                            font-size: 14px; 
                            font-weight: 600; 
                            cursor: pointer; 
                            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                            box-shadow: 0 4px 16px rgba(107, 114, 128, 0.3);
                            backdrop-filter: blur(10px);
                            -webkit-backdrop-filter: blur(10px);
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            gap: 6px;
                            min-width: 120px;
                          ">
                            🎯 Reset Zoom
                          </button>
                          <button class="nt-btn nt-btn--zoom-in enhanced-zoom-btn" id="nt-zoom-in-{{ section.id }}" style="
                            padding: 12px 16px; 
                            border: 2px solid transparent; 
                            background: linear-gradient(135deg, #10b981, #059669); 
                            color: white; 
                            border-radius: 12px; 
                            font-size: 14px; 
                            font-weight: 600; 
                            cursor: pointer; 
                            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                            box-shadow: 0 4px 16px rgba(16, 185, 129, 0.3);
                            backdrop-filter: blur(10px);
                            -webkit-backdrop-filter: blur(10px);
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            gap: 6px;
                            min-width: 120px;
                          ">
                            🔍+ Zoom In
                          </button>
                        </div>
                        <div style="margin-top: 8px; text-align: center;">
                          <span id="nt-zoom-level-{{ section.id }}" style="font-size: 12px; color: #6b7280; font-weight: 500;">Zoom: 100%</span>
                        </div>
                      </div>
                      
                      <!-- Action Buttons Grid -->
                      <div class="action-buttons-grid" style="
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 12px;
                        margin-bottom: 12px;
                      ">
                        <button class="nt-btn nt-btn--download" id="nt-download-{{ section.id }}" style="
                          padding: 14px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #10b981, #059669); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(16, 185, 129, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          gap: 8px;
                        ">
                          💾 Download Mockup
                        </button>
                        <button class="nt-btn nt-btn--edit" id="nt-edit-{{ section.id }}" style="
                          padding: 14px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #8b5cf6, #7c3aed); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(139, 92, 246, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          gap: 8px;
                        ">
                          ✏️ Edit Design
                        </button>
                      </div>
                      
                      <!-- Primary Action Buttons -->
                      <div class="primary-actions" style="
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 12px;
                        margin-bottom: 12px;
                      ">
                        <button class="nt-btn nt-btn--placement" id="nt-toggle-guide-{{ section.id }}" style="
                          padding: 14px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #f59e0b, #d97706); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(245, 158, 11, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          gap: 8px;
                        ">
                          📐 <span id="nt-guide-text-{{ section.id }}">Show</span> Placement Guide
                        </button>
                        <button class="nt-btn nt-btn--remove" id="nt-remove-{{ section.id }}" style="
                          padding: 14px 20px; 
                          border: 2px solid transparent; 
                          background: linear-gradient(135deg, #ef4444, #dc2626); 
                          color: white; 
                          border-radius: 16px; 
                          font-size: 14px; 
                          font-weight: 600; 
                          cursor: pointer; 
                          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                          box-shadow: 0 4px 16px rgba(239, 68, 68, 0.3);
                          backdrop-filter: blur(10px);
                          -webkit-backdrop-filter: blur(10px);
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          gap: 8px;
                        ">
                          🗑️ Remove Design
                        </button>
                      </div>
                      
                      <!-- Perfect Fit and Submit Request buttons moved below canvas -->
                    </div>
                  </div>
                </div>
            <!-- END Design Customization Controls Section -->

            <!-- Size Chart - Collapsible -->
            <div class="size-chart-container" style="margin: 20px auto; max-width: 1200px; display: flex; flex-direction: column; align-items: center; text-align: center;">
              <button id="size-chart-toggle-{{ section.id }}" style="width: 100%; padding: 16px; background: linear-gradient(135deg, #0ea5e9, #0284c7); color: white; border: none; border-radius: 12px; font-size: 16px; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; position: relative; box-shadow: 0 4px 12px rgba(14, 165, 233, 0.3); transition: all 0.3s ease;">
                <span>📏 Size Chart</span>
                <span id="size-chart-icon-{{ section.id }}" style="position: absolute; right: 16px; font-size: 18px; transition: transform 0.3s ease;">▼</span>
              </button>
              <div id="size-chart-content-{{ section.id }}" style="display: none; margin-top: 16px; padding: 16px; background: #f0f9ff; border-radius: 12px; border: 1px solid #0ea5e9; width: 100%;">
              <div style="overflow-x: auto; display: flex; justify-content: center;">
                <table class="size-chart-table" style="border-collapse: collapse; font-size: 12px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); min-width: 600px;">
                  <thead>
                    <tr style="background: linear-gradient(135deg, #0ea5e9, #0284c7); color: white;">
                      <th style="padding: 8px; text-align: left; font-weight: 600;">Size</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">XS</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">S</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">M</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">L</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">XL</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">2XL</th>
                      <th style="padding: 8px; text-align: center; font-weight: 600;">3XL</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr style="border-bottom: 1px solid #e5e7eb;">
                      <td style="padding: 8px; font-weight: 600; background: #f9fafb;">Chest (inches)</td>
                      <td style="padding: 8px; text-align: center;">32-34</td>
                      <td style="padding: 8px; text-align: center;">35-37</td>
                      <td style="padding: 8px; text-align: center;">38-40</td>
                      <td style="padding: 8px; text-align: center;">41-43</td>
                      <td style="padding: 8px; text-align: center;">44-46</td>
                      <td style="padding: 8px; text-align: center;">47-49</td>
                      <td style="padding: 8px; text-align: center;">50-52</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #e5e7eb;">
                      <td style="padding: 8px; font-weight: 600; background: #f9fafb;">Length (inches)</td>
                      <td style="padding: 8px; text-align: center;">26</td>
                      <td style="padding: 8px; text-align: center;">27</td>
                      <td style="padding: 8px; text-align: center;">28</td>
                      <td style="padding: 8px; text-align: center;">29</td>
                      <td style="padding: 8px; text-align: center;">30</td>
                      <td style="padding: 8px; text-align: center;">31</td>
                      <td style="padding: 8px; text-align: center;">32</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #e5e7eb;">
                      <td style="padding: 8px; font-weight: 600; background: #f9fafb;">Sleeve Length</td>
                      <td style="padding: 8px; text-align: center;">8</td>
                      <td style="padding: 8px; text-align: center;">8.5</td>
                      <td style="padding: 8px; text-align: center;">9</td>
                      <td style="padding: 8px; text-align: center;">9.5</td>
                      <td style="padding: 8px; text-align: center;">10</td>
                      <td style="padding: 8px; text-align: center;">10.5</td>
                      <td style="padding: 8px; text-align: center;">11</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; font-weight: 600; background: #f9fafb;">Fit</td>
                      <td style="padding: 8px; text-align: center;">Slim</td>
                      <td style="padding: 8px; text-align: center;">Slim</td>
                      <td style="padding: 8px; text-align: center;">Regular</td>
                      <td style="padding: 8px; text-align: center;">Regular</td>
                      <td style="padding: 8px; text-align: center;">Regular</td>
                      <td style="padding: 8px; text-align: center;">Relaxed</td>
                      <td style="padding: 8px; text-align: center;">Relaxed</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <div style="margin-top: 16px; padding: 12px; background: #fef3c7; border-radius: 8px; border-left: 4px solid #f59e0b; text-align: center;">
                <p style="margin: 0; color: #92400e; font-size: 14px; font-weight: 500;">
                  <strong>💡 Size Guide Tip:</strong> Measure your chest at the fullest point, keeping the tape measure parallel to the ground. If you're between sizes, we recommend sizing up for a more comfortable fit.
                </p>
              </div>
              <div style="margin-top: 12px; padding: 12px; background: #ecfdf5; border-radius: 8px; border-left: 4px solid #10b981; text-align: center;">
                <p style="margin: 0; color: #065f46; font-size: 14px;">
                  <strong>📐 How to Measure:</strong>
                </p>
                <ul style="margin: 8px 0 0 0; padding-left: 20px; color: #065f46; font-size: 13px; text-align: left; display: inline-block;">
                  <li><strong>Chest:</strong> Measure around the fullest part of your chest</li>
                  <li><strong>Length:</strong> Measure from shoulder to bottom hem</li>
                  <li><strong>Sleeve:</strong> Measure from shoulder to wrist</li>
                </ul>
              </div>
              </div>
            </div>

            <!-- Enhanced Preview Stage -->
            <div class="nt-mockup__stage" style="width: 100%; display: grid; place-items: center; margin-top: 60px !important; margin-bottom: 100px !important; padding: 0 20px;">
                <div class="nt-mockup__canvas" 
                     id="nt-mockup-canvas-{{ section.id }}"
                     style="
                       position: relative;
                       width: min(1400px, 100%);
                       max-width: 98vw;
                       aspect-ratio: 1;
                       background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                       border-radius: 20px;
                       overflow: visible;
                       box-shadow: 0 25px 80px rgba(102, 126, 234, 0.3), 0 10px 30px rgba(0,0,0,0.2);
                       padding: 40px;
                       --overlay-top: 45%;
                       --overlay-left: 25%;
                       --overlay-width: 60%;
                       --overlay-height: 65%;
                       --overlay-rotate: 0deg;
                       overflow: hidden;
                       backdrop-filter: blur(10px);
                       -webkit-backdrop-filter: blur(10px);
                     ">
                    
                    <!-- T-shirt Mockup Container -->
                    <div style="position: relative; width: 100%; aspect-ratio: 1 / 1; cursor: grab;">
                  
                      <!-- Base Mockup (swapped by JS) -->
                      <img
                        id="nt-base-{{ section.id }}"
                        class="nt-mockup__base"
                        src="{{ 'tshirt-view.png' | asset_url }}"
                        alt="T-shirt mockup"
                        loading="eager"
                        decoding="async"
                        style="position: absolute; inset: 0; width: 100%; height: 100%; object-fit: contain; pointer-events: none;"
                        onerror="console.error('❌ Failed to load t-shirt image:', this.src);"
                        onload="console.log('✅ T-shirt image loaded:', this.src);"
                      >
                    
                    <!-- Debug assets (hidden) -->
                    <div id="debug-assets-{{ section.id }}" style="position: absolute; top: -100px; left: -100px; width: 1px; height: 1px; overflow: hidden;">
                      <img src="{{ 'tshirt-view.png' | asset_url }}" onload="console.log('✅ Direct asset test - tshirt-view.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - tshirt-view.png failed:', this.src);">
                      <img src="{{ 'Girl-Model.png' | asset_url }}" onload="console.log('✅ Direct asset test - Girl-Model.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - Girl-Model.png failed:', this.src);">
                      <img src="{{ 'Women-side.png' | asset_url }}" onload="console.log('✅ Direct asset test - Women-side.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - Women-side.png failed:', this.src);">
                    </div>
                    
                    <!-- Dynamic Design Overlay - Aligned with print area -->
                    <div
                      id="nt-overlay-{{ section.id }}"
                      class="nt-mockup__overlay"
                      style="position: absolute; width: var(--overlay-width); height: var(--overlay-height); left: 50%; top: var(--overlay-top); transform: translateX(-50%) rotate(var(--overlay-rotate)); inset: auto; display: flex; align-items: center; justify-content: center; cursor: grab; transition: all 0.1s ease; border: 2px dashed rgba(39, 225, 193, 0.3); border-radius: 8px; background: rgba(39, 225, 193, 0.05);"
                    >
                      <span id="nt-design-text-{{ section.id }}" 
                            style="font-family: 'Bebas Neue', sans-serif; font-size: 32px; font-weight: bold; color: #000000; text-align: center; white-space: nowrap; user-select: none; text-shadow: 1px 1px 2px rgba(255,255,255,0.8); pointer-events: none;">
                        Your Design Here
                      </span>
                      
                      <!-- Drag Handle (only visible when dragging) -->
                      <div id="nt-drag-handle-{{ section.id }}" 
                           style="position: absolute; top: -8px; right: -8px; width: 16px; height: 16px; background: #27e1c1; border: 2px solid white; border-radius: 50%; cursor: grab; display: none; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">
                      </div>
                      
                      <!-- Enhanced Resize Handles - All Directions (Hidden by default, shown when selected) -->
                      <!-- Top-Left -->
                      <div class="resize-handle" data-direction="nw" 
                           style="position: absolute; top: -15px; left: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: nw-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from top-left">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Top-Right -->
                      <div class="resize-handle" data-direction="ne" 
                           style="position: absolute; top: -15px; right: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: ne-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from top-right">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Bottom-Left -->
                      <div class="resize-handle" data-direction="sw" 
                           style="position: absolute; bottom: -15px; left: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: sw-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from bottom-left">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Bottom-Right -->
                      <div class="resize-handle" data-direction="se" 
                           style="position: absolute; bottom: -15px; right: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: se-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from bottom-right">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Top Edge -->
                      <div class="resize-handle" data-direction="n" 
                           style="position: absolute; top: -15px; left: 50%; transform: translateX(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: n-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from top">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Bottom Edge -->
                      <div class="resize-handle" data-direction="s" 
                           style="position: absolute; bottom: -15px; left: 50%; transform: translateX(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: s-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from bottom">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Left Edge -->
                      <div class="resize-handle" data-direction="w" 
                           style="position: absolute; left: -15px; top: 50%; transform: translateY(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: w-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from left">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                      
                      <!-- Right Edge -->
                      <div class="resize-handle" data-direction="e" 
                           style="position: absolute; right: -15px; top: 50%; transform: translateY(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: e-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
                           title="Resize from right">
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
                      </div>
                    </div>
                    
                    <!-- Close T-shirt Mockup Container -->
                    </div>
                </div>
            </div>
            
            <!-- 3-Step Workflow Section - Below Canvas -->
            <div class="canvas-action-buttons workflow-steps" style="
              display: flex;
              flex-direction: column;
              align-items: center;
              gap: 32px;
              margin-top: 50px;
              max-width: 650px;
              margin-left: auto;
              margin-right: auto;
              padding: 0 20px;
            ">
              
              <!-- Step 1: Upload Your Design -->
              <div class="workflow-step step-1" style="
                width: 100%;
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
              ">
                <div class="step-label" style="
                  font-size: 1rem;
                  font-weight: 700;
                  color: #667eea;
                  text-transform: uppercase;
                  letter-spacing: 1.5px;
                  margin-bottom: 12px;
                  display: flex;
                  align-items: center;
                  gap: 8px;
                ">
                  <span style="
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    color: white;
                    width: 32px;
                    height: 32px;
                    border-radius: 50%;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: 800;
                    font-size: 16px;
                    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
                  ">1</span>
                  <span style="background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">Step 1</span>
                </div>
                
                <button class="nt-btn nt-btn--upload upload-hero-btn" id="nt-upload-{{ section.id }}" style="
                  width: 100%;
                  padding: 20px 40px; 
                  border: 2px solid transparent; 
                  background: linear-gradient(135deg, #1e40af, #3b82f6, #1d4ed8, #1e40af); 
                  background-size: 300% 300%;
                  color: white; 
                  border-radius: 20px; 
                  font-size: 18px; 
                  font-weight: 700; 
                  cursor: pointer; 
                  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                  box-shadow: 0 8px 32px rgba(30, 64, 175, 0.4);
                  backdrop-filter: blur(10px);
                  -webkit-backdrop-filter: blur(10px);
                  position: relative;
                  overflow: hidden;
                  text-transform: uppercase;
                  letter-spacing: 1px;
                  animation: upload-royal-flow 3s ease-in-out infinite;
                  margin-bottom: 10px;
                ">
                  <span style="position: relative; z-index: 2; display: flex; align-items: center; justify-content: center; gap: 10px;">
                    📁 Upload Your Design
                    <span class="upload-sparkle" style="
                      position: absolute;
                      width: 4px;
                      height: 4px;
                      background: rgba(255, 255, 255, 0.8);
                      border-radius: 50%;
                      animation: sparkle-float 2s ease-in-out infinite;
                    "></span>
                    <span class="upload-sparkle" style="
                      position: absolute;
                      width: 3px;
                      height: 3px;
                      background: rgba(255, 255, 255, 0.6);
                      border-radius: 50%;
                      animation: sparkle-float 2s ease-in-out infinite 0.5s;
                    "></span>
                  </span>
                </button>
                
                <p class="step-description" style="
                  font-size: 0.9rem;
                  color: #64748b;
                  line-height: 1.6;
                  margin: 0;
                  max-width: 90%;
                ">
                  Upload your custom artwork or image to preview it on the shirt.
                </p>
              </div>
              
              <!-- Step 2: Perfect Fit -->
              <div class="workflow-step step-2" style="
                width: 100%;
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
              ">
                <div class="step-label" style="
                  font-size: 1rem;
                  font-weight: 700;
                  color: #06b6d4;
                  text-transform: uppercase;
                  letter-spacing: 1.5px;
                  margin-bottom: 12px;
                  display: flex;
                  align-items: center;
                  gap: 8px;
                ">
                  <span style="
                    background: linear-gradient(135deg, #06b6d4, #0891b2);
                    color: white;
                    width: 32px;
                    height: 32px;
                    border-radius: 50%;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: 800;
                    font-size: 16px;
                    box-shadow: 0 4px 12px rgba(6, 182, 212, 0.4);
                  ">2</span>
                  <span style="background: linear-gradient(135deg, #06b6d4, #0891b2); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">Step 2</span>
                </div>
                
                <button class="nt-btn nt-btn--perfect-fit" id="nt-perfect-fit-btn-{{ section.id }}" style="
                  width: 100%;
                  padding: 18px 36px; 
                  border: 2px solid transparent; 
                  background: linear-gradient(135deg, #06b6d4, #0891b2); 
                  color: white; 
                  border-radius: 18px; 
                  font-size: 16px; 
                  font-weight: 600; 
                  cursor: pointer; 
                  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                  box-shadow: 0 6px 24px rgba(6, 182, 212, 0.3);
                  backdrop-filter: blur(10px);
                  -webkit-backdrop-filter: blur(10px);
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  gap: 8px;
                  margin-bottom: 10px;
                ">
                  ✨ Perfect Fit
                </button>
                
                <p class="step-description" style="
                  font-size: 0.9rem;
                  color: #64748b;
                  line-height: 1.6;
                  margin: 0;
                  max-width: 90%;
                ">
                  Adjust your design to align perfectly within the print area.
                </p>
              </div>
              
              <!-- Step 3: Submit Request -->
              <div class="workflow-step step-3" style="
                width: 100%;
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
              ">
                <div class="step-label" style="
                  font-size: 1rem;
                  font-weight: 700;
                  color: #dc2626;
                  text-transform: uppercase;
                  letter-spacing: 1.5px;
                  margin-bottom: 12px;
                  display: flex;
                  align-items: center;
                  gap: 8px;
                ">
                  <span style="
                    background: linear-gradient(135deg, #dc2626, #ef4444);
                    color: white;
                    width: 32px;
                    height: 32px;
                    border-radius: 50%;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: 800;
                    font-size: 16px;
                    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.4);
                  ">3</span>
                  <span style="background: linear-gradient(135deg, #dc2626, #ef4444); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">Step 3</span>
                </div>
                
                <button class="nt-btn nt-btn--submit-request submit-request-hero-btn" id="nt-submit-request-btn-{{ section.id }}" style="
                  width: 100%;
                  padding: 20px 40px; 
                  border: 2px solid transparent; 
                  background: linear-gradient(135deg, #dc2626, #ef4444, #dc2626); 
                  background-size: 200% 200%;
                  color: white; 
                  border-radius: 20px; 
                  font-size: 18px; 
                  font-weight: 700; 
                  cursor: pointer; 
                  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
                  box-shadow: 0 8px 32px rgba(220, 38, 38, 0.4);
                  backdrop-filter: blur(10px);
                  -webkit-backdrop-filter: blur(10px);
                  position: relative;
                  overflow: hidden;
                  text-transform: uppercase;
                  letter-spacing: 1px;
                  animation: submit-pulse 2s ease-in-out infinite;
                  margin-bottom: 10px;
                ">
                  <span style="position: relative; z-index: 2; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    🚀 Submit Request
                  </span>
                  <div style="
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                    transition: left 0.5s;
                  "></div>
                </button>
                
                <p class="step-description" style="
                  font-size: 0.9rem;
                  color: #64748b;
                  line-height: 1.6;
                  margin: 0;
                  max-width: 90%;
                ">
                  Send your finalized design for review or printing.
                </p>
              </div>
              
            </div>
            
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function closeCustomStudio() {
  // Hide the custom studio section
  const studio = document.getElementById('custom-tshirt-studio-{{ section.id }}');
  if (studio) {
    studio.style.display = 'none';
  }
  
  // Show the main page content again
  const mainContent = document.querySelector('.main-content');
  if (mainContent) {
    mainContent.style.display = 'block';
  }
  
  // Scroll to top
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Show custom studio function (called from home page button)
window.openCustomDesignStudio = function() {
  // Hide main content
  const mainContent = document.querySelector('.main-content');
  if (mainContent) {
    mainContent.style.display = 'none';
  }
  
  // Show the custom studio
  const studio = document.getElementById('custom-tshirt-studio-{{ section.id }}');
  if (studio) {
    studio.style.display = 'block';
    studio.scrollIntoView({ behavior: 'smooth' });
    
    // Initialize the mockup and size chart after the studio is visible
    setTimeout(() => {
      console.log('🎨 Studio opened, initializing mockup and size chart...');
      initializeMockup();
      
      // Initialize size chart
      if (typeof initializeSizeChart === 'function') {
        initializeSizeChart();
      } else {
        console.error('❌ initializeSizeChart function not found');
      }
    }, 200);
  }
};

// Also make it available as showCustomStudio for compatibility
window.showCustomStudio = window.openCustomDesignStudio;

// PRESERVE ALL OUR CURRENT WORKING JAVASCRIPT FUNCTIONALITY
function initializeMockup() {
  const mockup = {
    // Mockup images mapping - using tshirt-view.png as the base template
    mockupImages: {
      front: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        red: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      back: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        red: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      hanging: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        red: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      person1: {
        white: "{{ 'Girl-Model.png' | asset_url }}",
        black: "{{ 'Girl-Model.png' | asset_url }}",
        red: "{{ 'Girl-Model.png' | asset_url }}",
        blue: "{{ 'Girl-Model.png' | asset_url }}"
      },
      person2: {
        white: "{{ 'Women-side.png' | asset_url }}",
        black: "{{ 'Women-side.png' | asset_url }}",
        red: "{{ 'Women-side.png' | asset_url }}",
        blue: "{{ 'Women-side.png' | asset_url }}"
      }
    },
    
    // Current base mockup image - using tshirt-view.png as the default template
    baseMockup: "{{ 'tshirt-view.png' | asset_url }}",

    // Current design state
    designState: {
      text: 'Your Design Here',
      fontSize: 32,
      fontFamily: "'Bebas Neue', sans-serif",
      textColor: '#000000',
      shirtColor: 'white',
      effect: 'none'
    },

    // Current view state
    state: { view: "front", color: "white" },

    // Enhanced placement state - aligned with print area
    placementState: {
      topPct: 30,   // Adjusted to match print area top
      leftPct: 50,  // Centered horizontally
      widthPct: 50, // Adjusted to match print area width
      heightPct: 65, // Adjusted to match print area height (rectangular)
      rotateDeg: 0,
      dragging: false,
      resizing: false,
      resizeDirection: 'se',
      lastX: 0,
      lastY: 0,
      hasUploadedDesign: false,
      designSelected: false,
      zoomLevel: 1.0, // Zoom level (1.0 = 100%)
      baseWidthPct: 50, // Original width for zoom calculations
      baseHeightPct: 65 // Original height for zoom calculations
    },

    init() {
      console.log('🎯 Initializing Custom Studio Mockup...');
      this.bindEvents();
      this.bindDragResize();
      this.bindMouseWheelResize();
      this.bindKeyboardShortcuts();
      this.bindZoomControls();
      this.updateBase();
      this.updateDesign();
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.updateZoomLevelDisplay();
      console.log('✅ Custom Studio Mockup initialized');
    },

    setActive(buttons, activeValue) {
      buttons.forEach(btn => {
        btn.classList.remove('is-active');
        if (btn.dataset.view === activeValue || btn.dataset.color === activeValue) {
          btn.classList.add('is-active');
        }
      });
    },

    updateBase() {
      const baseImg = document.getElementById('nt-base-{{ section.id }}');
      if (!baseImg) return;
      
      const imageSrc = this.mockupImages[this.state.view]?.[this.state.color] || this.baseMockup;
      baseImg.src = imageSrc;
    },

    updateDesign() {
      // Update design display if needed
    },

    updatePlacementDisplay() {
      // Update placement display controls
      const topSlider = document.getElementById(`nt-placement-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-placement-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-placement-width-{{ section.id }}`);
      const heightSlider = document.getElementById(`nt-placement-height-{{ section.id }}`);
      const rotationSlider = document.getElementById(`nt-placement-rotation-{{ section.id }}`);

      if (topSlider) topSlider.value = this.placementState.topPct;
      if (leftSlider) leftSlider.value = this.placementState.leftPct;
      if (widthSlider) widthSlider.value = this.placementState.widthPct;
      if (heightSlider) heightSlider.value = this.placementState.heightPct;
      if (rotationSlider) rotationSlider.value = this.placementState.rotateDeg;
    },

    updateDesignPosition() {
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (!overlay) return;

      // Apply the placement state to the overlay
      overlay.style.top = this.placementState.topPct + '%';
      overlay.style.left = this.placementState.leftPct + '%';
      overlay.style.width = this.placementState.widthPct + '%';
      overlay.style.height = this.placementState.heightPct + '%';
      overlay.style.transform = `translateX(-50%) rotate(${this.placementState.rotateDeg}deg)`;
    },

    selectDesign() {
      this.placementState.designSelected = true;
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (overlay) {
        overlay.style.borderColor = '#3b82f6';
        overlay.style.boxShadow = '0 0 0 2px rgba(59, 130, 246, 0.3)';
        
        // Show resize handles
        const resizeHandles = overlay.querySelectorAll('.resize-handle');
        resizeHandles.forEach(handle => {
          handle.style.display = 'block';
        });
      }
    },

    deselectDesign() {
      this.placementState.designSelected = false;
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (overlay) {
        overlay.style.borderColor = 'rgba(39, 225, 193, 0.3)';
        overlay.style.boxShadow = 'inset 0 4px 12px rgba(0, 0, 0, 0.1)';
        
        // Hide resize handles
        const resizeHandles = overlay.querySelectorAll('.resize-handle');
        resizeHandles.forEach(handle => {
          handle.style.display = 'none';
        });
      }
    },

    startDrag(e) {
      this.placementState.dragging = true;
      this.placementState.lastX = e.clientX;
      this.placementState.lastY = e.clientY;
      
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (overlay) {
        overlay.style.cursor = 'grabbing';
      }
      
      document.addEventListener('mousemove', this.handleDrag);
      document.addEventListener('mouseup', this.stopDrag);
    },

    handleDrag(e) {
      if (!this.placementState.dragging) return;
      
      const deltaX = e.clientX - this.placementState.lastX;
      const deltaY = e.clientY - this.placementState.lastY;
      
      const canvas = document.getElementById('nt-mockup-canvas-{{ section.id }}');
      if (canvas) {
        const rect = canvas.getBoundingClientRect();
        const deltaXPercent = (deltaX / rect.width) * 100;
        const deltaYPercent = (deltaY / rect.height) * 100;
        
        this.placementState.leftPct += deltaXPercent;
        this.placementState.topPct += deltaYPercent;
        
        // Constrain to canvas bounds
        this.placementState.leftPct = Math.max(0, Math.min(100, this.placementState.leftPct));
        this.placementState.topPct = Math.max(0, Math.min(100, this.placementState.topPct));
        
        this.updateDesignPosition();
      }
      
      this.placementState.lastX = e.clientX;
      this.placementState.lastY = e.clientY;
    },

    stopDrag() {
      this.placementState.dragging = false;
      
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (overlay) {
        overlay.style.cursor = 'grab';
      }
      
      document.removeEventListener('mousemove', this.handleDrag);
      document.removeEventListener('mouseup', this.stopDrag);
    },

    startResize(e, direction) {
      this.placementState.resizing = true;
      this.placementState.resizeDirection = direction;
      this.placementState.lastX = e.clientX;
      this.placementState.lastY = e.clientY;

      const handleResize = (e) => {
        if (!this.placementState.resizing) return;
        
        const deltaX = e.clientX - this.placementState.lastX;
        const deltaY = e.clientY - this.placementState.lastY;
          
        this.resizeDesignByDirection(direction, deltaX, deltaY);
        
        this.placementState.lastX = e.clientX;
        this.placementState.lastY = e.clientY;
      };

      const stopResize = () => {
        this.placementState.resizing = false;
        document.removeEventListener('mousemove', handleResize);
        document.removeEventListener('mouseup', stopResize);
      };

      document.addEventListener('mousemove', handleResize);
      document.addEventListener('mouseup', stopResize);
    },

    resizeDesignByDirection(direction, deltaX, deltaY) {
      const sensitivity = 0.5;
      
      switch (direction) {
        case 'nw':
          this.placementState.topPct += deltaY * sensitivity;
          this.placementState.leftPct += deltaX * sensitivity;
          this.placementState.widthPct -= deltaX * sensitivity;
          this.placementState.heightPct -= deltaY * sensitivity;
          break;
        case 'ne':
          this.placementState.topPct += deltaY * sensitivity;
          this.placementState.widthPct += deltaX * sensitivity;
          this.placementState.heightPct -= deltaY * sensitivity;
          break;
        case 'sw':
          this.placementState.leftPct += deltaX * sensitivity;
          this.placementState.widthPct -= deltaX * sensitivity;
          this.placementState.heightPct += deltaY * sensitivity;
          break;
        case 'se':
          this.placementState.widthPct += deltaX * sensitivity;
          this.placementState.heightPct += deltaY * sensitivity;
          break;
        case 'n':
          this.placementState.topPct += deltaY * sensitivity;
          this.placementState.heightPct -= deltaY * sensitivity;
          break;
        case 's':
          this.placementState.heightPct += deltaY * sensitivity;
          break;
        case 'w':
          this.placementState.leftPct += deltaX * sensitivity;
          this.placementState.widthPct -= deltaX * sensitivity;
          break;
        case 'e':
          this.placementState.widthPct += deltaX * sensitivity;
          break;
      }

      // Constrain values
      this.placementState.topPct = Math.max(0, Math.min(100, this.placementState.topPct));
      this.placementState.leftPct = Math.max(0, Math.min(100, this.placementState.leftPct));
      this.placementState.widthPct = Math.max(10, Math.min(90, this.placementState.widthPct));
      this.placementState.heightPct = Math.max(10, Math.min(90, this.placementState.heightPct));
        
      this.updatePlacementDisplay();
      this.updateDesignPosition();
    },

    // Enhanced resize functionality for easier use
    resizeDesign(delta) {
      this.placementState.widthPct += delta;
      this.placementState.heightPct += delta;
      
      // Constrain values
      this.placementState.widthPct = Math.max(10, Math.min(90, this.placementState.widthPct));
      this.placementState.heightPct = Math.max(10, Math.min(90, this.placementState.heightPct));
      
      this.updatePlacementDisplay();
      this.updateDesignPosition();
    },

    // Add mouse wheel resizing for easier control
    bindMouseWheelResize() {
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (!overlay) return;

      let isOverOverlay = false;
      
      overlay.addEventListener('mouseenter', () => {
        isOverOverlay = true;
      });
      
      overlay.addEventListener('mouseleave', () => {
        isOverOverlay = false;
      });

      // Mouse wheel resize - ONLY when hovering over the overlay
      document.addEventListener('wheel', (e) => {
        if (isOverOverlay && this.placementState.hasUploadedDesign) {
          e.preventDefault();
          // Reduced sensitivity for better control
          const delta = e.deltaY > 0 ? -1 : 1;
          this.resizeDesign(delta);
        }
      }, { passive: false });
    },

    // Add keyboard shortcuts for precise control
    bindKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Arrow key movement only works with uploaded design
        const hasDesign = this.placementState.hasUploadedDesign && this.placementState.designSelected;
        
        // Zoom shortcuts work always
        if (e.key === '+' || e.key === '=' || e.key === '-' || (e.key === '0' && e.shiftKey)) {
          e.preventDefault();
          switch (e.key) {
            case '+':
            case '=':
              if (e.shiftKey) {
                this.zoomIn(); // Shift+Plus = Canvas Zoom In
              } else if (hasDesign) {
                this.resizeDesign(1); // Regular Plus = Resize Design
              }
              break;
            case '-':
              if (e.shiftKey) {
                this.zoomOut(); // Shift+Minus = Canvas Zoom Out
              } else if (hasDesign) {
                this.resizeDesign(-1); // Regular Minus = Resize Design
              }
              break;
            case '0':
              if (e.shiftKey) {
                this.resetZoom(); // Shift+0 = Reset Canvas Zoom
              }
              break;
          }
          return;
        }
        
        // Arrow key movement requires uploaded design
        if (!hasDesign) return;
        
        // Ultra-precise movement with different step sizes
        let step = 0.5; // Default: ultra-precise (0.5px)
        if (e.shiftKey) step = 2; // Shift: medium steps (2px)
        if (e.ctrlKey) step = 0.1; // Ctrl: micro-precise (0.1px)
        if (e.shiftKey && e.ctrlKey) step = 5; // Shift+Ctrl: large steps (5px)
        
        switch (e.key) {
          case 'ArrowUp':
            e.preventDefault();
            this.placementState.topPct = Math.max(0, this.placementState.topPct - step);
            this.updatePlacementDisplay();
            this.updateDesignPosition();
            this.showMessage(`⬆️ Design moved up ${step}px`, 'info');
            break;
          case 'ArrowDown':
            e.preventDefault();
            this.placementState.topPct = Math.min(100, this.placementState.topPct + step);
            this.updatePlacementDisplay();
            this.updateDesignPosition();
            this.showMessage(`⬇️ Design moved down ${step}px`, 'info');
            break;
          case 'ArrowLeft':
            e.preventDefault();
            this.placementState.leftPct = Math.max(0, this.placementState.leftPct - step);
            this.updatePlacementDisplay();
            this.updateDesignPosition();
            this.showMessage(`⬅️ Design moved left ${step}px`, 'info');
            break;
          case 'ArrowRight':
            e.preventDefault();
            this.placementState.leftPct = Math.min(100, this.placementState.leftPct + step);
            this.updatePlacementDisplay();
            this.updateDesignPosition();
            this.showMessage(`➡️ Design moved right ${step}px`, 'info');
            break;
        }
      });
    },

    // Zoom functionality for design studio - zooms the entire canvas view
    zoomIn() {
      const newZoom = Math.min(this.placementState.zoomLevel + 0.2, 3.0); // Max 300%
      this.setZoom(newZoom);
      this.showMessage(`🔍+ Canvas zoomed in to ${Math.round(newZoom * 100)}%`, 'success');
    },

    zoomOut() {
      const newZoom = Math.max(this.placementState.zoomLevel - 0.2, 0.2); // Min 20%
      this.setZoom(newZoom);
      this.showMessage(`🔍- Canvas zoomed out to ${Math.round(newZoom * 100)}%`, 'success');
    },

    resetZoom() {
      this.setZoom(1.0);
      this.showMessage('🎯 Canvas zoom reset to 100%', 'success');
    },

    setZoom(zoomLevel) {
      this.placementState.zoomLevel = zoomLevel;
      
      // Apply zoom to the entire canvas container
      const canvas = document.getElementById('nt-mockup-canvas-{{ section.id }}');
      const mockupContainer = document.getElementById('nt-mockup-{{ section.id }}');
      
      if (canvas && mockupContainer) {
        // Apply CSS transform to zoom the entire canvas with smooth transition
        canvas.style.transition = 'transform 0.3s ease, border-color 0.3s ease';
        canvas.style.transform = `scale(${zoomLevel})`;
        canvas.style.transformOrigin = 'center center';
        
        // Adjust container size to accommodate zoom
        const containerPadding = 20; // Extra space around zoomed canvas
        mockupContainer.style.padding = `${containerPadding}px`;
        
        // Update canvas container to show zoom level visually
        canvas.style.border = `3px solid ${zoomLevel > 1 ? '#10b981' : zoomLevel < 1 ? '#ef4444' : '#6b7280'}`;
        canvas.style.borderRadius = '12px';
        
        // Add zoom indicator overlay
        this.updateZoomIndicator(zoomLevel);
      }
      
      // Update display
      this.updateZoomLevelDisplay();
    },

    updateZoomIndicator(zoomLevel) {
      // Remove existing zoom indicator
      const existingIndicator = document.getElementById('nt-zoom-indicator-{{ section.id }}');
      if (existingIndicator) {
        existingIndicator.remove();
      }
      
      // Add zoom indicator overlay
      const canvas = document.getElementById('nt-mockup-canvas-{{ section.id }}');
      if (canvas && zoomLevel !== 1.0) {
        const indicator = document.createElement('div');
        indicator.id = 'nt-zoom-indicator-{{ section.id }}';
        indicator.style.cssText = `
          position: absolute;
          top: 10px;
          right: 10px;
          background: ${zoomLevel > 1 ? 'rgba(16, 185, 129, 0.9)' : 'rgba(239, 68, 68, 0.9)'};
          color: white;
          padding: 8px 12px;
          border-radius: 20px;
          font-size: 12px;
          font-weight: 600;
          z-index: 1000;
          box-shadow: 0 4px 12px rgba(0,0,0,0.2);
          backdrop-filter: blur(10px);
          -webkit-backdrop-filter: blur(10px);
        `;
        indicator.textContent = `${Math.round(zoomLevel * 100)}%`;
        canvas.appendChild(indicator);
        
        // Auto-hide indicator after 3 seconds
        setTimeout(() => {
          if (indicator.parentNode) {
            indicator.style.opacity = '0';
            indicator.style.transition = 'opacity 0.5s ease';
            setTimeout(() => {
              if (indicator.parentNode) {
                indicator.remove();
              }
            }, 500);
          }
        }, 3000);
      }
    },

    updateZoomLevelDisplay() {
      const zoomDisplay = document.getElementById(`nt-zoom-level-{{ section.id }}`);
      if (zoomDisplay) {
        zoomDisplay.textContent = `Zoom: ${Math.round(this.placementState.zoomLevel * 100)}%`;
      }
    },

    bindZoomControls() {
      // Zoom In button
      const zoomInBtn = document.getElementById(`nt-zoom-in-{{ section.id }}`);
      if (zoomInBtn) {
        zoomInBtn.addEventListener('click', () => {
          this.zoomIn();
        });
      }

      // Zoom Out button
      const zoomOutBtn = document.getElementById(`nt-zoom-out-{{ section.id }}`);
      if (zoomOutBtn) {
        zoomOutBtn.addEventListener('click', () => {
          this.zoomOut();
        });
      }

      // Reset Zoom button
      const zoomResetBtn = document.getElementById(`nt-zoom-reset-{{ section.id }}`);
      if (zoomResetBtn) {
        zoomResetBtn.addEventListener('click', () => {
          this.resetZoom();
        });
      }
    },

    // Bind drag functionality to overlay
    bindDragResize() {
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      const canvas = document.getElementById('nt-mockup-canvas-{{ section.id }}');
      
      if (!overlay || !canvas) return;
      
      // Bind the drag functions to this context
      this.handleDrag = this.handleDrag.bind(this);
      this.stopDrag = this.stopDrag.bind(this);
      
      overlay.addEventListener('mousedown', (e) => {
        e.stopPropagation();
        this.startDrag(e);
      });

      // Bind resize handles
      const resizeHandles = document.querySelectorAll(`#nt-overlay-{{ section.id }} .resize-handle`);
      resizeHandles.forEach(handle => {
        handle.addEventListener('mousedown', (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.startResize(e, handle.dataset.direction);
        });
      });
      
      overlay.addEventListener('click', (e) => {
        e.stopPropagation();
        this.selectDesign();
      });
      
      canvas.addEventListener('click', (e) => {
        if (e.target === canvas) {
          this.deselectDesign();
        }
      });
    },

    bindEvents() {
      const rootId = "nt-mockup-{{ section.id }}";
      
      // View buttons
      const viewBtns = Array.from(document.querySelectorAll(`#${rootId} .nt-btn--view`));
      viewBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          this.state.view = btn.dataset.view;
          this.setActive(viewBtns, this.state.view);
          this.updateBase();
          console.log('👁️ View changed to:', this.state.view);
        });
      });

      // Color buttons
      const colorBtns = Array.from(document.querySelectorAll(`#${rootId} .nt-btn--color`));
      colorBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          this.state.color = btn.dataset.color;
          this.setActive(colorBtns, this.state.color);
          this.updateBase();
          console.log('🎨 Color changed to:', this.state.color);
        });
      });

      // Upload button
      const uploadBtn = document.getElementById(`nt-upload-{{ section.id }}`);
      if (uploadBtn) {
        uploadBtn.addEventListener("click", (e) => {
          console.log('📁 Upload button clicked');
          const input = document.createElement('input');
          input.type = 'file';
          input.accept = 'image/*';
          input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
              this.handleFileUpload(file);
            }
          };
          input.click();
        });
      }

      // Download button
      const downloadBtn = document.getElementById(`nt-download-{{ section.id }}`);
      if (downloadBtn) {
        downloadBtn.addEventListener("click", () => {
          console.log('💾 Download button clicked');
          this.downloadMockup();
        });
      }

      // Edit button
      const editBtn = document.getElementById(`nt-edit-{{ section.id }}`);
      if (editBtn) {
        editBtn.addEventListener("click", () => {
          console.log('✏️ Edit button clicked');
          alert('Edit functionality coming soon!');
        });
      }

      // Remove button
      const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
      if (removeBtn) {
        removeBtn.addEventListener("click", () => {
          console.log('🗑️ Remove button clicked');
          this.removeDesign();
        });
      }

      // Placement Guide button
      this.bindPlacementGuide();

      // Perfect Fit button
      const perfectFitBtn = document.getElementById(`nt-perfect-fit-btn-{{ section.id }}`);
      if (perfectFitBtn) {
        perfectFitBtn.addEventListener("click", () => {
          console.log('🎯 Perfect Fit button clicked');
          this.perfectFit();
        });
      }

      // Submit Request button
      const submitBtn = document.getElementById(`nt-submit-request-btn-{{ section.id }}`);
      if (submitBtn) {
        submitBtn.addEventListener("click", () => {
          console.log('🚀 Submit Request button clicked');
          this.submitRequest();
        });
      }

      // 3D Controls
      const rotateBtn = document.getElementById(`nt-3d-rotate-{{ section.id }}`);
      if (rotateBtn) {
        rotateBtn.addEventListener("click", () => {
          console.log('↺ Rotate button clicked');
          this.rotateDesign();
        });
      }

      const zoomBtn = document.getElementById(`nt-zoom-{{ section.id }}`);
      if (zoomBtn) {
        zoomBtn.addEventListener("click", () => {
          console.log('🔍 Zoom button clicked');
          this.zoomDesign();
        });
      }

      const validateBtn = document.getElementById(`nt-validate-{{ section.id }}`);
      if (validateBtn) {
        validateBtn.addEventListener("click", () => {
          console.log('✅ Validate button clicked');
          this.validateDesign();
        });
      }

      const resetBtn = document.getElementById(`nt-reset-{{ section.id }}`);
      if (resetBtn) {
        resetBtn.addEventListener("click", () => {
          console.log('🔄 Reset button clicked');
          this.resetDesign();
        });
      }
    },
    
    handleFileUpload(file) {
      console.log('📤 Processing file:', file.name, file.type, file.size);
      
      const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/svg+xml'];
      if (!allowedTypes.includes(file.type)) {
        this.showMessage('❌ Invalid file type. Please upload PNG, JPG, or SVG files.', 'error');
        return;
      }
      
      const maxSize = 10 * 1024 * 1024;
      if (file.size > maxSize) {
        this.showMessage('❌ File too large. Please upload files smaller than 10MB.', 'error');
        return;
      }
      
      this.showMessage('📁 Processing your design...', 'info');
      
      const reader = new FileReader();
      reader.onload = (e) => {
        console.log('✅ File loaded, applying to mockup');
        this.applyUploadedDesign(e.target.result);
      };
      reader.readAsDataURL(file);
    },

    applyUploadedDesign(imageData) {
      console.log('🎨 Applying design to mockup');
      
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      const designText = document.getElementById(`nt-design-text-{{ section.id }}`);
      
      if (overlayDiv && designText) {
        designText.style.display = 'none';
        
        // Remove any existing uploaded image
        const existingImg = overlayDiv.querySelector('img');
        if (existingImg) {
          existingImg.remove();
        }
        
        const uploadedImg = document.createElement('img');
        uploadedImg.src = imageData;
        uploadedImg.style.cssText = `
          width: 100% !important;
          height: 100% !important;
          object-fit: contain !important;
          display: block;
          pointer-events: none;
        `;
        
        overlayDiv.appendChild(uploadedImg);
        
        this.placementState.hasUploadedDesign = true;
        this.placementState.designSelected = true;
        
        console.log('✅ Design applied to mockup');
        this.showMessage('🎨 Design uploaded! Use canvas zoom controls and precise arrow keys for fine-tuning.', 'success');
      }
    },
    
    downloadComposite() {
      console.log('📥 Starting download composite...');
      console.log('Current placement state:', this.placementState);
      
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      
      // Use higher resolution for better quality
      canvas.width = 2000;
      canvas.height = 2000;
      
      const baseImg = new Image();
      baseImg.crossOrigin = "anonymous";
      baseImg.src = document.getElementById("nt-base-{{ section.id }}").src;
      
      baseImg.onload = () => {
        console.log('✅ Base image loaded, drawing to canvas');
        ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

        const overlayImg = document.querySelector(`#nt-overlay-{{ section.id }} img`);
        console.log('Overlay image found:', overlayImg);
            
        if (overlayImg && overlayImg.src && this.placementState.hasUploadedDesign) {
          console.log('🎨 Processing uploaded design for download');
          const designImg = new Image();
          designImg.crossOrigin = "anonymous";
          designImg.src = overlayImg.src;
          
          designImg.onload = () => {
            console.log('✅ Design image loaded, applying to canvas');
            
            // Use the current placement state values
            const topPct = this.placementState.topPct / 100;
            const leftPct = this.placementState.leftPct / 100;
            const widthPct = this.placementState.widthPct / 100;
            const heightPct = this.placementState.heightPct / 100;
            const rotateDeg = this.placementState.rotateDeg || 0;

            // Calculate design position and size on canvas
            const designX = canvas.width * leftPct - (canvas.width * widthPct) / 2; // Center horizontally
            const designY = canvas.height * topPct;
            const designWidth = canvas.width * widthPct;
            const designHeight = canvas.height * heightPct;
            
            console.log('Design positioning:', {
              x: designX,
              y: designY,
              width: designWidth,
              height: designHeight,
              rotation: rotateDeg
            });
            
            // Apply rotation and draw the design
            ctx.save();
            ctx.translate(designX + designWidth / 2, designY + designHeight / 2);
            ctx.rotate(rotateDeg * Math.PI / 180);
            ctx.drawImage(designImg, -designWidth / 2, -designHeight / 2, designWidth, designHeight);
            ctx.restore();

            console.log('✅ Design applied to canvas, starting download');
            const a = document.createElement('a');
            a.download = `custom_mockup_${this.state.view}_${this.state.color}.png`;
            a.href = canvas.toDataURL("image/png");
            a.click();
            
            this.showMessage('📥 Mockup downloaded with design!', 'success');
          };

          designImg.onerror = () => {
            console.error('❌ Failed to load design image for download');
            this.showMessage('❌ Failed to load design for download', 'error');
          };
        } else {
          console.log('ℹ️ No uploaded design found, downloading base mockup only');
          const a = document.createElement('a');
          a.download = `custom_mockup_${this.state.view}_${this.state.color}.png`;
          a.href = canvas.toDataURL("image/png");
          a.click();
          
          this.showMessage('📥 Mockup downloaded (no design)', 'info');
        }
      };
      
      baseImg.onerror = () => {
        console.error('❌ Failed to load base image for download');
        this.showMessage('❌ Failed to load base image for download', 'error');
      };
    },

    downloadMockup() {
      this.downloadComposite();
    },

    bindPlacementGuide() {
      const toggleBtn = document.getElementById(`nt-toggle-guide-{{ section.id }}`);
      const guideText = document.getElementById(`nt-guide-text-{{ section.id }}`);
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      let guideVisible = false;
      
      if (toggleBtn && overlay) {
        toggleBtn.addEventListener('click', () => {
          guideVisible = !guideVisible;
          
          if (guideVisible) {
            // Show guide - add red border and crosshairs
            overlay.style.border = '2px dashed #ef4444';
            overlay.style.boxShadow = '0 0 0 2px rgba(239, 68, 68, 0.2), inset 0 0 0 2px rgba(239, 68, 68, 0.1)';
            
            // Add crosshairs using pseudo-elements via a style element
            if (!document.getElementById('placement-guide-style-{{ section.id }}')) {
              const styleEl = document.createElement('style');
              styleEl.id = 'placement-guide-style-{{ section.id }}';
              styleEl.textContent = `
                #nt-overlay-{{ section.id }}::before,
                #nt-overlay-{{ section.id }}::after {
                  content: '';
                  position: absolute;
                  background: rgba(239, 68, 68, 0.5);
                  z-index: 1000;
                  pointer-events: none;
                }
                #nt-overlay-{{ section.id }}::before {
                  top: 50%;
                  left: 0;
                  right: 0;
                  height: 2px;
                  transform: translateY(-50%);
                }
                #nt-overlay-{{ section.id }}::after {
                  left: 50%;
                  top: 0;
                  bottom: 0;
                  width: 2px;
                  transform: translateX(-50%);
                }
              `;
              document.head.appendChild(styleEl);
            }
            
            if (guideText) guideText.textContent = 'Hide';
            this.showMessage('📐 Placement guide enabled - red border shows print area', 'success');
          } else {
            // Hide guide - remove border and crosshairs
            overlay.style.border = '2px dashed rgba(39, 225, 193, 0.3)';
            overlay.style.boxShadow = 'inset 0 4px 12px rgba(0, 0, 0, 0.1)';
            
            // Remove crosshairs style
            const styleEl = document.getElementById('placement-guide-style-{{ section.id }}');
            if (styleEl) {
              styleEl.remove();
            }
            
            if (guideText) guideText.textContent = 'Show';
            this.showMessage('📐 Placement guide disabled', 'success');
          }
        });
      }
    },
    
    removeDesign() {
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (overlay) {
        overlay.innerHTML = '';
        this.placementState.hasUploadedDesign = false;
        this.placementState.designSelected = false;
        console.log('🗑️ Design removed');
        this.showMessage('🗑️ Design removed', 'info');
      }
    },
    
    applyPerfectFit() {
      // Optimal dimensions for perfect fit in print area
      // These values are based on the console debug output for optimal positioning
      const perfectDimensions = {
        topPct: 29.142857142856876,     // Exact optimal top position
        leftPct: 50.21428571428568,     // Exact optimal left position
        widthPct: 37,                   // Optimal width for design proportions
        heightPct: 42,                  // Optimal height for design proportions
        rotateDeg: 0                    // No rotation for perfect fit
      };

      // Update placement state
      this.placementState.topPct = perfectDimensions.topPct;
      this.placementState.leftPct = perfectDimensions.leftPct;
      this.placementState.widthPct = perfectDimensions.widthPct;
      this.placementState.heightPct = perfectDimensions.heightPct;
      this.placementState.rotateDeg = perfectDimensions.rotateDeg;

      // Update the display and position
      this.updatePlacementDisplay();
      this.updateDesignPosition();

      // Add animation effect
      const overlay = document.getElementById('nt-overlay-{{ section.id }}');
      if (overlay) {
        overlay.style.transition = 'transform 0.3s ease';
        overlay.style.transform = `translateX(-50%) rotate(${perfectDimensions.rotateDeg}deg) scale(1.05)`;
        setTimeout(() => {
          overlay.style.transform = `translateX(-50%) rotate(${perfectDimensions.rotateDeg}deg) scale(1)`;
        }, 200);
      }

      this.showMessage('✨ Perfect fit applied! Design positioned optimally in print area', 'success');
    },

    perfectFit() {
      if (!this.placementState.hasUploadedDesign) {
        alert('⚠️ Please upload a design first!');
        return;
      }
      this.applyPerfectFit();
    },
    
    submitRequest() {
      if (!this.placementState.hasUploadedDesign) {
        alert('⚠️ Please upload a design first!');
        return;
      }
      
      const name = prompt('👤 Please enter your name:');
      if (!name) return;
      
      const email = prompt('📧 Please enter your email:');
      if (!email) return;
      
      const phone = prompt('📞 Please enter your phone number (optional):') || '';
      const size = prompt('👕 Please enter your t-shirt size (XS, S, M, L, XL, XXL):') || 'M';
      const message = prompt('💬 Any special instructions (optional):') || '';
      
      alert(`🎉 Request submitted successfully!\n\nName: ${name}\nEmail: ${email}\nSize: ${size}\n\nWe'll contact you within 24 hours to process your custom t-shirt order!`);
      
      console.log('🚀 Request submitted:', { name, email, phone, size, message, view: this.state.view, color: this.state.color });
    },
    
    rotateDesign() {
      if (!this.placementState.hasUploadedDesign) {
        alert('⚠️ Please upload a design first!');
        return;
      }
      console.log('↺ Rotating design...');
      this.showMessage('↺ Design rotated', 'info');
    },
    
    zoomDesign() {
      if (!this.placementState.hasUploadedDesign) {
        alert('⚠️ Please upload a design first!');
        return;
      }
      console.log('🔍 Zooming design...');
      this.showMessage('🔍 Design zoomed', 'info');
    },
    
    validateDesign() {
      if (!this.placementState.hasUploadedDesign) {
        alert('⚠️ Please upload a design first!');
        return;
      }
      alert('✅ Design validation passed! Your design is ready for submission.');
    },
    
    resetDesign() {
      if (!this.placementState.hasUploadedDesign) {
        alert('⚠️ No design to reset!');
        return;
      }
      console.log('🔄 Resetting design...');
      this.showMessage('🔄 Design reset', 'info');
    },
    
    showMessage(text, type = 'info') {
      const existingMessage = document.querySelector('.nt-message');
      if (existingMessage) {
        existingMessage.remove();
      }
      
      const message = document.createElement('div');
      message.className = 'nt-message';
      const colors = {
        success: 'linear-gradient(45deg, #10b981, #059669)',
        error: 'linear-gradient(45deg, #ef4444, #dc2626)',
        info: 'linear-gradient(45deg, #3b82f6, #1d4ed8)'
      };
      
      message.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type] || colors.info};
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        z-index: 10000;
        font-weight: 600;
        animation: slideIn 0.3s ease;
      `;
      message.textContent = text;
      document.body.appendChild(message);
      
      setTimeout(() => {
        message.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => message.remove(), 300);
      }, 3000);
    }
  };
  
  // Initialize the mockup
  mockup.init();
  
  console.log('🚀 Custom Studio Mockup initialized! 🎨');
}

// Add the testPerfectFit function for debugging
(function() {
  console.log('🎯 Registering testPerfectFit function...');
  
  window.testPerfectFit = function() {
    console.log('🎯 Testing Perfect Fit with exact dimensions...');
    
    // Find the mockup section
    const section = document.getElementById('nt-mockup-{{ section.id }}');
    if (!section) {
      console.error('❌ Mockup section not found!');
      return;
    }
    
    // Get the overlay and canvas
    const overlay = document.getElementById('nt-overlay-{{ section.id }}');
    const canvas = document.getElementById('nt-mockup-canvas-{{ section.id }}');
    
    if (!overlay || !canvas) {
      console.error('❌ Overlay or canvas not found!');
      return;
    }
    
    // Apply exact dimensions
    const perfectDimensions = {
      topPct: 29.142857142856876,
      leftPct: 50.21428571428568,
      widthPct: 37,
      heightPct: 42,
      rotateDeg: 0
    };
    
    // Update CSS variables
    canvas.style.setProperty('--overlay-top', perfectDimensions.topPct + '%');
    canvas.style.setProperty('--overlay-left', perfectDimensions.leftPct + '%');
    canvas.style.setProperty('--overlay-width', perfectDimensions.widthPct + '%');
    canvas.style.setProperty('--overlay-height', perfectDimensions.heightPct + '%');
    canvas.style.setProperty('--overlay-rotate', perfectDimensions.rotateDeg + 'deg');
    
    // Update overlay directly
    overlay.style.top = perfectDimensions.topPct + '%';
    overlay.style.left = perfectDimensions.leftPct + '%';
    overlay.style.width = perfectDimensions.widthPct + '%';
    overlay.style.height = perfectDimensions.heightPct + '%';
    overlay.style.transform = `translateX(-50%) rotate(${perfectDimensions.rotateDeg}deg)`;
    
    console.log('✅ Perfect Fit applied with exact dimensions:');
    console.log(`Top: ${perfectDimensions.topPct}%`);
    console.log(`Left: ${perfectDimensions.leftPct}%`);
    console.log(`Width: ${perfectDimensions.widthPct}%`);
    console.log(`Height: ${perfectDimensions.heightPct}%`);
    console.log(`Rotation: ${perfectDimensions.rotateDeg}°`);
    
    // Add animation
    overlay.style.transition = 'transform 0.3s ease';
    overlay.style.transform = `translateX(-50%) rotate(${perfectDimensions.rotateDeg}deg) scale(1.05)`;
    setTimeout(() => {
      overlay.style.transform = `translateX(-50%) rotate(${perfectDimensions.rotateDeg}deg) scale(1)`;
    }, 200);
    
    // Show success message on page
    const existingMessage = document.querySelector('.nt-message');
    if (existingMessage) {
      existingMessage.remove();
    }
    
    const message = document.createElement('div');
    message.className = 'nt-message';
    message.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(45deg, #10b981, #059669);
      color: white;
      padding: 15px 25px;
      border-radius: 8px;
      box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
      z-index: 10000;
      font-weight: 600;
      animation: slideIn 0.3s ease;
    `;
    message.textContent = '🎯 Perfect Fit test applied with exact dimensions!';
    document.body.appendChild(message);
    
    setTimeout(() => {
      message.style.animation = 'slideOut 0.3s ease';
      setTimeout(() => message.remove(), 300);
    }, 3000);
  };
  
  console.log('✅ testPerfectFit is now available! Type: testPerfectFit()');
})();

// Size Chart Toggle Functionality - Initialize when studio opens
function initializeSizeChart() {
  console.log('📏 Initializing Size Chart...');
  const sizeChartToggle = document.getElementById('size-chart-toggle-{{ section.id }}');
  const sizeChartContent = document.getElementById('size-chart-content-{{ section.id }}');
  const sizeChartIcon = document.getElementById('size-chart-icon-{{ section.id }}');
  
  if (sizeChartToggle && sizeChartContent && sizeChartIcon) {
    console.log('✅ Size Chart elements found, binding events...');
    sizeChartToggle.addEventListener('click', function() {
      if (sizeChartContent.style.display === 'none') {
        sizeChartContent.style.display = 'block';
        sizeChartIcon.style.transform = 'rotate(180deg)';
        // Use theme-appropriate open colors
        sizeChartToggle.style.background = 'linear-gradient(135deg, #059669, #047857)';
        console.log('📏 Size Chart opened');
      } else {
        sizeChartContent.style.display = 'none';
        sizeChartIcon.style.transform = 'rotate(0deg)';
        // Reset to default - CSS will handle theme colors
        sizeChartToggle.style.background = '';
        console.log('📏 Size Chart closed');
      }
    });
    console.log('✅ Size Chart toggle functionality initialized');
  } else {
    console.error('❌ Size Chart elements not found:', {
      toggle: !!sizeChartToggle,
      content: !!sizeChartContent,
      icon: !!sizeChartIcon
    });
  }
}
</script>

<style>
/* ========================================
   MOBILE RESPONSIVE DESIGN WORKSPACE
   ======================================== */

/* Tablet & Medium Screens (768px and below) */
@media (max-width: 768px) {
  /* Main Studio Container */
  .custom-tshirt-studio {
    overflow-x: hidden !important;
    max-width: 100vw !important;
  }
  
  /* Studio Header */
  .studio-title {
    font-size: 2.25rem !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    line-height: 1.2 !important;
    padding: 0 15px !important;
  }
  
  .studio-subtitle {
    font-size: 1rem !important;
    padding: 0 15px !important;
  }
  
  .studio-description {
    font-size: 0.95rem !important;
    padding: 0 15px !important;
  }
  
  /* Design Workspace */
  .design-workspace {
    padding: 20px 12px !important;
    margin: 0 10px !important;
    border-radius: 16px !important;
    overflow-x: hidden !important;
    max-width: calc(100% - 20px) !important;
    box-sizing: border-box !important;
  }
  
  .workspace-header {
    flex-wrap: wrap !important;
    gap: 15px !important;
  }
  
  .workspace-title {
    font-size: 1.5rem !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    flex: 1 1 100% !important;
    text-align: center !important;
  }
  
  .close-studio-btn {
    flex: 0 0 auto !important;
    margin: 0 auto !important;
  }
  
  /* Mockup Section */
  #nt-mockup-{{ section.id }} {
    padding: 30px 0 !important;
    overflow-x: hidden !important;
    max-width: 100vw !important;
  }
  
  .container {
    padding: 0 12px !important;
    max-width: 100% !important;
  }
  
  /* Mockup Header */
  .mockup-header h1 {
    font-size: 2rem !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    padding: 0 15px !important;
    line-height: 1.2 !important;
  }
  
  .mockup-header p {
    font-size: 1rem !important;
    padding: 0 15px !important;
    line-height: 1.6 !important;
  }
  
  /* Canvas Hint Text */
  .canvas-hint-text {
    font-size: 0.85rem !important;
    padding: 0 12px !important;
  }
  
  /* Controls Title */
  .canvas-controls-title {
    font-size: 1.5rem !important;
    padding: 0 12px !important;
  }
  
  .canvas-controls-subtitle {
    font-size: 0.85rem !important;
    padding: 0 12px !important;
  }
  
  /* Design Customization Controls Container */
  .nt-mockup__controls {
    flex-direction: column !important;
    padding: 16px 12px !important;
    gap: 16px !important;
    max-width: 100% !important;
    box-sizing: border-box !important;
  }
  
  /* Control Groups */
  .nt-mockup__group {
    width: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    gap: 10px !important;
  }
  
  .nt-mockup__label {
    display: block !important;
    text-align: center !important;
    margin: 0 0 8px 0 !important;
    font-size: 0.9rem !important;
  }
  
  /* Button Containers - Grid Layout for Better Organization */
  .nt-mockup__buttons {
    display: grid !important;
    grid-template-columns: repeat(2, 1fr) !important;
    gap: 8px !important;
    width: 100% !important;
  }
  
  /* View Buttons - 2 columns on tablet */
  .nt-mockup__group:has(.nt-btn--view) .nt-mockup__buttons {
    grid-template-columns: repeat(2, 1fr) !important;
  }
  
  /* Color Buttons - 2 columns */
  .nt-mockup__group:has(.nt-btn--color) .nt-mockup__buttons {
    grid-template-columns: repeat(2, 1fr) !important;
  }
  
  /* 3D Controls - 2 columns */
  .nt-mockup__group:has(.nt-btn--3d) .nt-mockup__buttons {
    grid-template-columns: repeat(2, 1fr) !important;
  }
  
  /* Zoom Controls - Full width stack */
  .nt-mockup__group:has(.nt-btn--zoom-out) .nt-mockup__buttons {
    grid-template-columns: 1fr !important;
  }
  
  /* All Buttons - Mobile Optimized */
  .nt-btn {
    padding: 12px 16px !important;
    font-size: 0.85rem !important;
    border-radius: 12px !important;
    width: 100% !important;
    box-sizing: border-box !important;
    white-space: nowrap !important;
    text-align: center !important;
    justify-content: center !important;
  }
  
  /* Upload Section */
  .upload-section {
    width: 100% !important;
    margin-bottom: 16px !important;
  }
  
  .nt-btn--upload {
    width: 100% !important;
    padding: 16px 24px !important;
    font-size: 0.95rem !important;
    border-radius: 16px !important;
  }
  
  /* Action Buttons Grid */
  .action-buttons-grid {
    display: grid !important;
    grid-template-columns: 1fr !important;
    gap: 10px !important;
    width: 100% !important;
  }
  
  /* Primary Actions */
  .primary-actions {
    display: grid !important;
    grid-template-columns: 1fr !important;
    gap: 10px !important;
    width: 100% !important;
  }
  
  /* Submit Request Button */
  .submit-request-btn {
    width: 100% !important;
    padding: 16px 24px !important;
    font-size: 0.95rem !important;
    border-radius: 16px !important;
  }
  
  /* Canvas Container */
  .nt-mockup__canvas {
    max-width: 100% !important;
    margin: 20px auto !important;
    padding: 0 10px !important;
    box-sizing: border-box !important;
  }
  
  /* 3-Step Workflow - Below Canvas */
  .workflow-steps {
    margin-top: 40px !important;
    max-width: 100% !important;
    padding: 0 16px !important;
    gap: 28px !important;
  }
  
  .workflow-step {
    width: 100% !important;
  }
  
  .step-label {
    font-size: 0.95rem !important;
    margin-bottom: 10px !important;
    gap: 6px !important;
  }
  
  .step-label span:first-child {
    width: 28px !important;
    height: 28px !important;
    font-size: 14px !important;
  }
  
  .step-description {
    font-size: 0.85rem !important;
    max-width: 95% !important;
    line-height: 1.5 !important;
  }
  
  .workflow-steps .nt-btn--upload {
    width: 100% !important;
    padding: 18px 32px !important;
    font-size: 1rem !important;
  }
  
  .workflow-steps .nt-btn--perfect-fit {
    width: 100% !important;
    padding: 16px 28px !important;
    font-size: 0.95rem !important;
  }
  
  .workflow-steps .nt-btn--submit-request {
    width: 100% !important;
    padding: 18px 32px !important;
    font-size: 1rem !important;
  }
  
  /* Size Chart */
  .size-chart-container {
    margin: 20px 10px !important;
    max-width: calc(100% - 20px) !important;
  }
  
  .size-chart-table {
    font-size: 0.7rem !important;
  }
  
  .size-chart-table th,
  .size-chart-table td {
    padding: 6px 4px !important;
  }
}

/* Mobile Phones (480px and below) */
@media (max-width: 480px) {
  /* Studio Header */
  .studio-title {
    font-size: 1.85rem !important;
    padding: 0 12px !important;
  }
  
  .studio-subtitle {
    font-size: 0.95rem !important;
  }
  
  .studio-description {
    font-size: 0.9rem !important;
  }
  
  /* Design Workspace */
  .design-workspace {
    padding: 16px 10px !important;
    margin: 0 8px !important;
  }
  
  .workspace-title {
    font-size: 1.35rem !important;
  }
  
  /* Mockup Section */
  #nt-mockup-{{ section.id }} {
    padding: 20px 0 !important;
  }
  
  .mockup-header h1 {
    font-size: 1.75rem !important;
    padding: 0 12px !important;
  }
  
  .mockup-header p {
    font-size: 0.9rem !important;
    padding: 0 12px !important;
  }
  
  /* Controls */
  .nt-mockup__controls {
    padding: 12px 10px !important;
    gap: 12px !important;
  }
  
  .canvas-controls-title {
    font-size: 1.35rem !important;
  }
  
  .canvas-controls-subtitle {
    font-size: 0.8rem !important;
  }
  
  /* Buttons */
  .nt-btn {
    padding: 11px 14px !important;
    font-size: 0.8rem !important;
    border-radius: 10px !important;
  }
  
  .nt-btn--upload {
    padding: 15px 20px !important;
    font-size: 0.9rem !important;
  }
  
  .submit-request-btn {
    padding: 15px 20px !important;
    font-size: 0.9rem !important;
  }
  
  /* 3-Step Workflow */
  .workflow-steps {
    margin-top: 32px !important;
    padding: 0 12px !important;
    gap: 24px !important;
  }
  
  .step-label {
    font-size: 0.9rem !important;
    margin-bottom: 8px !important;
    gap: 6px !important;
  }
  
  .step-label span:first-child {
    width: 26px !important;
    height: 26px !important;
    font-size: 13px !important;
  }
  
  .step-description {
    font-size: 0.8rem !important;
    max-width: 100% !important;
  }
  
  .workflow-steps .nt-btn--upload {
    padding: 16px 28px !important;
    font-size: 0.95rem !important;
  }
  
  .workflow-steps .nt-btn--perfect-fit {
    padding: 15px 24px !important;
    font-size: 0.9rem !important;
  }
  
  .workflow-steps .nt-btn--submit-request {
    padding: 16px 28px !important;
    font-size: 0.95rem !important;
  }
  
  /* View Buttons - Stack to single column on small phones */
  .nt-mockup__group:has(.nt-btn--view) .nt-mockup__buttons {
    grid-template-columns: 1fr !important;
  }
  
  /* Color Buttons - Keep 2 columns */
  .nt-mockup__group:has(.nt-btn--color) .nt-mockup__buttons {
    grid-template-columns: repeat(2, 1fr) !important;
  }
  
  /* 3D Controls - Keep 2 columns */
  .nt-mockup__group:has(.nt-btn--3d) .nt-mockup__buttons {
    grid-template-columns: repeat(2, 1fr) !important;
  }
  
  /* Size Chart */
  .size-chart-table {
    font-size: 0.65rem !important;
  }
  
  .size-chart-table th,
  .size-chart-table td {
    padding: 5px 3px !important;
  }
}

/* Very Small Phones (375px and below) */
@media (max-width: 375px) {
  /* Studio Header */
  .studio-title {
    font-size: 1.65rem !important;
    padding: 0 10px !important;
  }
  
  .studio-subtitle {
    font-size: 0.9rem !important;
  }
  
  .studio-description {
    font-size: 0.85rem !important;
  }
  
  /* Mockup Header */
  .mockup-header h1 {
    font-size: 1.6rem !important;
    padding: 0 10px !important;
  }
  
  .mockup-header p {
    font-size: 0.85rem !important;
    padding: 0 10px !important;
  }
  
  /* Controls */
  .canvas-controls-title {
    font-size: 1.25rem !important;
  }
  
  .canvas-controls-subtitle {
    font-size: 0.75rem !important;
  }
  
  /* Buttons */
  .nt-btn {
    padding: 10px 12px !important;
    font-size: 0.75rem !important;
  }
  
  .nt-btn--upload {
    padding: 14px 18px !important;
    font-size: 0.85rem !important;
  }
  
  .submit-request-btn {
    padding: 14px 18px !important;
    font-size: 0.85rem !important;
  }
  
  /* 3-Step Workflow */
  .workflow-steps {
    margin-top: 28px !important;
    padding: 0 10px !important;
    gap: 20px !important;
  }
  
  .step-label {
    font-size: 0.85rem !important;
    margin-bottom: 8px !important;
    gap: 5px !important;
    flex-wrap: wrap !important;
    justify-content: center !important;
  }
  
  .step-label span:first-child {
    width: 24px !important;
    height: 24px !important;
    font-size: 12px !important;
  }
  
  .step-description {
    font-size: 0.75rem !important;
    max-width: 100% !important;
    line-height: 1.5 !important;
  }
  
  .workflow-steps .nt-btn--upload {
    padding: 15px 24px !important;
    font-size: 0.9rem !important;
  }
  
  .workflow-steps .nt-btn--perfect-fit {
    padding: 14px 20px !important;
    font-size: 0.85rem !important;
  }
  
  .workflow-steps .nt-btn--submit-request {
    padding: 15px 24px !important;
    font-size: 0.9rem !important;
  }
  
  /* All buttons stack in single column on very small screens */
  .nt-mockup__buttons {
    grid-template-columns: 1fr !important;
  }
}

/* Extra optimizations for horizontal overflow prevention */
@media (max-width: 768px) {
  * {
    max-width: 100vw;
  }
  
  body,
  html {
    overflow-x: hidden !important;
  }
  
  .custom-designer-container {
    overflow-x: hidden !important;
    max-width: 100vw !important;
  }
  
  /* Ensure feature highlights wrap properly */
  div[style*="display: flex"][style*="gap: 25px"] {
    gap: 12px !important;
    padding: 15px 10px !important;
  }
  
  div[style*="display: flex"][style*="gap: 25px"] > div {
    font-size: 0.85rem !important;
  }
  
  div[style*="display: flex"][style*="gap: 25px"] span[style*="padding: 8px 12px"] {
    padding: 6px 10px !important;
    font-size: 0.75rem !important;
  }
}
</style>

{% schema %}
{
  "name": "Custom T-Shirt Studio",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Studio Title",
      "default": "Custom T-Shirt Studio"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Studio Description",
      "default": "Create stunning custom t-shirts with our advanced design tools. Upload your artwork, customize colors, adjust positioning, and see your design come to life in real-time."
    },
    {
      "type": "header",
      "content": "Section Settings"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Custom T-Shirt Studio"
    }
  ]
}
{% endschema %}