{% comment %}
  LIVE DESIGN UPLOAD MOCKUP (New Thrifts) ‚Äî with fine-tune fields
  - Upload artwork, preview on T-shirt, drag/resize on canvas.
  - Sliders use step:1 (Shopify limit). Fine-tune number inputs allow decimals.
{% endcomment %}

<section id="ldu-{{ section.id }}" class="ldu">
  <div class="ldu__wrap">
    <header class="ldu__header">
      <h2 class="ldu__title">üöÄ Enhanced Live Design Preview</h2>
      <p class="ldu__sub">Upload your artwork and see it on the shirt instantly with 3D rotation, real-time editing, and advanced customization tools.</p>
    </header>

    <!-- Controls -->
    <div class="ldu__controls">
      <label class="ldu__upload">
        <input id="ldu-file-{{ section.id }}" type="file" accept="image/*,.svg,.pdf" />
        <span class="ldu__upload-btn">‚¨ÜÔ∏è Upload Your Design</span>
      </label>

      {% if section.settings.show_download %}
      <button id="ldu-download-{{ section.id }}" class="ldu__btn ldu__btn--primary">‚¨áÔ∏è Download Mockup</button>
      {% endif %}
    </div>

    <!-- Placement sliders + fine-tune -->
    <div class="ldu__sliders">
      <div class="ldu__slider">
        <label>Top</label>
        <div class="ldu__row">
          <input type="range" id="ldu-top-{{ section.id }}" min="0" max="90" step="1" value="{{ section.settings.area_top }}">
          <input type="number" id="ldu-top-n-{{ section.id }}" min="0" max="90" step="0.1" value="{{ section.settings.area_top }}" class="ldu__num"><span class="ldu__unit">%</span>
        </div>
      </div>
      <div class="ldu__slider">
        <label>Left</label>
        <div class="ldu__row">
          <input type="range" id="ldu-left-{{ section.id }}" min="0" max="90" step="1" value="{{ section.settings.area_left }}">
          <input type="number" id="ldu-left-n-{{ section.id }}" min="0" max="90" step="0.1" value="{{ section.settings.area_left }}" class="ldu__num"><span class="ldu__unit">%</span>
        </div>
      </div>
      <div class="ldu__slider">
        <label>Width</label>
        <div class="ldu__row">
          <input type="range" id="ldu-width-{{ section.id }}" min="10" max="100" step="1" value="{{ section.settings.area_width }}">
          <input type="number" id="ldu-width-n-{{ section.id }}" min="10" max="100" step="0.5" value="{{ section.settings.area_width }}" class="ldu__num"><span class="ldu__unit">%</span>
        </div>
      </div>
      <div class="ldu__slider">
        <label>Rotate</label>
        <div class="ldu__row">
          <input type="range" id="ldu-rot-{{ section.id }}" min="-45" max="45" step="1" value="{{ section.settings.area_rotate }}">
          <input type="number" id="ldu-rot-n-{{ section.id }}" min="-45" max="45" step="0.5" value="{{ section.settings.area_rotate }}" class="ldu__num"><span class="ldu__unit">¬∞</span>
        </div>
      </div>
    </div>

    <!-- Enhanced 3D Controls -->
    <div class="ldu__3d-controls">
      <div class="ldu__view-angles">
        <h4>üéØ View Angles</h4>
        <div class="ldu__angle-buttons">
          <button class="ldu__angle-btn active" data-angle="front" title="Front View">üë§ Front</button>
          <button class="ldu__angle-btn" data-angle="back" title="Back View">üë• Back</button>
          <button class="ldu__angle-btn" data-angle="side" title="Side View">üë§ Side</button>
          <button class="ldu__angle-btn" data-angle="3d" title="3/4 View">üë§ 3/4</button>
        </div>
      </div>
      
      <div class="ldu__advanced-tools">
        <h4>üõ†Ô∏è Advanced Tools</h4>
        <div class="ldu__tool-buttons">
          <button class="ldu__tool-btn" id="ldu-rotate-3d-{{ section.id }}" title="3D Rotation">üîÑ 3D Rotate</button>
          <button class="ldu__tool-btn" id="ldu-zoom-{{ section.id }}" title="Zoom Controls">üîç Zoom</button>
          <button class="ldu__tool-btn" id="ldu-validate-{{ section.id }}" title="Design Validation">‚úÖ Validate</button>
          <button class="ldu__tool-btn" id="ldu-reset-{{ section.id }}" title="Reset All">üîÑ Reset</button>
        </div>
      </div>
    </div>

    <!-- Design Validation Indicator -->
    <div class="ldu__validation" id="ldu-validation-{{ section.id }}" style="display: none;">
      <div class="ldu__validation-content">
        <span class="ldu__validation-icon">‚úì</span>
        <span class="ldu__validation-text">Design Quality: Perfect</span>
      </div>
    </div>

    <!-- Canvas Stage -->
    <div class="ldu__stage">
      <div class="ldu__canvas-container">
        <canvas id="ldu-canvas-{{ section.id }}" width="1200" height="1600" aria-label="T-shirt mockup canvas"></canvas>
        <div class="ldu__rotation-controls">
          <button class="ldu__rot-btn" id="ldu-rot-left-{{ section.id }}" title="Rotate Left">‚Ü∂</button>
          <button class="ldu__rot-btn" id="ldu-rot-right-{{ section.id }}" title="Rotate Right">‚Ü∑</button>
        </div>
      </div>
    </div>
  </div>

  <style>
    .ldu { padding: 24px 0; }
    .ldu__wrap { max-width: 980px; margin: 0 auto; }
    .ldu__title { margin: 0 0 6px; font-size: 1.6rem; }
    .ldu__sub { color:#6b7280; margin:0 0 18px; }
    .ldu__controls { display:flex; gap:10px; align-items:center; flex-wrap:wrap; margin-bottom: 10px; }
    .ldu__btn, .ldu__upload-btn {
      display:inline-flex; align-items:center; gap:8px; cursor:pointer;
      border:1px solid #d1d5db; background:#fff; padding:8px 12px; border-radius:12px;
    }
    .ldu__btn--primary { background:#111827; color:#fff; border-color:#111827; }
    .ldu__upload input[type=file] { display:none; }

    .ldu__sliders { display:grid; grid-template-columns: repeat(2, minmax(0,1fr)); gap:12px; margin: 8px 0 14px; }
    @media (min-width: 900px){ .ldu__sliders { grid-template-columns: repeat(4, minmax(0,1fr)); } }
    .ldu__slider label { display:block; margin-bottom:6px; font-size:.9rem; font-weight:600; }
    .ldu__row { display:flex; gap:8px; align-items:center; }
    .ldu__num { width: 92px; padding:6px 8px; border:1px solid #d1d5db; border-radius:10px; }
    .ldu__unit { color:#6b7280; font-size:.9rem; }
    .ldu__stage { background:linear-gradient(#fff,#f6f7f9); border-radius:16px; padding:16px; box-shadow:0 10px 30px rgba(0,0,0,.06); }
    canvas { width:100%; height:auto; display:block; border-radius:12px; background:#ffffff; }

    /* Enhanced 3D Controls Styling */
    .ldu__3d-controls {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin: 20px 0;
      padding: 20px;
      background: linear-gradient(135deg, #f8fafc, #e2e8f0);
      border-radius: 16px;
      border: 1px solid #e2e8f0;
    }

    .ldu__view-angles h4,
    .ldu__advanced-tools h4 {
      margin: 0 0 12px 0;
      font-size: 1rem;
      font-weight: 600;
      color: #374151;
    }

    .ldu__angle-buttons,
    .ldu__tool-buttons {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }

    .ldu__angle-btn,
    .ldu__tool-btn {
      padding: 8px 16px;
      border: 2px solid #d1d5db;
      background: white;
      color: #374151;
      border-radius: 12px;
      cursor: pointer;
      font-size: 0.9rem;
      font-weight: 500;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .ldu__angle-btn:hover,
    .ldu__tool-btn:hover {
      border-color: #27e1c1;
      background: rgba(39, 225, 193, 0.1);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(39, 225, 193, 0.2);
    }

    .ldu__angle-btn.active {
      background: #27e1c1;
      color: white;
      border-color: #27e1c1;
      box-shadow: 0 4px 12px rgba(39, 225, 193, 0.3);
    }

    /* Design Validation Styling */
    .ldu__validation {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      background: rgba(16, 185, 129, 0.95);
      color: white;
      padding: 12px 16px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
      animation: slideInRight 0.3s ease;
    }

    .ldu__validation-content {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 600;
    }

    .ldu__validation-icon {
      font-size: 1.2rem;
    }

    /* Canvas Container with Rotation Controls */
    .ldu__canvas-container {
      position: relative;
      display: inline-block;
    }

    .ldu__rotation-controls {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 8px;
      z-index: 10;
    }

    .ldu__rot-btn {
      width: 40px;
      height: 40px;
      border: none;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .ldu__rot-btn:hover {
      background: #27e1c1;
      color: white;
      transform: scale(1.1);
      box-shadow: 0 6px 16px rgba(39, 225, 193, 0.3);
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      .ldu__3d-controls {
        grid-template-columns: 1fr;
        gap: 16px;
      }
      
      .ldu__angle-buttons,
      .ldu__tool-buttons {
        justify-content: center;
      }
      
      .ldu__validation {
        position: relative;
        top: auto;
        right: auto;
        margin: 10px 0;
      }
    }

    /* Animations */
    @keyframes slideInRight {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  </style>

  <script>
  (() => {
    const sid = "{{ section.id }}";
    const canvas = document.getElementById(`ldu-canvas-${sid}`);
    const ctx = canvas.getContext("2d");
    
    console.log('üöÄ ENHANCED Live Design Preview Loading...', sid);

    // UI elements (sliders + number fields)
    const topR = document.getElementById(`ldu-top-${sid}`);
    const leftR = document.getElementById(`ldu-left-${sid}`);
    const widthR = document.getElementById(`ldu-width-${sid`);
    const rotR = document.getElementById(`ldu-rot-${sid}`);

    const topN = document.getElementById(`ldu-top-n-${sid}`);
    const leftN = document.getElementById(`ldu-left-n-${sid}`);
    const widthN = document.getElementById(`ldu-width-n-${sid}`);
    const rotN = document.getElementById(`ldu-rot-n-${sid}`);

    const fileInput = document.getElementById(`ldu-file-${sid}`);
    const dlBtn = document.getElementById(`ldu-download-${sid}`);

    // Base mockup
    const baseUrl = "{{ section.settings.base_mockup | image_url: width: 2000 }}";
    const baseImg = new Image(); baseImg.crossOrigin = "anonymous"; baseImg.src = baseUrl;

    // Uploaded artwork
    const designImg = new Image(); designImg.crossOrigin = "anonymous";
    let designLoaded = false;

    // State
    const clamp = (v,min,max) => Math.max(min, Math.min(max, v));
    const state = {
      topPct: parseFloat(topR.value),
      leftPct: parseFloat(leftR.value),
      widthPct: parseFloat(widthR.value),
      rotateDeg: parseFloat(rotR.value),
      dragging: false, lastX: 0, lastY: 0
    };

    function syncUI() {
      // slider -> num and num -> slider
      topR.value = state.topPct;  topN.value = state.topPct.toFixed(1);
      leftR.value = state.leftPct; leftN.value = state.leftPct.toFixed(1);
      widthR.value = state.widthPct; widthN.value = state.widthPct.toFixed(1);
      rotR.value = state.rotateDeg; rotN.value = state.rotateDeg.toFixed(1);
    }

    function draw() {
      ctx.clearRect(0,0,canvas.width,canvas.height);
      ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

      if (designLoaded) {
        const ow = canvas.width * (state.widthPct / 100);
        const oh = designImg.naturalHeight * (ow / (designImg.naturalWidth || 1));
        const ox = canvas.width * (state.leftPct / 100);
        const oy = canvas.height * (state.topPct / 100);
        const cx = ox + ow/2, cy = oy + oh/2;

        ctx.save();
        ctx.translate(cx, cy);
        ctx.rotate(state.rotateDeg * Math.PI/180);
        ctx.drawImage(designImg, -ow/2, -oh/2, ow, oh);
        ctx.restore();
      }
    }

    // Slider listeners
    [topR, leftR, widthR, rotR].forEach(el => {
      el.addEventListener('input', () => {
        state.topPct = parseFloat(topR.value);
        state.leftPct = parseFloat(leftR.value);
        state.widthPct = parseFloat(widthR.value);
        state.rotateDeg = parseFloat(rotR.value);
        syncUI(); draw();
      });
    });

    // Number listeners (allow decimals)
    topN.addEventListener('input', () => { state.topPct  = clamp(parseFloat(topN.value || 0), 0, 90); syncUI(); draw(); });
    leftN.addEventListener('input', () => { state.leftPct = clamp(parseFloat(leftN.value || 0), 0, 90); syncUI(); draw(); });
    widthN.addEventListener('input', () => { state.widthPct = clamp(parseFloat(widthN.value || 10), 10, 100); syncUI(); draw(); });
    rotN.addEventListener('input', () => { state.rotateDeg = clamp(parseFloat(rotN.value || 0), -45, 45); syncUI(); draw(); });

    // Base load
    baseImg.onload = draw;

    // Upload handling
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files?.[0]; if (!file) return;
      const reader = new FileReader();
      reader.onload = (ev) => {
        designImg.onload = () => { designLoaded = true; draw(); };
        designImg.src = ev.target.result;
      };
      reader.readAsDataURL(file);
    });

    // Drag to move
    function clientToCanvas(evt) {
      const rect = canvas.getBoundingClientRect();
      const clientX = evt.touches ? evt.touches[0].clientX : evt.clientX;
      const clientY = evt.touches ? evt.touches[0].clientY : evt.clientY;
      const x = (clientX - rect.left) * (canvas.width / rect.width);
      const y = (clientY - rect.top) * (canvas.height / rect.height);
      return { x, y };
    }
    canvas.addEventListener('mousedown', (e) => { if(!designLoaded) return; state.dragging = true; const {x,y}=clientToCanvas(e); state.lastX=x; state.lastY=y; });
    canvas.addEventListener('mousemove', (e) => {
      if (!state.dragging) return;
      const {x,y}=clientToCanvas(e);
      const dx=x-state.lastX, dy=y-state.lastY;
      state.leftPct = clamp(state.leftPct + (dx/canvas.width)*100, 0, 90);
      state.topPct  = clamp(state.topPct  + (dy/canvas.height)*100, 0, 90);
      state.lastX=x; state.lastY=y; syncUI(); draw();
    });
    window.addEventListener('mouseup', () => state.dragging = false);

    canvas.addEventListener('touchstart', (e)=>{ if(!designLoaded) return; state.dragging=true; const {x,y}=clientToCanvas(e); state.lastX=x; state.lastY=y; }, {passive:true});
    canvas.addEventListener('touchmove', (e)=>{ if(!state.dragging) return; const {x,y}=clientToCanvas(e); const dx=x-state.lastX, dy=y-state.lastY; state.leftPct=clamp(state.leftPct+(dx/canvas.width)*100,0,90); state.topPct=clamp(state.topPct+(dy/canvas.height)*100,0,90); state.lastX=x; state.lastY=y; syncUI(); draw(); }, {passive:true});
    window.addEventListener('touchend', ()=> state.dragging=false);

    // Wheel resize
    canvas.addEventListener('wheel', (e) => {
      if (!designLoaded) return;
      e.preventDefault();
      const delta = Math.sign(e.deltaY);
      state.widthPct = clamp(state.widthPct - delta * 2, 10, 100);
      syncUI(); draw();
    }, { passive: false });

    // Download
    {% if section.settings.show_download %}
    dlBtn?.addEventListener('click', () => {
      const a = document.createElement('a');
      a.download = 'mockup.png';
      a.href = canvas.toDataURL('image/png');
      a.click();
    });
    {% endif %}

    // Enhanced 3D Controls and Validation
    let currentViewAngle = 'front';
    let is3DRotationEnabled = false;
    let currentRotation = 0;
    
    // View angle buttons
    document.querySelectorAll('.ldu__angle-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        // Remove active class from all buttons
        document.querySelectorAll('.ldu__angle-btn').forEach(b => b.classList.remove('active'));
        // Add active class to clicked button
        btn.classList.add('active');
        currentViewAngle = btn.dataset.angle;
        console.log('üéØ View angle changed to:', currentViewAngle);
        draw();
      });
    });
    
    // 3D Rotation toggle
    const rotate3DBtn = document.getElementById(`ldu-rotate-3d-${sid}`);
    if (rotate3DBtn) {
      rotate3DBtn.addEventListener('click', () => {
        is3DRotationEnabled = !is3DRotationEnabled;
        rotate3DBtn.style.background = is3DRotationEnabled ? '#27e1c1' : '';
        rotate3DBtn.style.color = is3DRotationEnabled ? 'white' : '';
        console.log('üîÑ 3D Rotation:', is3DRotationEnabled ? 'Enabled' : 'Disabled');
      });
    }
    
    // Zoom controls
    const zoomBtn = document.getElementById(`ldu-zoom-${sid}`);
    if (zoomBtn) {
      zoomBtn.addEventListener('click', () => {
        // Toggle zoom mode
        canvas.style.transform = canvas.style.transform.includes('scale') ? '' : 'scale(1.5)';
        canvas.style.transition = 'transform 0.3s ease';
        console.log('üîç Zoom toggled');
      });
    }
    
    // Design validation
    const validateBtn = document.getElementById(`ldu-validate-${sid}`);
    const validationDiv = document.getElementById(`ldu-validation-${sid}`);
    if (validateBtn && validationDiv) {
      validateBtn.addEventListener('click', () => {
        validateDesign();
      });
    }
    
    // Reset button
    const resetBtn = document.getElementById(`ldu-reset-${sid}`);
    if (resetBtn) {
      resetBtn.addEventListener('click', () => {
        state.topPct = 30;
        state.leftPct = 30;
        state.widthPct = 50;
        state.rotateDeg = 0;
        currentRotation = 0;
        syncUI();
        draw();
        console.log('üîÑ Design reset');
      });
    }
    
    // Rotation controls
    const rotLeftBtn = document.getElementById(`ldu-rot-left-${sid}`);
    const rotRightBtn = document.getElementById(`ldu-rot-right-${sid}`);
    
    if (rotLeftBtn) {
      rotLeftBtn.addEventListener('click', () => {
        currentRotation -= 15;
        draw();
        console.log('‚Ü∂ Rotated left:', currentRotation);
      });
    }
    
    if (rotRightBtn) {
      rotRightBtn.addEventListener('click', () => {
        currentRotation += 15;
        draw();
        console.log('‚Ü∑ Rotated right:', currentRotation);
      });
    }
    
    // Design validation function
    function validateDesign() {
      const issues = [];
      let score = 100;
      
      // Check if design is loaded
      if (!designLoaded) {
        issues.push('No design uploaded');
        score = 0;
      } else {
        // Check design size
        if (state.widthPct < 20) {
          issues.push('Design too small');
          score -= 30;
        } else if (state.widthPct > 80) {
          issues.push('Design too large');
          score -= 20;
        }
        
        // Check positioning
        if (state.topPct < 10 || state.topPct > 80) {
          issues.push('Poor vertical positioning');
          score -= 25;
        }
        
        if (state.leftPct < 10 || state.leftPct > 80) {
          issues.push('Poor horizontal positioning');
          score -= 25;
        }
      }
      
      // Update validation display
      if (validationDiv) {
        validationDiv.style.display = 'block';
        const icon = validationDiv.querySelector('.ldu__validation-icon');
        const text = validationDiv.querySelector('.ldu__validation-text');
        
        if (score >= 90) {
          validationDiv.style.background = 'rgba(16, 185, 129, 0.95)';
          icon.textContent = '‚úì';
          text.textContent = 'Design Quality: Perfect';
        } else if (score >= 70) {
          validationDiv.style.background = 'rgba(245, 158, 11, 0.95)';
          icon.textContent = '‚ö†';
          text.textContent = `Design Quality: Good (${issues[0] || 'Minor issues'})`;
        } else {
          validationDiv.style.background = 'rgba(239, 68, 68, 0.95)';
          icon.textContent = '‚úó';
          text.textContent = `Design Quality: Needs Work (${issues[0] || 'Major issues'})`;
        }
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
          validationDiv.style.display = 'none';
        }, 5000);
      }
      
      console.log('‚úÖ Design validation complete. Score:', score, 'Issues:', issues);
    }
    
    // Enhanced draw function with 3D effects
    const originalDraw = draw;
    draw = function() {
      originalDraw();
      
      // Apply 3D rotation if enabled
      if (is3DRotationEnabled && designLoaded) {
        ctx.save();
        ctx.translate(canvas.width / 2, canvas.height / 2);
        ctx.rotate(currentRotation * Math.PI / 180);
        ctx.translate(-canvas.width / 2, -canvas.height / 2);
        ctx.restore();
      }
    };

    // Initial sync
    syncUI();
  })();
  </script>

  {% schema %}
  {
    "name": "Live Design Upload Mockup",
    "settings": [
      { "type": "image_picker", "id": "base_mockup", "label": "Base T-shirt image (PNG/JPG)", "info": "Use a high-res blank shirt image. 1200√ó1600 or larger recommended." },

      { "type": "header", "content": "Default placement (percent of canvas)" },
      { "type": "range", "id": "area_top", "min": 0, "max": 90, "step": 1, "unit": "%", "label": "Top", "default": 30 },
      { "type": "range", "id": "area_left", "min": 0, "max": 90, "step": 1, "unit": "%", "label": "Left", "default": 25 },
      { "type": "range", "id": "area_width", "min": 10, "max": 100, "step": 1, "unit": "%", "label": "Width", "default": 50 },
      { "type": "range", "id": "area_rotate", "min": -45, "max": 45, "step": 1, "unit": "¬∞", "label": "Rotate", "default": 0 },

      { "type": "checkbox", "id": "show_download", "label": "Show Download Mockup button", "default": true }
    ],
    "presets": [{ "name": "Live Design Upload Mockup" }]
  }
  {% endschema %}
</section>
