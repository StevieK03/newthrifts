{% comment %}
Enhanced Interactive Product Mockup
- Dynamic rendering with custom text from customizer
- Multiple views (Front, Back, Hanging, Person models)
- Real-time design updates
- Integration with existing customizer
- Printify-style professional mockup system
- Reverted to clean version
{% endcomment %}

<section id="nt-mockup-{{ section.id }}" class="nt-mockup" style="padding: 60px 0; background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);">
  <div class="container">
    
    <!-- Section Header -->
    <div class="mockup-header" style="text-align: center; margin-bottom: 60px; padding-top: 20px;">
      <h1 style="font-family: 'Bebas Neue', sans-serif; font-size: 56px; margin: 0 0 20px 0; color: #ffffff; text-shadow: -2px -2px 0 #000000, 2px -2px 0 #000000, -2px 2px 0 #000000, 2px 2px 0 #000000, 0 0 10px rgba(0,0,0,0.8), 0 0 20px rgba(255,255,255,0.3); letter-spacing: 3px; font-weight: 700; background: rgba(0,0,0,0.3); padding: 10px 20px; border-radius: 10px; display: inline-block;">
        🎨 Custom T-shirt Design
      </h1>
      <p style="font-size: 20px; color: #ffffff; margin: 0 0 25px 0; max-width: 700px; margin: 0 auto 25px auto; line-height: 1.6; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);">
        Upload your design and create your own custom t-shirt! 
        <br>Drag, resize, and position your artwork perfectly on the print area.
      </p>
      
      <!-- Feature highlights -->
      <div style="display: flex; justify-content: center; gap: 25px; flex-wrap: wrap; margin-top: 30px; padding: 20px; background: rgba(255,255,255,0.05); border-radius: 16px; border: 1px solid rgba(255,255,255,0.1);">
        <div style="display: flex; align-items: center; gap: 10px; color: #ffffff; font-size: 16px; font-weight: 500; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
          <span style="background: linear-gradient(45deg, #3b82f6, #1d4ed8); padding: 8px 12px; border-radius: 20px; font-size: 14px; color: white;">📁</span>
          <span>Upload any image</span>
        </div>
        <div style="display: flex; align-items: center; gap: 10px; color: #ffffff; font-size: 16px; font-weight: 500; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
          <span style="background: linear-gradient(45deg, #10b981, #059669); padding: 8px 12px; border-radius: 20px; font-size: 14px; color: white;">🎯</span>
          <span>Drag to position</span>
        </div>
        <div style="display: flex; align-items: center; gap: 10px; color: #ffffff; font-size: 16px; font-weight: 500; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
          <span style="background: linear-gradient(45deg, #f59e0b, #d97706); padding: 8px 12px; border-radius: 20px; font-size: 14px; color: white;">🔍</span>
          <span>Resize with scroll</span>
        </div>
        <div style="display: flex; align-items: center; gap: 10px; color: #ffffff; font-size: 16px; font-weight: 500; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
          <span style="background: linear-gradient(45deg, #8b5cf6, #7c3aed); padding: 8px 12px; border-radius: 20px; font-size: 14px; color: white;">🚀</span>
          <span>Submit for review</span>
        </div>
      </div>
    </div>

    <!-- Enhanced Preview Stage -->
    <div class="nt-mockup__stage" style="width: 100%; display: grid; place-items: center; margin-top: 60px !important; margin-bottom: 100px !important; padding: 0 20px;">
        <div class="nt-mockup__canvas" 
             id="nt-mockup-canvas-{{ section.id }}"
           style="position: relative; width: min(900px, 100%); max-width: 90vw; aspect-ratio: 1 / 1; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; overflow: hidden; box-shadow: 0 25px 80px rgba(102, 126, 234, 0.3), 0 10px 30px rgba(0,0,0,0.2); cursor: grab; --overlay-top: 30%; --overlay-left: 50%; --overlay-width: 50%; --overlay-height: 65%; --overlay-rotate: 0deg;">
      
  <!-- Base Mockup (swapped by JS) -->
  <img
    id="nt-base-{{ section.id }}"
    class="nt-mockup__base"
    src="{{ 'WFront_t-shirt.png' | asset_url }}"
    alt="T-shirt mockup"
    loading="eager"
    decoding="async"
    style="position: absolute; inset: 0; width: 100%; height: 100%; object-fit: contain; pointer-events: none;"
    onerror="console.error('❌ Failed to load t-shirt image:', this.src);"
    onload="console.log('✅ T-shirt image loaded:', this.src);"
  >
    
    <!-- Debug: Test direct asset access -->
    <div id="debug-assets-{{ section.id }}" style="position: absolute; top: -100px; left: -100px; width: 1px; height: 1px; overflow: hidden;">
      <img src="{{ 'WFront_t-shirt.png' | asset_url }}" onload="console.log('✅ Direct asset test - WFront_t-shirt.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - WFront_t-shirt.png failed:', this.src);">
      <img src="{{ 'Wback_t-shirt.png' | asset_url }}" onload="console.log('✅ Direct asset test - Wback_t-shirt.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - Wback_t-shirt.png failed:', this.src);">
      <img src="{{ 'Models/Women/Girl-Model.png' | asset_url }}" onload="console.log('✅ Direct asset test - Girl-Model.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - Girl-Model.png failed:', this.src);">
    </div>
    
    <!-- Dynamic Design Overlay - Aligned with print area -->
    <div
      id="nt-overlay-{{ section.id }}"
      class="nt-mockup__overlay"
      style="position: absolute; width: var(--overlay-width); height: var(--overlay-height); left: 50%; top: var(--overlay-top); transform: translateX(-50%) rotate(var(--overlay-rotate)); inset: auto; display: flex; align-items: center; justify-content: center; cursor: grab; transition: all 0.1s ease; border: 2px dashed rgba(39, 225, 193, 0.3); border-radius: 8px; background: rgba(39, 225, 193, 0.05);"
    >
      <span id="nt-design-text-{{ section.id }}" 
            style="font-family: 'Bebas Neue', sans-serif; font-size: 32px; font-weight: bold; color: #000000; text-align: center; white-space: nowrap; user-select: none; text-shadow: 1px 1px 2px rgba(255,255,255,0.8); pointer-events: none;">
        Your Design Here
      </span>
      
      <!-- Drag Handle (only visible when dragging) -->
      <div id="nt-drag-handle-{{ section.id }}" 
           style="position: absolute; top: -8px; right: -8px; width: 16px; height: 16px; background: #27e1c1; border: 2px solid white; border-radius: 50%; cursor: grab; display: none; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">
      </div>
      
      <!-- Enhanced Resize Handles - All Directions (Hidden by default, shown when selected) -->
      <!-- Top-Left -->
      <div class="resize-handle" data-direction="nw" 
           style="position: absolute; top: -15px; left: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: nw-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from top-left">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Top-Right -->
      <div class="resize-handle" data-direction="ne" 
           style="position: absolute; top: -15px; right: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: ne-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from top-right">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Bottom-Left -->
      <div class="resize-handle" data-direction="sw" 
           style="position: absolute; bottom: -15px; left: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: sw-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from bottom-left">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Bottom-Right -->
      <div class="resize-handle" data-direction="se" 
           style="position: absolute; bottom: -15px; right: -15px; width: 30px; height: 30px; background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: 4px solid white; border-radius: 50%; cursor: se-resize; display: none; box-shadow: 0 6px 20px rgba(255,107,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from bottom-right">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Top Edge -->
      <div class="resize-handle" data-direction="n" 
           style="position: absolute; top: -15px; left: 50%; transform: translateX(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: n-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from top">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Bottom Edge -->
      <div class="resize-handle" data-direction="s" 
           style="position: absolute; bottom: -15px; left: 50%; transform: translateX(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: s-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from bottom">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Left Edge -->
      <div class="resize-handle" data-direction="w" 
           style="position: absolute; left: -15px; top: 50%; transform: translateY(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: w-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from left">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
      
      <!-- Right Edge -->
      <div class="resize-handle" data-direction="e" 
           style="position: absolute; right: -15px; top: 50%; transform: translateY(-50%); width: 30px; height: 30px; background: linear-gradient(135deg, #20bf6b, #26a69a); border: 4px solid white; border-radius: 50%; cursor: e-resize; display: none; box-shadow: 0 6px 20px rgba(32,191,107,0.4), 0 2px 8px rgba(0,0,0,0.2); z-index: 10; touch-action: none; transition: all 0.2s ease;"
           title="Resize from right">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; background: white; border-radius: 50%;"></div>
      </div>
    </div>
    
    <!-- Crosshair Overlays (Hidden by default) -->
    <div id="nt-crosshairs-{{ section.id }}" style="position: absolute; inset: 0; pointer-events: none; display: none;">
      <!-- Horizontal crosshair -->
      <div style="position: absolute; top: 50%; left: 0; right: 0; height: 1px; background: rgba(39, 225, 193, 0.6); transform: translateY(-50%);"></div>
      <!-- Vertical crosshair -->
      <div style="position: absolute; left: 50%; top: 0; bottom: 0; width: 1px; background: rgba(39, 225, 193, 0.6); transform: translateX(-50%);"></div>
    </div>
    
    <!-- Print Area Indicator (Hidden by default) -->
    <div id="nt-print-area-{{ section.id }}" style="position: absolute; inset: 0; pointer-events: none; display: none;">
      <div style="position: absolute; top: var(--overlay-top); left: 50%; transform: translateX(-50%); width: var(--overlay-width); height: var(--overlay-height); border: 2px dashed rgba(39, 225, 193, 0.8); border-radius: 8px; background: rgba(39, 225, 193, 0.1);"></div>
    </div>
    
    <!-- Status Messages -->
    <div id="nt-centering-status-{{ section.id }}" style="position: absolute; top: 10px; left: 10px; background: rgba(0, 0, 0, 0.8); color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; font-weight: 600; display: none; max-width: 200px;">
      <div id="nt-status-text-{{ section.id }}"></div>
    </div>
  </div>
</div>

  <!-- Resize Handle (only visible when design is selected) -->
  <div id="nt-resize-handle-{{ section.id }}" 
       style="position: absolute; bottom: -8px; right: -8px; width: 20px; height: 20px; background: #8b5cf6; border: 2px solid white; border-radius: 50%; cursor: nw-resize; display: none; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; border-right: 2px solid white; border-bottom: 2px solid white; transform: translate(-50%, -50%) rotate(45deg);"></div>
  </div>
</div>

<p class="nt-mockup__hint" style="color: #6b7280; font-size: 14px; margin-top: 16px; text-align: center;">
  💡 Tip: Drag the design to move it, use scroll wheel to resize, or use the precise controls above
</p>
</div>

    <div class="nt-mockup__inner" style="display: grid; gap: 20px;">
      
      <!-- Design Customization Controls -->
      <div style="text-align: center; margin-bottom: 20px;">
        <h2 style="font-size: 24px; font-weight: 600; color: #ffffff; margin: 0 0 10px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">🎛️ Design Customization Controls</h2>
        <p style="font-size: 14px; color: #cbd5e1; margin: 0; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">Customize your t-shirt design with precision controls</p>
      </div>
      
      <div class="nt-mockup__controls" style="display: flex; flex-wrap: wrap; gap: 20px; align-items: center; justify-content: center; background: #1e293b; padding: 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); border: 1px solid #334155; max-width: 1200px; margin: 0 auto;">
        
        <!-- View Controls -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #f8fafc; margin-right: 12px;">View</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Mockup view" style="display: flex; gap: 8px;">
            <button class="nt-btn nt-btn--view is-active" data-view="front" aria-selected="true" style="padding: 8px 16px; border: 2px solid #3b82f6; background: #3b82f6; color: white; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👕 Front
            </button>
            <button class="nt-btn nt-btn--view" data-view="back" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👕 Back
            </button>
            <button class="nt-btn nt-btn--view" data-view="hanging" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🏷️ Hanging
            </button>
            <button class="nt-btn nt-btn--view" data-view="person1" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👤 Model 1
            </button>
            <button class="nt-btn nt-btn--view" data-view="person2" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👤 Model 2
            </button>
          </div>
        </div>

        <!-- Color Controls -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #f8fafc; margin-right: 12px;">Color</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Shirt color" style="display: flex; gap: 8px;">
            <button class="nt-btn nt-btn--color is-active" data-color="white" aria-selected="true" style="padding: 8px 16px; border: 2px solid #10b981; background: #10b981; color: white; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              ⚪ White
            </button>
            <button class="nt-btn nt-btn--color" data-color="black" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              ⚫ Black
            </button>
            <button class="nt-btn nt-btn--color" data-color="pink" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🩷 Pink
            </button>
            <button class="nt-btn nt-btn--color" data-color="blue" aria-selected="false" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔵 Blue
            </button>
          </div>
        </div>

        <!-- Enhanced 3D Controls -->
        <div class="nt-mockup__group" style="background: linear-gradient(135deg, #334155, #475569); padding: 16px; border-radius: 12px; border: 1px solid #475569;">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #f8fafc; margin-right: 12px;">🎯 3D Controls</span>
          <div class="nt-mockup__buttons" style="display: flex; gap: 8px; flex-wrap: wrap;">
            <button class="nt-btn nt-btn--3d" id="nt-3d-rotate-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔄 3D Rotate
            </button>
            <button class="nt-btn nt-btn--zoom" id="nt-zoom-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔍 Zoom
            </button>
            <button class="nt-btn nt-btn--validate" id="nt-validate-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              ✅ Validate
            </button>
            <button class="nt-btn nt-btn--reset" id="nt-reset-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #6b7280; background: #374151; color: #9ca3af; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔄 Reset
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="nt-mockup__group">
          <div class="upload-section" style="display: flex; flex-direction: column; gap: 8px; align-items: center;">
            <button class="nt-btn nt-btn--upload" id="nt-upload-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #3b82f6, #1d4ed8); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; position: relative; overflow: hidden;">
              📁 Upload Your Design
              <input type="file" id="nt-file-input-{{ section.id }}" accept=".png,.jpg,.jpeg,.svg,.pdf,.ai,.psd" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer;">
            </button>
            
            <div class="file-info" style="display: flex; gap: 12px; align-items: center; font-size: 12px; color: #6b7280;">
              <span>📄 Accepts:</span>
              <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">PNG</span>
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">JPG</span>
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">SVG</span>
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">PDF</span>
              </div>
              <button class="help-link" id="nt-help-{{ section.id }}" style="background: none; border: none; color: #3b82f6; cursor: pointer; font-size: 11px; text-decoration: underline;">
                ℹ️ Help
              </button>
            </div>
          </div>
          
          {% if section.settings.allow_download %}
          <button class="nt-btn nt-btn--primary" id="nt-download-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #10b981, #059669); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; margin-top: 16px;">
            📥 Download Mockup
          </button>
          {% endif %}
          
          <button class="nt-btn nt-btn--secondary" id="nt-edit-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #6b7280, #4b5563); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; margin-top: 16px;">
            ✏️ Edit Design
          </button>
          
          <button class="nt-btn nt-btn--danger" id="nt-remove-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #ef4444, #dc2626); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: none; margin-top: 16px;">
            🗑️ Remove Design
          </button>
          
          <button class="nt-btn nt-btn--success" id="nt-submit-request-btn-{{ section.id }}" style="
            padding: 10px 20px; 
            background: linear-gradient(45deg, #10b981, #059669, #047857, #10b981);
            background-size: 300% 300%;
            color: white; 
            border: none; 
            border-radius: 25px; 
            font-size: 14px; 
            font-weight: 600; 
            cursor: pointer; 
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            display: block; 
            margin-top: 8px;
            position: relative;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
            text-transform: uppercase;
            letter-spacing: 1px;
            animation: gradientShift 3s ease-in-out infinite;
          ">
            <span style="position: relative; z-index: 2; display: flex; align-items: center; gap: 8px;">
              🚀 Submit Request
            </span>
            <div style="
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
              transition: left 0.6s ease;
            "></div>
          </button>
        </div>
      </div>

      <!-- Advanced Placement Controls -->
      <div id="nt-placement-controls-{{ section.id }}" class="nt-placement-controls" style="display: block; background: white; padding: 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin: 10px 0 40px 0; max-width: 1200px; margin-left: auto; margin-right: auto;">
        <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
          <span style="font-weight: 600; font-size: 16px; color: #374151;">🎯 Precise Placement Controls</span>
          <button id="nt-auto-equidistant-{{ section.id }}" style="padding: 6px 12px; background: linear-gradient(45deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 8px; font-size: 12px; cursor: pointer; font-weight: 500; display: flex; align-items: center; gap: 4px;">
            ⚖️ Auto-Equidistant
          </button>
          <button id="nt-reset-placement-{{ section.id }}" style="padding: 6px 12px; background: #f3f4f6; color: #6b7280; border: 1px solid #d1d5db; border-radius: 8px; font-size: 12px; cursor: pointer;">
            🔄 Reset
          </button>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">
          <!-- Top Position -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>📐 Top Position</span>
              <span id="nt-top-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_top }}%</span>
            </label>
            <input type="range" id="nt-top-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_top }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>

          <!-- Left Position -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>📐 Left Position</span>
              <span id="nt-left-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_left }}%</span>
            </label>
            <input type="range" id="nt-left-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_left }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>

          <!-- Width -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>📏 Design Width</span>
              <span id="nt-width-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_width }}%</span>
            </label>
            <input type="range" id="nt-width-{{ section.id }}" min="10" max="100" step="1" value="{{ section.settings.overlay_width }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>

          <!-- Rotation -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>🔄 Rotation</span>
              <span id="nt-rotate-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_rotate }}°</span>
            </label>
            <input type="range" id="nt-rotate-{{ section.id }}" min="-45" max="45" step="0.5" value="{{ section.settings.overlay_rotate }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>
        </div>

        <!-- Placement Guide Controls -->
        <div style="margin-top: 20px; padding: 16px; background: #fef3c7; border-radius: 12px; border: 1px solid #fbbf24; max-width: 1200px; margin-left: auto; margin-right: auto;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #92400e;">🎯 Placement Guide</h5>
          <div style="display: flex; align-items: center; gap: 12px;">
            <button id="nt-toggle-guide-{{ section.id }}" style="padding: 8px 16px; background: linear-gradient(45deg, #f59e0b, #d97706); color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500;">
              📐 Show Placement Guide
            </button>
            <span style="font-size: 12px; color: #92400e;">Toggle crosshairs and placement area</span>
          </div>
        </div>

        <!-- Submit T-Shirt Request -->
        <div id="nt-submit-request-{{ section.id }}" style="margin-top: 20px; padding: 16px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 12px; border: 1px solid #10b981; display: none;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: white;">🎨 Submit Your T-Shirt Request</h5>
          <p style="margin: 0 0 16px 0; font-size: 12px; color: #d1fae5; line-height: 1.4;">
            Submit your design for review. We'll contact you within 24 hours to discuss your custom t-shirt!
          </p>
          
          <form id="nt-request-form-{{ section.id }}" style="display: grid; gap: 12px;">
            <!-- Customer Details -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px;">
              <div>
                <label style="display: block; margin-bottom: 4px; font-size: 12px; font-weight: 600; color: white;">Full Name *</label>
                <input type="text" id="nt-customer-name-{{ section.id }}" required 
                       style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; background: white;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 4px; font-size: 12px; font-weight: 600; color: white;">Email *</label>
                <input type="email" id="nt-customer-email-{{ section.id }}" required 
                       style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; background: white;">
              </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px;">
              <div>
                <label style="display: block; margin-bottom: 4px; font-size: 12px; font-weight: 600; color: white;">Phone Number</label>
                <input type="tel" id="nt-customer-phone-{{ section.id }}" 
                       style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; background: white;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 4px; font-size: 12px; font-weight: 600; color: white;">T-Shirt Size</label>
                <select id="nt-tshirt-size-{{ section.id }}" 
                        style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; background: white;">
                  <option value="">Select Size</option>
                  <option value="XXS">XXS</option>
                  <option value="XS">XS</option>
                  <option value="S">S</option>
                  <option value="M">M</option>
                  <option value="L">L</option>
                  <option value="XL">XL</option>
                  <option value="XXL">XXL</option>
                </select>
              </div>
            </div>
            
            <div>
              <label style="display: block; margin-bottom: 4px; font-size: 12px; font-weight: 600; color: white;">Special Instructions or Message</label>
              <textarea id="nt-customer-message-{{ section.id }}" rows="3" placeholder="Any special requirements, color preferences, or additional details..."
                        style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; background: white; resize: vertical;"></textarea>
            </div>
            
            <!-- Submit Button -->
            <div style="display: flex; gap: 8px; justify-content: flex-end;">
              <button type="button" id="nt-cancel-request-{{ section.id }}" 
                      style="padding: 8px 16px; background: #6b7280; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer;">
                Cancel
              </button>
              <button type="submit" id="nt-submit-request-form-btn-{{ section.id }}" 
                      style="padding: 8px 16px; background: #f59e0b; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 600;">
                🚀 Submit Request
              </button>
            </div>
          </form>
        </div>

        <!-- Size Chart -->
        <div class="size-chart-container" style="margin-top: 20px; padding: 16px; background: #f0f9ff; border-radius: 12px; border: 1px solid #0ea5e9;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #0c4a6e;">📏 Size Chart</h5>
          <div style="overflow-x: auto;">
            <table class="size-chart-table" style="width: 100%; border-collapse: collapse; font-size: 12px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
              <thead>
                <tr style="background: linear-gradient(135deg, #0ea5e9, #0284c7); color: white;">
                  <th style="padding: 8px; text-align: left; font-weight: 600;">Size</th>
                  <th style="padding: 8px; text-align: center; font-weight: 600;">Garment Length</th>
                  <th style="padding: 8px; text-align: center; font-weight: 600;">Chest Width</th>
                  <th style="padding: 8px; text-align: center; font-weight: 600;">Shoulder Width</th>
                  <th style="padding: 8px; text-align: center; font-weight: 600;">Sleeve Length</th>
                </tr>
              </thead>
              <tbody>
                <tr style="border-bottom: 1px solid #e5e7eb;">
                  <td style="padding: 8px; font-weight: 600; color: #374151;">XXS</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">52cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">46cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">42cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">19cm</td>
                </tr>
                <tr style="border-bottom: 1px solid #e5e7eb; background: #f8fafc;">
                  <td style="padding: 8px; font-weight: 600; color: #374151;">XS</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">54cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">48cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">43.5cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">19cm</td>
                </tr>
                <tr style="border-bottom: 1px solid #e5e7eb;">
                  <td style="padding: 8px; font-weight: 600; color: #374151;">S</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">56cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">50cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">45cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">20cm</td>
                </tr>
                <tr style="border-bottom: 1px solid #e5e7eb; background: #f8fafc;">
                  <td style="padding: 8px; font-weight: 600; color: #374151;">M</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">58cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">52cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">46.5cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">20cm</td>
                </tr>
                <tr style="border-bottom: 1px solid #e5e7eb;">
                  <td style="padding: 8px; font-weight: 600; color: #374151;">L</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">60cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">54cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">48cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">21cm</td>
                </tr>
                <tr style="border-bottom: 1px solid #e5e7eb; background: #f8fafc;">
                  <td style="padding: 8px; font-weight: 600; color: #374151;">XL</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">62cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">56cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">49.5cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">21cm</td>
                </tr>
                <tr>
                  <td style="padding: 8px; font-weight: 600; color: #374151;">XXL</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">64cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">58cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">51cm</td>
                  <td style="padding: 8px; text-align: center; color: #374151;">22cm</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div style="margin-top: 12px; padding: 8px; background: #fef3c7; border-radius: 6px; border: 1px solid #fbbf24;">
            <p style="margin: 0; font-size: 11px; color: #92400e; line-height: 1.4;">
              <strong>📏 Measurement Notes:</strong> Flat measurements with 1-3cm tolerance. Body shapes vary, please choose carefully. Slight color variations may occur due to lighting and printing.
            </p>
          </div>
        </div>

        <!-- Mockup Size Controls -->
        <div style="margin-top: 20px; padding: 16px; background: #f0fdf4; border-radius: 12px; border: 1px solid #bbf7d0; max-width: 1200px; margin-left: auto; margin-right: auto;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #166534;">🔍 Mockup Size Controls</h5>
          <div style="display: grid; grid-template-columns: 1fr auto; gap: 12px; align-items: end;">
            <div>
              <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
                <span>📏 T-shirt Scale</span>
                <span id="nt-mockup-scale-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">100%</span>
              </label>
              <input type="range" id="nt-mockup-scale-{{ section.id }}" min="50" max="130" step="5" value="100" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
            </div>
            <div style="display: flex; flex-direction: column; gap: 6px;">
              <button id="nt-zoom-in-{{ section.id }}" style="padding: 8px 12px; background: #4299e1; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500;">🔍 Zoom In</button>
              <button id="nt-zoom-out-{{ section.id }}" style="padding: 8px 12px; background: #ed8936; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500;">🔍 Zoom Out</button>
            </div>
          </div>
        </div>

        <!-- Design Size Presets -->
        <div style="margin-top: 20px; padding: 16px; background: #fef3c7; border-radius: 12px; border: 1px solid #fbbf24; max-width: 1200px; margin-left: auto; margin-right: auto;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #92400e;">⚡ Quick Size Presets</h5>
          <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin-bottom: 12px;">
            <button class="size-preset" data-size="25" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">25%</button>
            <button class="size-preset" data-size="50" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">50%</button>
            <button class="size-preset" data-size="75" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">75%</button>
            <button class="size-preset" data-size="100" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">100%</button>
          </div>
          <div style="display: flex; gap: 8px; align-items: center;">
            <button id="nt-reset-size-{{ section.id }}" style="padding: 6px 12px; background: #6b7280; color: white; border: none; border-radius: 4px; font-size: 11px; cursor: pointer; font-weight: 500;">🔄 Reset</button>
            <span style="font-size: 11px; color: #6b7280;">Double-click design to reset size</span>
          </div>
        </div>

        <div style="margin-top: 16px; padding: 12px; background: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
          <div style="font-size: 12px; color: #6b7280; text-align: center; line-height: 1.4;">
            💡 <strong>Pro Tips:</strong><br>
            • Drag design to move • Scroll wheel to resize • Ctrl+scroll for precise control<br>
            • Shift+scroll for large steps • Double-click to reset • Use keyboard arrows for fine control<br>
            • Ctrl+1/2/3/4 for quick presets (25%, 50%, 75%, 100%)
          </div>
        </div>
      </div>


<style>
/* Enhanced Button Styles */
.nt-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.nt-btn--view:hover:not(.is-active),
.nt-btn--color:hover:not(.is-active) {
  border-color: #27e1c1 !important;
  background: #f0fdfa !important;
  color: #27e1c1 !important;
}

.nt-btn--primary:hover {
  background: linear-gradient(45deg, #059669, #047857) !important;
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
}

.nt-btn--secondary:hover {
  background: linear-gradient(45deg, #a855f7, #9333ea) !important;
  box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
}

.nt-btn--upload:hover {
  background: linear-gradient(45deg, #d97706, #b45309) !important;
  box-shadow: 0 8px 25px rgba(245, 158, 11, 0.3);
}

.file-type:hover {
  background: #d1d5db !important;
}

.help-link:hover {
  color: #1d4ed8 !important;
}

/* Enhanced Interactive Styles */
.nt-mockup__overlay:hover {
  cursor: grab !important;
}

.nt-mockup__overlay:active {
  cursor: grabbing !important;
}

.nt-mockup__canvas.dragging {
  cursor: grabbing !important;
}

/* Enhanced Resize Handle Styles */
.resize-handle {
  transition: all 0.2s ease !important;
}

.resize-handle:hover {
  transform: scale(1.1) !important;
  box-shadow: 0 8px 25px rgba(0,0,0,0.3), 0 4px 12px rgba(0,0,0,0.2) !important;
}

.resize-handle:active {
  transform: scale(0.95) !important;
}

.resize-handle[data-direction*="nw"], 
.resize-handle[data-direction*="se"] {
  background: linear-gradient(135deg, #ff6b6b, #ee5a52) !important;
}

.resize-handle[data-direction*="ne"], 
.resize-handle[data-direction*="sw"] {
  background: linear-gradient(135deg, #ff6b6b, #ee5a52) !important;
}

.resize-handle[data-direction="n"], 
.resize-handle[data-direction="s"] {
  background: linear-gradient(135deg, #4ecdc4, #44a08d) !important;
}

.resize-handle[data-direction="w"], 
.resize-handle[data-direction="e"] {
  background: linear-gradient(135deg, #4ecdc4, #44a08d) !important;
}

/* Design Selection Styles */
.nt-mockup__overlay.design-selected {
  border-color: #27e1c1 !important;
  box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.3) !important;
}

.nt-mockup__overlay.design-selected:hover {
  cursor: grab !important;
  border-color: #27e1c1 !important;
  box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.4) !important;
}

/* Resize Handle Animations */
.resize-handle {
  transition: all 0.2s ease;
  display: none; /* Hidden by default, shown when design is selected */
}

.resize-handle:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 16px rgba(0,0,0,0.4) !important;
}

/* Show handles when design is selected */
.nt-mockup__overlay.design-selected .resize-handle {
  display: block !important;
}

/* Dark Mode Support for Size Chart */
@media (prefers-color-scheme: dark) {
  .size-chart-container {
    background: #1e293b !important;
    border-color: #334155 !important;
  }
  
  .size-chart-container h5 {
    color: #f1f5f9 !important;
  }
  
  .size-chart-table {
    background: #0f172a !important;
    color: #f1f5f9 !important;
  }
  
  .size-chart-table th {
    background: linear-gradient(135deg, #1e40af, #1d4ed8) !important;
    color: white !important;
  }
  
  .size-chart-table td {
    color: #f1f5f9 !important;
    border-color: #334155 !important;
  }
  
  .size-chart-table tr:nth-child(even) {
    background: #1e293b !important;
  }
  
  .size-chart-table tr:nth-child(odd) {
    background: #0f172a !important;
  }
  
  .size-chart-container p {
    background: #fbbf24 !important;
    color: #92400e !important;
  }
}

/* Additional dark mode support for any dark theme */
.dark .size-chart-container,
[data-theme="dark"] .size-chart-container {
  background: #1e293b !important;
  border-color: #334155 !important;
}

.dark .size-chart-container h5,
[data-theme="dark"] .size-chart-container h5 {
  color: #f1f5f9 !important;
}

.dark .size-chart-table,
[data-theme="dark"] .size-chart-table {
  background: #0f172a !important;
  color: #f1f5f9 !important;
}

.dark .size-chart-table th,
[data-theme="dark"] .size-chart-table th {
  background: linear-gradient(135deg, #1e40af, #1d4ed8) !important;
  color: white !important;
}

.dark .size-chart-table td,
[data-theme="dark"] .size-chart-table td {
  color: #f1f5f9 !important;
  border-color: #334155 !important;
}

.dark .size-chart-table tr:nth-child(even),
[data-theme="dark"] .size-chart-table tr:nth-child(even) {
  background: #1e293b !important;
}

.dark .size-chart-table tr:nth-child(odd),
[data-theme="dark"] .size-chart-table tr:nth-child(odd) {
  background: #0f172a !important;
}


.nt-placement-controls {
  animation: slideInUp 0.3s ease;
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0%, 100% { 
    transform: translate(-50%, -50%) scale(1); 
    opacity: 1; 
  }
  50% { 
    transform: translate(-50%, -50%) scale(1.1); 
    opacity: 0.8; 
  }
}

.placement-slider input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}

.placement-slider input[type="range"]::-webkit-slider-track {
  background: #e5e7eb;
  height: 6px;
  border-radius: 3px;
}

.placement-slider input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  background: #27e1c1;
  height: 18px;
  width: 18px;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  cursor: pointer;
}

.placement-slider input[type="range"]::-moz-range-track {
  background: #e5e7eb;
  height: 6px;
  border-radius: 3px;
  border: none;
}

.placement-slider input[type="range"]::-moz-range-thumb {
  background: #27e1c1;
  height: 18px;
  width: 18px;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  cursor: pointer;
}

/* Light/Dark Mode Support for Main Section */
@media (prefers-color-scheme: light) {
  .nt-mockup {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%) !important;
  }
  
  .mockup-header h1 {
    background: linear-gradient(45deg, #0f172a, #334155) !important;
    -webkit-background-clip: text !important;
    -webkit-text-fill-color: transparent !important;
    background-clip: text !important;
  }
  
  .mockup-header p {
    color: #475569 !important;
  }
  
  .mockup-header div {
    background: rgba(255, 255, 255, 0.8) !important;
    border: 1px solid rgba(0, 0, 0, 0.1) !important;
  }
  
  .mockup-header div span {
    color: #374151 !important;
  }
  
  .mockup-header div {
    background: rgba(255, 255, 255, 0.9) !important;
    border: 1px solid rgba(0, 0, 0, 0.1) !important;
  }
}

.dark .nt-mockup,
[data-theme="dark"] .nt-mockup {
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%) !important;
}

.light .nt-mockup,
[data-theme="light"] .nt-mockup {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%) !important;
}

.light .mockup-header h1,
[data-theme="light"] .mockup-header h1 {
  background: linear-gradient(45deg, #0f172a, #334155) !important;
  -webkit-background-clip: text !important;
  -webkit-text-fill-color: transparent !important;
  background-clip: text !important;
}

.light .mockup-header p,
[data-theme="light"] .mockup-header p {
  color: #475569 !important;
}

.light .mockup-header div,
[data-theme="light"] .mockup-header div {
  background: rgba(255, 255, 255, 0.8) !important;
  border: 1px solid rgba(0, 0, 0, 0.1) !important;
}

.light .mockup-header div span,
[data-theme="light"] .mockup-header div span {
  color: #374151 !important;
}

.light .mockup-header div,
[data-theme="light"] .mockup-header div {
  background: rgba(255, 255, 255, 0.9) !important;
  border: 1px solid rgba(0, 0, 0, 0.1) !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .nt-mockup__controls {
    flex-direction: column !important;
    gap: 15px !important;
  }
  
  .nt-mockup__group {
    flex-direction: column !important;
    gap: 8px !important;
  }
  
  .nt-mockup__buttons {
    flex-wrap: wrap !important;
    justify-content: center !important;
  }
  
  .mockup-header h2 {
    font-size: 32px !important;
  }
  
  .nt-mockup__canvas {
    width: 100% !important;
    max-width: 500px !important;
  }

  .nt-placement-controls {
    margin: 10px 0 !important;
    padding: 16px !important;
  }

  .placement-slider {
    margin-bottom: 12px !important;
  }
}

/* Animation Classes */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.mockup-header {
  animation: fadeInUp 0.6s ease;
}

.nt-mockup__controls {
  animation: fadeInUp 0.8s ease;
}

.nt-mockup__stage {
  animation: fadeInUp 1s ease;
}

/* Amazing Submit Request Button Animations */
@keyframes gradientShift {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

@keyframes pulse {
  0% { transform: scale(1); box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3); }
  50% { transform: scale(1.05); box-shadow: 0 12px 35px rgba(16, 185, 129, 0.5); }
  100% { transform: scale(1); box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3); }
}

@keyframes shimmer {
  0% { left: -100%; }
  100% { left: 100%; }
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-10px); }
  60% { transform: translateY(-5px); }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Submit Request Button Hover Effects */
#nt-submit-request-btn-{{ section.id }}:hover {
  transform: translateY(-3px) scale(1.05);
  box-shadow: 0 15px 40px rgba(16, 185, 129, 0.4);
  animation: pulse 1.5s ease-in-out infinite;
}

#nt-submit-request-btn-{{ section.id }}:hover div {
  animation: shimmer 0.8s ease-in-out;
}

#nt-submit-request-btn-{{ section.id }}:active {
  transform: translateY(-1px) scale(0.98);
  animation: bounce 0.6s ease;
}

#nt-submit-request-btn-{{ section.id }}:focus {
  outline: none;
  box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.3);
}

/* Loading state animation */
#nt-submit-request-btn-{{ section.id }}.loading {
  pointer-events: none;
  opacity: 0.8;
}

#nt-submit-request-btn-{{ section.id }}.loading span::after {
  content: '';
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid transparent;
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-left: 8px;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const mockup = {
    // Mockup images mapping - using tshirt-view.png as the base template
    mockupImages: {
      front: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      back: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      hanging: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      person1: {
        white: "{{ 'Girl-Model.png' | asset_url }}",
        black: "{{ 'Girl-Model.png' | asset_url }}",
        pink: "{{ 'Girl-Model.png' | asset_url }}",
        blue: "{{ 'Girl-Model.png' | asset_url }}"
      },
      person2: {
        white: "{{ 'Women-side.png' | asset_url }}",
        black: "{{ 'Women-side.png' | asset_url }}",
        pink: "{{ 'Women-side.png' | asset_url }}",
        blue: "{{ 'Women-side.png' | asset_url }}"
      }
    },
    
    // Current base mockup image - using tshirt-view.png as the default template
      baseMockup: "{{ 'tshirt-view.png' | asset_url }}",

    // Current design state
    designState: {
      text: 'Your Design Here',
      fontSize: 32,
      fontFamily: "'Bebas Neue', sans-serif",
      textColor: '#000000',
      shirtColor: 'white',
      effect: 'none'
    },

    // Current view state
    state: { view: "front", color: "white" },

    // Enhanced placement state - aligned with print area
    placementState: {
      topPct: 30,   // Adjusted to match print area top
      leftPct: 50,  // Centered horizontally
      widthPct: 50, // Adjusted to match print area width
      heightPct: 65, // Adjusted to match print area height (rectangular)
      rotateDeg: 0,
      dragging: false,
      resizing: false,
      resizeDirection: 'se',
      lastX: 0,
      lastY: 0,
      hasUploadedDesign: false,
      designSelected: false
    },

    init() {
      console.log('🎯 Initializing Enhanced Interactive Mockup...');
      this.bindEvents();
      this.loadFromCustomizer();
      this.updateBase();
      this.updateDesign();
      this.updatePlacementDisplay();
      
      setTimeout(() => {
        this.forceCenterPositioning();
      }, 100);
      
      this.showPlacementControls();
      this.deselectDesign();
      
      // Add debugging helper for image dimensions
      this.addDebugHelper();
      
      console.log('✅ Mockup initialized');
    },

    addDebugHelper() {
      // Add debugging function to window for easy console access
      window.debugImageSizes = () => {
        console.log('🔍 Debugging Image Sizes:');
        document.querySelectorAll('img').forEach(img => {
          const rect = img.getBoundingClientRect();
          console.log(
            `Image: ${img.src.split('/').pop()}\n` +
            `Natural size: ${img.naturalWidth}x${img.naturalHeight}px\n` +
            `Displayed size: ${rect.width.toFixed(2)}x${rect.height.toFixed(2)}px\n` +
            `Position: ${rect.left.toFixed(2)}px, ${rect.top.toFixed(2)}px`
          );
        });
      };
      
      // Add canvas debugging if canvas exists
      window.debugCanvasSize = () => {
        const canvas = document.querySelector('canvas');
        if (canvas) {
          console.log(`Canvas width: ${canvas.width}px, height: ${canvas.height}px`);
        } else {
          console.log('No canvas element found');
        }
      };
      
      console.log('🛠️ Debug helpers added:');
      console.log('- Run debugImageSizes() to check all image dimensions');
      console.log('- Run debugCanvasSize() to check canvas dimensions');
    },

    forceCenterPositioning() {
      this.placementState.topPct = 30;   // Aligned with print area top
      this.placementState.leftPct = 50;  // Centered horizontally
      this.placementState.widthPct = 50; // Aligned with print area width
      this.placementState.heightPct = 65; // Aligned with print area height
      this.placementState.rotateDeg = 0;
      
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      const rotateSlider = document.getElementById(`nt-rotate-{{ section.id }}`);
      
      if (topSlider) topSlider.value = 30;
      if (leftSlider) leftSlider.value = 50;
      if (widthSlider) widthSlider.value = 50;
      if (rotateSlider) rotateSlider.value = 0;
    },

    bindEvents() {
      const rootId = "nt-mockup-{{ section.id }}";
      
      // Keyboard event handling for delete/backspace
      document.addEventListener('keydown', (e) => {
        if ((e.key === 'Delete' || e.key === 'Backspace') && this.placementState.hasUploadedDesign && this.placementState.designSelected) {
          e.preventDefault();
          this.removeDesign();
          this.showMessage('🗑️ Design deleted with keyboard', 'info');
        }
      });
      
      // View buttons
      const viewBtns = Array.from(document.querySelectorAll(`#${rootId} .nt-btn--view`));
      viewBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          this.state.view = btn.dataset.view;
          this.setActive(viewBtns, this.state.view);
          this.updateBase();
        });
      });

      // Color buttons
      const colorBtns = Array.from(document.querySelectorAll(`#${rootId} .nt-btn--color`));
      colorBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          this.state.color = btn.dataset.color;
          this.setActive(colorBtns, this.state.color);
          this.updateBase();
        });
      });

      // Upload button
      const uploadBtn = document.getElementById(`nt-upload-{{ section.id }}`);
      const fileInput = document.getElementById(`nt-file-input-{{ section.id }}`);
      
      if (uploadBtn && fileInput) {
        uploadBtn.addEventListener("click", (e) => {
          if (e.target === uploadBtn) {
            console.log('📁 Upload button clicked');
            fileInput.click();
          }
        });

        fileInput.addEventListener("change", (e) => {
          console.log('📁 File input changed', e.target.files);
          const file = e.target.files[0];
          if (file) {
            console.log('📁 File selected:', file.name, file.type, file.size);
            this.handleFileUpload(file);
          }
        });
      }

      // Remove button
      const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
      if (removeBtn) {
        removeBtn.addEventListener("click", () => {
          this.removeDesign();
        });
      }

      // Placement controls
      this.bindPlacementControls();
      this.bindDragResize();
      this.bindPresetButtons();
      this.bindSubmitRequest();

      {% if section.settings.allow_download %}
      const downloadBtn = document.getElementById(`nt-download-{{ section.id }}`);
      if (downloadBtn) {
        downloadBtn.addEventListener("click", () => {
          this.downloadComposite();
        });
      }
      {% endif %}

      this.setupCustomizerListener();
    },

    setActive(buttons, active) {
      buttons.forEach(b => {
        const on = (b.dataset.view || b.dataset.color) === active;
        if (on) {
          b.classList.add("is-active");
          b.style.borderColor = "#27e1c1";
          b.style.background = "#27e1c1";
          b.style.color = "white";
        } else {
          b.classList.remove("is-active");
          b.style.borderColor = "#e2e8f0";
          b.style.background = "white";
          b.style.color = "#64748b";
        }
        b.setAttribute("aria-selected", on ? "true" : "false");
      });
    },

    updateBase() {
      const baseEl = document.getElementById("nt-base-{{ section.id }}");
      if (baseEl) {
        const mockupImage = this.mockupImages[this.state.view]?.[this.state.color] || 
                           this.mockupImages.front?.white ||
                           this.baseMockup;
        
        console.log('🔄 Loading mockup:', mockupImage);
        baseEl.src = '';
        setTimeout(() => {
          baseEl.src = mockupImage;
        }, 10);
      }
    },

    updateDesign() {
      const designText = document.getElementById("nt-design-text-{{ section.id }}");
      if (designText) {
        designText.textContent = this.designState.text;
        designText.style.fontFamily = this.designState.fontFamily;
        designText.style.fontSize = this.designState.fontSize + 'px';
        designText.style.color = this.designState.textColor;
      }
    },

    loadFromCustomizer() {
      if (window.customizer && window.customizer.state) {
        this.designState = { ...this.designState, ...window.customizer.state };
        this.updateDesign();
      }
    },

    setupCustomizerListener() {
      const originalUpdatePreview = window.customizer?.updatePreview;
      if (originalUpdatePreview) {
        window.customizer.updatePreview = () => {
          originalUpdatePreview.call(window.customizer);
          setTimeout(() => {
            this.loadFromCustomizer();
            this.updateDesign();
          }, 100);
        };
      }
    },

    handleFileUpload(file) {
      console.log('📤 Processing file:', file.name, file.type, file.size);
      
      const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/svg+xml'];
      if (!allowedTypes.includes(file.type)) {
        this.showMessage('❌ Invalid file type. Please upload PNG, JPG, or SVG files.', 'error');
        return;
      }
      
      const maxSize = 10 * 1024 * 1024;
      if (file.size > maxSize) {
        this.showMessage('❌ File too large. Please upload files smaller than 10MB.', 'error');
        return;
      }
      
      this.showMessage('📁 Processing your design...', 'info');
      
      const reader = new FileReader();
      reader.onload = (e) => {
        console.log('✅ File loaded, applying to mockup');
        this.applyUploadedDesign(e.target.result);
      };
      reader.readAsDataURL(file);
    },

    applyUploadedDesign(imageData) {
      console.log('🎨 Applying design to mockup');
      
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      const designText = document.getElementById(`nt-design-text-{{ section.id }}`);
      
      if (overlayDiv && designText) {
        designText.style.display = 'none';
        
        // Remove any existing uploaded image
        const existingImg = overlayDiv.querySelector('img');
        if (existingImg) {
          existingImg.remove();
        }
        
        const uploadedImg = document.createElement('img');
        uploadedImg.src = imageData;
        uploadedImg.style.cssText = `
          width: 100% !important;
          height: 100% !important;
          object-fit: contain !important;
          display: block;
          pointer-events: none;
        `;
        
        overlayDiv.appendChild(uploadedImg);
        
        this.placementState.hasUploadedDesign = true;
        
        const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
        const submitBtn = document.getElementById(`nt-submit-request-btn-{{ section.id }}`);
        
        console.log('🔍 Debugging button visibility:');
        console.log('Remove button found:', removeBtn);
        console.log('Submit button found:', submitBtn);
        
        if (removeBtn) {
          removeBtn.style.display = 'inline-block';
          console.log('✅ Remove button shown');
        } else {
          console.log('❌ Remove button not found');
        }
        
        if (submitBtn) {
          submitBtn.style.display = 'inline-block';
          console.log('✅ Submit button shown');
        } else {
          console.log('❌ Submit button not found');
        }
        
        this.showPlacementControls();
        this.selectDesign();
        
        console.log('✅ Design applied successfully');
        this.showMessage('✨ Design uploaded successfully!', 'success');
      } else {
        console.error('❌ Could not find overlay or design text elements');
      }
    },

    removeDesign() {
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      const designText = document.getElementById(`nt-design-text-{{ section.id }}`);
      
      if (overlayDiv && designText) {
        const uploadedImg = overlayDiv.querySelector('img');
        if (uploadedImg) {
          uploadedImg.remove();
        }
        
        designText.style.display = 'block';
        designText.textContent = 'Your Design Here';
        
        this.placementState.hasUploadedDesign = false;
        this.deselectDesign();
        
        const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
        if (removeBtn) {
          removeBtn.style.display = 'none';
        }
        
        this.placementState.topPct = 30;   // Aligned with print area top
        this.placementState.leftPct = 50;  // Centered horizontally
        this.placementState.widthPct = 50; // Aligned with print area width
        this.placementState.heightPct = 65; // Aligned with print area height
        this.placementState.rotateDeg = 0;
        
        this.updatePlacementDisplay();
        this.updateDesignPosition();
        
        this.showMessage('✅ Design removed', 'success');
      }
    },

    showPlacementControls() {
      const placementControls = document.getElementById(`nt-placement-controls-{{ section.id }}`);
      if (placementControls) {
        placementControls.style.display = 'block';
        setTimeout(() => {
          placementControls.style.opacity = '1';
          placementControls.style.transform = 'translateY(0)';
        }, 100);
      }
    },

    bindPlacementControls() {
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      const rotateSlider = document.getElementById(`nt-rotate-{{ section.id }}`);
      const resetBtn = document.getElementById(`nt-reset-placement-{{ section.id }}`);

      if (topSlider) {
        topSlider.addEventListener('input', () => {
          this.placementState.topPct = parseFloat(topSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (leftSlider) {
        leftSlider.addEventListener('input', () => {
          this.placementState.leftPct = parseFloat(leftSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (widthSlider) {
        widthSlider.addEventListener('input', () => {
          this.placementState.widthPct = parseFloat(widthSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (rotateSlider) {
        rotateSlider.addEventListener('input', () => {
          this.placementState.rotateDeg = parseFloat(rotateSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          this.resetPlacement();
        });
      }
    },

    updatePlacementDisplay() {
      const topVal = document.getElementById(`nt-top-val-{{ section.id }}`);
      const leftVal = document.getElementById(`nt-left-val-{{ section.id }}`);
      const widthVal = document.getElementById(`nt-width-val-{{ section.id }}`);
      const rotateVal = document.getElementById(`nt-rotate-val-{{ section.id }}`);

      if (topVal) topVal.textContent = this.placementState.topPct.toFixed(1) + '%';
      if (leftVal) leftVal.textContent = this.placementState.leftPct.toFixed(1) + '%';
      if (widthVal) widthVal.textContent = this.placementState.widthPct.toFixed(0) + '%';
      if (rotateVal) rotateVal.textContent = this.placementState.rotateDeg.toFixed(1) + '°';
    },

    updateDesignPosition() {
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      
      if (overlayDiv) {
        overlayDiv.style.top = this.placementState.topPct + '%';
        overlayDiv.style.left = this.placementState.leftPct + '%';
        overlayDiv.style.width = this.placementState.widthPct + '%';
        overlayDiv.style.height = this.placementState.heightPct + '%';
        // Always include translateX(-50%) to keep it centered horizontally
        overlayDiv.style.transform = `translateX(-50%) rotate(${this.placementState.rotateDeg}deg)`;
        overlayDiv.style.transformOrigin = 'center center';
      }
    },

    resetPlacement() {
      this.placementState.topPct = 30;   // Aligned with print area top
      this.placementState.leftPct = 50;  // Centered horizontally
      this.placementState.widthPct = 50; // Aligned with print area width
      this.placementState.heightPct = 65; // Aligned with print area height
      this.placementState.rotateDeg = 0;

      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      const rotateSlider = document.getElementById(`nt-rotate-{{ section.id }}`);

      if (topSlider) topSlider.value = this.placementState.topPct;
      if (leftSlider) leftSlider.value = this.placementState.leftPct;
      if (widthSlider) widthSlider.value = this.placementState.widthPct;
      if (rotateSlider) rotateSlider.value = this.placementState.rotateDeg;

      this.updatePlacementDisplay();
      this.updateDesignPosition();
    },

    bindDragResize() {
      const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      
      if (!canvas || !overlay) return;

      // Click to select design
      overlay.addEventListener('click', (e) => {
        e.stopPropagation();
        this.selectDesign();
      });

      // Click outside to deselect
      canvas.addEventListener('click', (e) => {
        if (e.target === canvas || e.target.classList.contains('nt-mockup__base')) {
          this.deselectDesign();
        }
      });

      // Bind resize handles
      const resizeHandles = document.querySelectorAll(`#nt-overlay-{{ section.id }} .resize-handle`);
      resizeHandles.forEach(handle => {
        handle.addEventListener('mousedown', (e) => {
        e.preventDefault();
        e.stopPropagation();
          this.startResize(e, handle.dataset.direction);
        });
      });

      // Mouse wheel resize
      overlay.addEventListener('wheel', (e) => {
        e.preventDefault();
        const delta = e.deltaY > 0 ? -2 : 2;
        this.resizeDesign(delta);
      });
    },

    startResize(e, direction) {
      this.placementState.resizing = true;
      this.placementState.resizeDirection = direction;
      this.placementState.lastX = e.clientX;
      this.placementState.lastY = e.clientY;

      const handleResize = (e) => {
      if (!this.placementState.resizing) return;
      
      const deltaX = e.clientX - this.placementState.lastX;
      const deltaY = e.clientY - this.placementState.lastY;
        
        this.resizeDesignByDirection(direction, deltaX, deltaY);
        
        this.placementState.lastX = e.clientX;
        this.placementState.lastY = e.clientY;
      };

      const stopResize = () => {
        this.placementState.resizing = false;
        document.removeEventListener('mousemove', handleResize);
        document.removeEventListener('mouseup', stopResize);
      };

      document.addEventListener('mousemove', handleResize);
      document.addEventListener('mouseup', stopResize);
    },

    resizeDesignByDirection(direction, deltaX, deltaY) {
      const sensitivity = 0.5;
      
      switch (direction) {
        case 'nw':
          this.placementState.topPct += deltaY * sensitivity;
          this.placementState.leftPct += deltaX * sensitivity;
          this.placementState.widthPct -= deltaX * sensitivity;
          this.placementState.heightPct -= deltaY * sensitivity;
          break;
        case 'ne':
          this.placementState.topPct += deltaY * sensitivity;
          this.placementState.widthPct += deltaX * sensitivity;
          this.placementState.heightPct -= deltaY * sensitivity;
          break;
        case 'sw':
          this.placementState.leftPct += deltaX * sensitivity;
          this.placementState.widthPct -= deltaX * sensitivity;
          this.placementState.heightPct += deltaY * sensitivity;
          break;
        case 'se':
          this.placementState.widthPct += deltaX * sensitivity;
          this.placementState.heightPct += deltaY * sensitivity;
          break;
        case 'n':
          this.placementState.topPct += deltaY * sensitivity;
          this.placementState.heightPct -= deltaY * sensitivity;
          break;
        case 's':
          this.placementState.heightPct += deltaY * sensitivity;
          break;
        case 'w':
          this.placementState.leftPct += deltaX * sensitivity;
          this.placementState.widthPct -= deltaX * sensitivity;
          break;
        case 'e':
          this.placementState.widthPct += deltaX * sensitivity;
          break;
      }

      // Constrain values
      this.placementState.topPct = Math.max(0, Math.min(100, this.placementState.topPct));
      this.placementState.leftPct = Math.max(0, Math.min(100, this.placementState.leftPct));
      this.placementState.widthPct = Math.max(10, Math.min(90, this.placementState.widthPct));
      this.placementState.heightPct = Math.max(10, Math.min(90, this.placementState.heightPct));
        
        this.updatePlacementDisplay();
        this.updateDesignPosition();
    },

    resizeDesign(delta) {
      this.placementState.widthPct += delta;
      this.placementState.heightPct += delta;
      
      // Constrain values
      this.placementState.widthPct = Math.max(10, Math.min(90, this.placementState.widthPct));
      this.placementState.heightPct = Math.max(10, Math.min(90, this.placementState.heightPct));
      
      this.updatePlacementDisplay();
      this.updateDesignPosition();
    },

    bindSubmitRequest() {
      const submitBtn = document.getElementById(`nt-submit-request-btn-{{ section.id }}`);
      const cancelBtn = document.getElementById(`nt-cancel-request-{{ section.id }}`);
      const requestForm = document.getElementById(`nt-request-form-{{ section.id }}`);
      const requestPanel = document.getElementById(`nt-submit-request-{{ section.id }}`);
      
      if (submitBtn) {
        submitBtn.addEventListener('click', () => {
          if (!this.placementState.hasUploadedDesign) {
            this.showMessage('❌ Please upload a design first', 'error');
            return;
          }
          requestPanel.style.display = 'block';
          requestPanel.scrollIntoView({ behavior: 'smooth' });
        });
      }
      
      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => {
          requestPanel.style.display = 'none';
        });
      }
      
      if (requestForm) {
        requestForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.submitTShirtRequest();
        });
      }
    },

    async submitTShirtRequest() {
      if (!this.placementState.hasUploadedDesign) {
        this.showMessage('❌ Please upload a design first', 'error');
        return;
      }

      // Get form data
      const customerName = document.getElementById(`nt-customer-name-{{ section.id }}`).value.trim();
      const customerEmail = document.getElementById(`nt-customer-email-{{ section.id }}`).value.trim();
      const customerPhone = document.getElementById(`nt-customer-phone-{{ section.id }}`).value.trim();
      const tshirtSize = document.getElementById(`nt-tshirt-size-{{ section.id }}`).value;
      const customerMessage = document.getElementById(`nt-customer-message-{{ section.id }}`).value.trim();

      // Validate required fields
      if (!customerName || !customerEmail) {
        this.showMessage('❌ Please fill in all required fields', 'error');
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(customerEmail)) {
        this.showMessage('❌ Please enter a valid email address', 'error');
        return;
      }

      try {
        // Add loading state to button
        const submitBtn = document.getElementById(`nt-submit-request-btn-{{ section.id }}`);
        if (submitBtn) {
          submitBtn.classList.add('loading');
          submitBtn.style.pointerEvents = 'none';
        }
        
        this.showMessage('📤 Submitting your request...', 'info');
        
        // Generate mockup image for submission
        const mockupImageData = await this.generateMockupForSubmission();
        
        // Prepare request data
        const requestData = {
          customer_name: customerName,
          customer_email: customerEmail,
          customer_phone: customerPhone || null,
          customer_message: customerMessage || null,
          tshirt_size: tshirtSize || null,
          design_data: {
            position: {
              top: this.placementState.topPct,
              left: this.placementState.leftPct,
              width: this.placementState.widthPct,
              height: this.placementState.heightPct,
              rotation: this.placementState.rotateDeg
            },
            view: this.state.view,
            color: this.state.color,
            canvas_size: { width: 2000, height: 2000 }
          },
          design_image_url: await this.uploadDesignToStorage(),
          mockup_image_url: mockupImageData
        };

        // Send email notification using EmailJS
        await this.sendEmailNotification(requestData);
        
        this.showMessage('🎉 Request submitted successfully! We\'ll contact you within 24 hours.', 'success');
        document.getElementById(`nt-submit-request-{{ section.id }}`).style.display = 'none';
        this.resetRequestForm();
        
        // Remove loading state
        if (submitBtn) {
          submitBtn.classList.remove('loading');
          submitBtn.style.pointerEvents = 'auto';
        }

      } catch (error) {
        console.error('Error submitting request:', error);
        this.showMessage('❌ Failed to submit request. Please try again.', 'error');
        
        // Remove loading state on error
        const submitBtn = document.getElementById(`nt-submit-request-btn-{{ section.id }}`);
        if (submitBtn) {
          submitBtn.classList.remove('loading');
          submitBtn.style.pointerEvents = 'auto';
        }
      }
    },

    async generateMockupForSubmission() {
      return new Promise((resolve) => {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        
        canvas.width = 2000;
        canvas.height = 2000;
        
        const baseImg = new Image();
        baseImg.crossOrigin = "anonymous";
        baseImg.src = document.getElementById("nt-base-{{ section.id }}").src;
        
        baseImg.onload = () => {
          ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

          const overlayImg = document.querySelector(`#nt-overlay-{{ section.id }} img`);
          
          if (overlayImg && overlayImg.src) {
            const designImg = new Image();
            designImg.crossOrigin = "anonymous";
            designImg.src = overlayImg.src;
            
            designImg.onload = () => {
              const topPct = this.placementState.topPct / 100;
              const leftPct = this.placementState.leftPct / 100;
              const widthPct = this.placementState.widthPct / 100;
              const heightPct = this.placementState.heightPct / 100;
              const rotateDeg = this.placementState.rotateDeg || 0;

              const designX = canvas.width * leftPct - (canvas.width * widthPct) / 2;
              const designY = canvas.height * topPct;
              const designWidth = canvas.width * widthPct;
              const designHeight = canvas.height * heightPct;
              
              ctx.save();
              ctx.translate(designX + designWidth / 2, designY + designHeight / 2);
              ctx.rotate(rotateDeg * Math.PI / 180);
              ctx.drawImage(designImg, -designWidth / 2, -designHeight / 2, designWidth, designHeight);
              ctx.restore();

              resolve(canvas.toDataURL("image/png"));
            };
          } else {
            resolve(canvas.toDataURL("image/png"));
          }
        };
      });
    },

    async uploadDesignToStorage() {
      const overlayImg = document.querySelector(`#nt-overlay-{{ section.id }} img`);
      if (overlayImg && overlayImg.src) {
        // Convert data URL to blob
        const response = await fetch(overlayImg.src);
        const blob = await response.blob();
        
        // Generate unique filename
        const timestamp = Date.now();
        const filename = `design_${timestamp}.png`;
        
        // For now, return the data URL (in production, upload to Supabase Storage)
        return overlayImg.src;
      }
      return null;
    },

    resetRequestForm() {
      document.getElementById(`nt-customer-name-{{ section.id }}`).value = '';
      document.getElementById(`nt-customer-email-{{ section.id }}`).value = '';
      document.getElementById(`nt-customer-phone-{{ section.id }}`).value = '';
      document.getElementById(`nt-tshirt-size-{{ section.id }}`).value = '';
      document.getElementById(`nt-customer-message-{{ section.id }}`).value = '';
    },

    async sendEmailNotification(requestData) {
      try {
        // Use Shopify's built-in contact form API
        const response = await fetch('/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            'form_type': 'contact',
            'utf8': '✓',
            'contact[name]': requestData.customer_name,
            'contact[email]': requestData.customer_email,
            'contact[phone]': requestData.customer_phone || 'Not provided',
            'contact[tshirt_size]': requestData.tshirt_size || 'Not specified',
            'contact[message]': `🎨 CUSTOM T-SHIRT REQUEST

Customer Information:
• Name: ${requestData.customer_name}
• Email: ${requestData.customer_email}
• Phone: ${requestData.customer_phone || 'Not provided'}
• T-Shirt Size: ${requestData.tshirt_size || 'Not specified'}

Design Details:
• View: ${requestData.design_data.view}
• Color: ${requestData.design_data.color}
• Position: Top ${requestData.design_data.position.top}%, Left ${requestData.design_data.position.left}%
• Size: ${requestData.design_data.position.width}% × ${requestData.design_data.position.height}%
• Rotation: ${requestData.design_data.position.rotation}°

Special Instructions:
${requestData.customer_message || 'No additional message'}

Design Images:
• Original Design: ${requestData.design_image_url}
• Mockup Preview: ${requestData.mockup_image_url}

Please review this request and contact the customer within 24 hours.`
          })
        });
        
        if (response.ok) {
          console.log('✅ T-shirt request email sent via Shopify contact form');
          return true;
        } else {
          console.error('❌ Failed to send email via Shopify:', response.status);
          return false;
        }
      } catch (error) {
        console.error('❌ Error sending email via Shopify:', error);
        return false;
      }
    },

    bindPresetButtons() {
      const presetButtons = document.querySelectorAll(`#nt-mockup-{{ section.id }} .size-preset`);
      presetButtons.forEach(button => {
        button.addEventListener('click', () => {
          const size = parseInt(button.dataset.size);
          this.setPresetSize(size);
          
          presetButtons.forEach(btn => {
            btn.style.background = '#f3f4f6';
            btn.style.borderColor = '#d1d5db';
            btn.style.color = '#374151';
          });
          button.style.background = '#27e1c1';
          button.style.borderColor = '#27e1c1';
          button.style.color = 'white';
        });
      });

      const resetBtn = document.getElementById(`nt-reset-size-{{ section.id }}`);
      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          this.resetToDefaultSize();
          presetButtons.forEach(btn => {
            btn.style.background = '#f3f4f6';
            btn.style.borderColor = '#d1d5db';
            btn.style.color = '#374151';
          });
        });
      }
    },

    setPresetSize(size) {
      this.placementState.widthPct = size;
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      if (widthSlider) widthSlider.value = size;
      
      this.showMessage(`📏 Set to ${size}%`, 'success');
    },

    resetToDefaultSize() {
      this.placementState.widthPct = 60;
      this.updatePlacementDisplay();
      this.updateDesignPosition();

      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      if (widthSlider) widthSlider.value = 60;

      this.showMessage('📏 Reset to default size (60%)', 'success');
    },

    selectDesign() {
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      if (overlay) {
        overlay.classList.add('design-selected');
        overlay.style.borderColor = '#27e1c1';
        overlay.style.boxShadow = '0 0 0 3px rgba(39, 225, 193, 0.3)';
      }
      this.placementState.designSelected = true;
    },

    deselectDesign() {
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      if (overlay) {
        overlay.classList.remove('design-selected');
        overlay.style.borderColor = 'rgba(39, 225, 193, 0.3)';
        overlay.style.boxShadow = 'none';
      }
      this.placementState.designSelected = false;
    },

    showMessage(message, type = 'info') {
      const messageEl = document.createElement('div');
      messageEl.textContent = message;
      Object.assign(messageEl.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        background: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#6b7280',
        color: 'white',
        padding: '12px 20px',
        borderRadius: '8px',
        fontSize: '14px',
        fontWeight: '500',
        zIndex: '10000',
        boxShadow: '0 4px 16px rgba(0, 0, 0, 0.15)',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease'
      });
      
      document.body.appendChild(messageEl);
      
      setTimeout(() => messageEl.style.transform = 'translateX(0)', 100);
      setTimeout(() => {
        messageEl.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (document.body.contains(messageEl)) {
            document.body.removeChild(messageEl);
          }
        }, 300);
      }, 3000);
    },

    {% if section.settings.allow_download %}
    downloadComposite() {
      console.log('📥 Starting download composite...');
      console.log('Current placement state:', this.placementState);
      
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      
      // Use higher resolution for better quality
      canvas.width = 2000;
      canvas.height = 2000;
      
      const baseImg = new Image();
      baseImg.crossOrigin = "anonymous";
      baseImg.src = document.getElementById("nt-base-{{ section.id }}").src;
      
      baseImg.onload = () => {
        console.log('✅ Base image loaded, drawing to canvas');
            ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

            const overlayImg = document.querySelector(`#nt-overlay-{{ section.id }} img`);
        console.log('Overlay image found:', overlayImg);
            
        if (overlayImg && overlayImg.src && this.placementState.hasUploadedDesign) {
          console.log('🎨 Processing uploaded design for download');
              const designImg = new Image();
              designImg.crossOrigin = "anonymous";
              designImg.src = overlayImg.src;
              
              designImg.onload = () => {
            console.log('✅ Design image loaded, applying to canvas');
            
            // Use the current placement state values
                const topPct = this.placementState.topPct / 100;
                const leftPct = this.placementState.leftPct / 100;
                const widthPct = this.placementState.widthPct / 100;
            const heightPct = this.placementState.heightPct / 100;
                const rotateDeg = this.placementState.rotateDeg || 0;

            // Calculate design position and size on canvas
            const designX = canvas.width * leftPct - (canvas.width * widthPct) / 2; // Center horizontally
            const designY = canvas.height * topPct;
            const designWidth = canvas.width * widthPct;
            const designHeight = canvas.height * heightPct;
            
            console.log('Design positioning:', {
              x: designX,
              y: designY,
              width: designWidth,
              height: designHeight,
              rotation: rotateDeg
            });
            
            // Apply rotation and draw the design
                ctx.save();
            ctx.translate(designX + designWidth / 2, designY + designHeight / 2);
                ctx.rotate(rotateDeg * Math.PI / 180);
                ctx.drawImage(designImg, -designWidth / 2, -designHeight / 2, designWidth, designHeight);
                ctx.restore();

            console.log('✅ Design applied to canvas, starting download');
            const a = document.createElement('a');
            a.download = `custom_mockup_${this.state.view}_${this.state.color}.png`;
            a.href = canvas.toDataURL("image/png");
            a.click();
            
            this.showMessage('📥 Mockup downloaded with design!', 'success');
              };

              designImg.onerror = () => {
            console.error('❌ Failed to load design image for download');
            this.showMessage('❌ Failed to load design for download', 'error');
          };
        } else {
          console.log('ℹ️ No uploaded design found, downloading base mockup only');
          const a = document.createElement('a');
          a.download = `custom_mockup_${this.state.view}_${this.state.color}.png`;
          a.href = canvas.toDataURL("image/png");
          a.click();
          
          this.showMessage('📥 Mockup downloaded (no design)', 'info');
          }
        };

        baseImg.onerror = () => {
        console.error('❌ Failed to load base image for download');
        this.showMessage('❌ Failed to load base image for download', 'error');
      };
    }
    {% endif %}
  };

  mockup.init();
  window.mockup = mockup;

  console.log('🚀 Enhanced Interactive Mockup initialized! 🎨');
});
</script>

{% schema %}
{
  "name": "Interactive Mockup",
  "class": "section-interactive-mockup",
  "settings": [
    {
      "type": "header",
      "content": "🖼 Base T-shirt Mockup"
    },
    {
      "type": "image_picker",
      "id": "base_mockup",
      "label": "Base T-shirt Image",
      "info": "Upload a high-quality T-shirt mockup image. Recommended size: 800x800px or larger."
    },
    {
      "type": "header",
      "content": "📐 Design Overlay Settings"
    },
    {
      "type": "range",
      "id": "overlay_top",
      "min": 0,
      "max": 90,
      "step": 1,
      "unit": "%",
      "label": "Top Position",
      "default": 45
    },
    {
      "type": "range",
      "id": "overlay_left",
      "min": 0,
      "max": 90,
      "step": 1,
      "unit": "%",
      "label": "Left Position",
      "default": 25
    },
    {
      "type": "range",
      "id": "overlay_width",
      "min": 10,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Design Width",
      "default": 60
    },
    {
      "type": "range",
      "id": "overlay_rotate",
      "min": -45,
      "max": 45,
      "step": 1,
      "unit": "°",
      "label": "Design Rotation",
      "default": 0
    },
    {
      "type": "header",
      "content": "⚙️ Options"
    },
    {
      "type": "checkbox",
      "id": "allow_download",
      "label": "Enable Download Feature",
      "default": true
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Interactive Mockup"
    }
  ]
}
{% endschema %}
