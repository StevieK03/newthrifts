{% comment %}
Enhanced Interactive Product Mockup
- Dynamic rendering with custom text from customizer
- Multiple views (Front, Back, Hanging, Person models)
- Real-time design updates
- Integration with existing customizer
- Printify-style professional mockup system
- Reverted to clean version
{% endcomment %}

<section id="nt-mockup-{{ section.id }}" class="nt-mockup nt-mockup-section" style="padding: 60px 0;">
  <div class="container">
    
    <!-- Section Header -->
    <div class="mockup-header" style="text-align: center; margin-bottom: 40px;">
      <h2 style="font-family: 'Bebas Neue', sans-serif; font-size: 42px; margin: 0 0 16px 0; background: linear-gradient(45deg, #27e1c1, #ff4fa3); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
        🚀 Enhanced Live Design Preview
      </h2>
      <p class="mockup-description" style="font-size: 18px; margin: 0; max-width: 600px; margin: 0 auto;">
        See your custom design come to life with our professional mockup system. Now with 3D rotation, real-time editing, design validation, and advanced customization tools.
      </p>
    </div>

    <div class="nt-mockup__inner" style="display: grid; gap: 20px;">
      
      <!-- Enhanced Controls -->
      <div class="nt-mockup__controls" style="display: flex; flex-wrap: wrap; gap: 20px; align-items: center; justify-content: center; background: #1e293b; padding: 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); border: 1px solid #334155;">
        
        <!-- View Controls -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #f8fafc; margin-right: 12px;">View</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Mockup view" style="display: flex; gap: 8px;">
            <button class="nt-btn nt-btn--view is-active" data-view="front" aria-selected="true" style="padding: 8px 16px; border: 2px solid #27e1c1; background: #27e1c1; color: white; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👕 Front
            </button>
            <button class="nt-btn nt-btn--view" data-view="back" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👕 Back
            </button>
            <button class="nt-btn nt-btn--view" data-view="hanging" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🏷️ Hanging
            </button>
            <button class="nt-btn nt-btn--view" data-view="person1" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👤 Model 1
            </button>
            <button class="nt-btn nt-btn--view" data-view="person2" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              👤 Model 2
            </button>
          </div>
        </div>

        <!-- Color Controls -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #f8fafc; margin-right: 12px;">Color</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Shirt color" style="display: flex; gap: 8px;">
            <button class="nt-btn nt-btn--color is-active" data-color="white" aria-selected="true" style="padding: 8px 16px; border: 2px solid #27e1c1; background: #27e1c1; color: white; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              ⚪ White
            </button>
            <button class="nt-btn nt-btn--color" data-color="black" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              ⚫ Black
            </button>
            <button class="nt-btn nt-btn--color" data-color="pink" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🩷 Pink
            </button>
            <button class="nt-btn nt-btn--color" data-color="blue" aria-selected="false" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔵 Blue
            </button>
          </div>
        </div>

        <!-- Size Selector with Size Guide -->
        <div class="nt-mockup__group" style="background: linear-gradient(135deg, #667eea, #764ba2); padding: 16px; border-radius: 12px; border: 1px solid rgba(255,255,255,0.2);">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #fff; margin-right: 12px;">📏 Size</span>
          <div style="display: flex; gap: 8px; align-items: center; flex-wrap: wrap;">
            <select id="mockup-size-select-{{ section.id }}" class="mockup-size-select" style="padding: 8px 16px; border: 2px solid rgba(255,255,255,0.3); background: rgba(255,255,255,0.15); color: #fff; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; min-width: 100px;">
              <option value="">Select Size</option>
              <option value="XXS">XXS</option>
              <option value="XS">XS</option>
              <option value="S">S</option>
              <option value="M" selected>M</option>
              <option value="L">L</option>
              <option value="XL">XL</option>
              <option value="XXL">XXL</option>
            </select>
            <button class="nt-btn nt-btn--size-guide" id="mockup-size-guide-{{ section.id }}" style="padding: 8px 16px; border: 2px solid rgba(255,255,255,0.3); background: rgba(255,255,255,0.2); color: #fff; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; white-space: nowrap;">
              📐 Size Guide
            </button>
          </div>
          <div id="size-info-{{ section.id }}" class="size-info" style="margin-top: 8px; font-size: 12px; color: rgba(255,255,255,0.9); display: none;">
            <span id="size-details-{{ section.id }}"></span>
          </div>
        </div>

        <!-- Enhanced 3D Controls -->
        <div class="nt-mockup__group" style="background: linear-gradient(135deg, #334155, #475569); padding: 16px; border-radius: 12px; border: 1px solid #475569;">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: #f8fafc; margin-right: 12px;">🎯 3D Controls</span>
          <div class="nt-mockup__buttons" style="display: flex; gap: 8px; flex-wrap: wrap;">
            <button class="nt-btn nt-btn--3d" id="nt-3d-rotate-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔄 3D Rotate
            </button>
            <button class="nt-btn nt-btn--zoom" id="nt-zoom-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔍 Zoom
            </button>
            <button class="nt-btn nt-btn--validate" id="nt-validate-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              ✅ Validate
            </button>
            <button class="nt-btn nt-btn--reset" id="nt-reset-{{ section.id }}" style="padding: 8px 16px; border: 2px solid #e2e8f0; background: white; color: #64748b; border-radius: 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
              🔄 Reset
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="nt-mockup__group">
          <div class="upload-section" style="display: flex; flex-direction: column; gap: 8px; align-items: center;">
            <button class="nt-btn nt-btn--upload" id="nt-upload-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #f59e0b, #d97706); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; position: relative; overflow: hidden;">
              📁 Upload Your Design
              <input type="file" id="nt-file-input-{{ section.id }}" accept=".png,.jpg,.jpeg,.svg,.pdf,.ai,.psd" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer;">
            </button>
            
            <div class="file-info" style="display: flex; gap: 12px; align-items: center; font-size: 12px; color: #6b7280;">
              <span>📄 Accepts:</span>
              <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">PNG</span>
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">JPG</span>
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">SVG</span>
                <span class="file-type" style="background: #e5e7eb; padding: 2px 6px; border-radius: 4px; font-size: 11px;">PDF</span>
              </div>
              <button class="help-link" id="nt-help-{{ section.id }}" style="background: none; border: none; color: #3b82f6; cursor: pointer; font-size: 11px; text-decoration: underline;">
                ℹ️ Help
              </button>
            </div>
          </div>
          
          {% if section.settings.allow_download %}
          <button class="nt-btn nt-btn--primary" id="nt-download-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #10b981, #059669); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; margin-top: 16px;">
            📥 Download Mockup
          </button>
          {% endif %}
          
          <button class="nt-btn nt-btn--secondary" id="nt-edit-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #8b5cf6, #a855f7); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; margin-top: 16px;">
            ✏️ Edit Design
          </button>
          
          <button class="nt-btn nt-btn--danger" id="nt-remove-{{ section.id }}" style="padding: 10px 20px; background: linear-gradient(45deg, #ef4444, #dc2626); color: white; border: none; border-radius: 25px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: none; margin-top: 16px;">
            🗑️ Remove Design
          </button>
        </div>
      </div>

      <!-- Advanced Placement Controls -->
      <div id="nt-placement-controls-{{ section.id }}" class="nt-placement-controls" style="display: block; background: white; padding: 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin: 10px 0 40px 0;">
        <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
          <span style="font-weight: 600; font-size: 16px; color: #374151;">🎯 Precise Placement Controls</span>
          <button id="nt-auto-equidistant-{{ section.id }}" style="padding: 6px 12px; background: linear-gradient(45deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 8px; font-size: 12px; cursor: pointer; font-weight: 500; display: flex; align-items: center; gap: 4px;">
            ⚖️ Auto-Equidistant
          </button>
          <button id="nt-reset-placement-{{ section.id }}" style="padding: 6px 12px; background: #f3f4f6; color: #6b7280; border: 1px solid #d1d5db; border-radius: 8px; font-size: 12px; cursor: pointer;">
            🔄 Reset
          </button>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">
          <!-- Top Position -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>📐 Top Position</span>
              <span id="nt-top-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_top }}%</span>
            </label>
            <input type="range" id="nt-top-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_top }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>

          <!-- Left Position -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>📐 Left Position</span>
              <span id="nt-left-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_left }}%</span>
            </label>
            <input type="range" id="nt-left-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_left }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>

          <!-- Width -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>📏 Design Width</span>
              <span id="nt-width-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_width }}%</span>
            </label>
            <input type="range" id="nt-width-{{ section.id }}" min="10" max="100" step="1" value="{{ section.settings.overlay_width }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>

          <!-- Rotation -->
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
              <span>🔄 Rotation</span>
              <span id="nt-rotate-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">{{ section.settings.overlay_rotate }}°</span>
            </label>
            <input type="range" id="nt-rotate-{{ section.id }}" min="-45" max="45" step="0.5" value="{{ section.settings.overlay_rotate }}" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
          </div>
        </div>

        <!-- Placement Guide Controls -->
        <div style="margin-top: 20px; padding: 16px; background: #fef3c7; border-radius: 12px; border: 1px solid #fbbf24;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #92400e;">🎯 Placement Guide</h5>
          <div style="display: flex; align-items: center; gap: 12px;">
            <button id="nt-toggle-guide-{{ section.id }}" style="padding: 8px 16px; background: linear-gradient(45deg, #f59e0b, #d97706); color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500;">
              📐 Show Placement Guide
            </button>
            <span style="font-size: 12px; color: #92400e;">Toggle crosshairs and placement area</span>
          </div>
        </div>

        <!-- Mockup Size Controls -->
        <div style="margin-top: 20px; padding: 16px; background: #f0fdf4; border-radius: 12px; border: 1px solid #bbf7d0;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #166534;">🔍 Mockup Size Controls</h5>
          <div style="display: grid; grid-template-columns: 1fr auto; gap: 12px; align-items: end;">
            <div>
              <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #374151;">
                <span>📏 T-shirt Scale</span>
                <span id="nt-mockup-scale-val-{{ section.id }}" style="font-weight: 600; color: #27e1c1;">100%</span>
              </label>
              <input type="range" id="nt-mockup-scale-{{ section.id }}" min="50" max="130" step="5" value="100" style="width: 100%; height: 6px; background: #e5e7eb; border-radius: 3px; outline: none; cursor: pointer;">
            </div>
            <div style="display: flex; flex-direction: column; gap: 6px;">
              <button id="nt-zoom-in-{{ section.id }}" style="padding: 8px 12px; background: #4299e1; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500;">🔍 Zoom In</button>
              <button id="nt-zoom-out-{{ section.id }}" style="padding: 8px 12px; background: #ed8936; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500;">🔍 Zoom Out</button>
            </div>
          </div>
        </div>

        <!-- Design Size Presets -->
        <div style="margin-top: 20px; padding: 16px; background: #fef3c7; border-radius: 12px; border: 1px solid #fbbf24;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #92400e;">⚡ Quick Size Presets</h5>
          <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin-bottom: 12px;">
            <button class="size-preset" data-size="25" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">25%</button>
            <button class="size-preset" data-size="50" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">50%</button>
            <button class="size-preset" data-size="75" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">75%</button>
            <button class="size-preset" data-size="100" style="padding: 8px 12px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 6px; font-size: 12px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">100%</button>
          </div>
          <div style="display: flex; gap: 8px; align-items: center;">
            <button id="nt-reset-size-{{ section.id }}" style="padding: 6px 12px; background: #6b7280; color: white; border: none; border-radius: 4px; font-size: 11px; cursor: pointer; font-weight: 500;">🔄 Reset</button>
            <span style="font-size: 11px; color: #6b7280;">Double-click design to reset size</span>
          </div>
        </div>

        <div style="margin-top: 16px; padding: 12px; background: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
          <div style="font-size: 12px; color: #6b7280; text-align: center; line-height: 1.4;">
            💡 <strong>Pro Tips:</strong><br>
            • Drag design to move • Scroll wheel to resize • Ctrl+scroll for precise control<br>
            • Shift+scroll for large steps • Double-click to reset • Use keyboard arrows for fine control<br>
            • Ctrl+1/2/3/4 for quick presets (25%, 50%, 75%, 100%)
          </div>
        </div>
      </div>

      <!-- Enhanced Preview Stage -->
        <div class="nt-mockup__stage" style="width: 100%; display: grid; place-items: center; margin-top: 60px !important; margin-bottom: 100px !important; padding: 0 20px;">
          <div style="width: 100%; max-width: 900px;">
            <h3 style="text-align: center; color: #f8fafc; font-size: 18px; font-weight: 600; margin-bottom: 20px; letter-spacing: 0.05em; text-transform: uppercase;">
              👕 T-SHIRT MOCKUP
            </h3>
            <div class="nt-mockup__canvas" 
                 id="nt-mockup-canvas-{{ section.id }}"
                 style="position: relative; width: 100%; max-width: 900px; aspect-ratio: 1 / 1; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 20px; overflow: hidden; box-shadow: 0 25px 80px rgba(0, 0, 0, 0.1), 0 10px 30px rgba(0,0,0,0.08), inset 0 1px 0 rgba(255,255,255,0.8); cursor: grab; --overlay-top: 35%; --overlay-left: 50%; --overlay-width: 50%; --overlay-rotate: 0deg; border: 3px solid rgba(255,255,255,0.5);">
          
      <!-- Base Mockup - Using tshirt-view.png -->
      <img
        id="nt-base-{{ section.id }}"
        class="nt-mockup__base"
        src="{{ 'tshirt-view.png' | asset_url }}"
        alt="T-shirt mockup"
        loading="eager"
        decoding="async"
        style="position: absolute; inset: 0; width: 100%; height: 100%; object-fit: contain; pointer-events: none; z-index: 2;"
        onerror="this.style.display='none'; console.error('Failed to load tshirt-view.png');"
        onload="document.getElementById('nt-fallback-{{ section.id }}').style.display='none'; console.log('✅ tshirt-view.png loaded successfully');"
      >
      
      <!-- SVG Fallback Mockup - Shows by default -->
      <div id="nt-fallback-{{ section.id }}" style="position: absolute; inset: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; pointer-events: none; z-index: 1;">
        <svg viewBox="0 0 400 500" style="width: 70%; height: 85%; filter: drop-shadow(0 15px 40px rgba(0,0,0,0.2));">
          <defs>
            <!-- Realistic fabric gradient -->
            <linearGradient id="fabricGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
              <stop offset="30%" style="stop-color:#fafafa;stop-opacity:1" />
              <stop offset="50%" style="stop-color:#f5f5f5;stop-opacity:1" />
              <stop offset="70%" style="stop-color:#fafafa;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#ffffff;stop-opacity:1" />
            </linearGradient>
            
            <!-- Sleeve shadows -->
            <radialGradient id="sleeveShadow">
              <stop offset="0%" style="stop-color:#e0e0e0;stop-opacity:0.4" />
              <stop offset="100%" style="stop-color:#ffffff;stop-opacity:0" />
            </radialGradient>
            
            <!-- Neck shadow -->
            <radialGradient id="neckShadow" cx="50%" cy="50%">
              <stop offset="0%" style="stop-color:#d0d0d0;stop-opacity:0.6" />
              <stop offset="100%" style="stop-color:#f5f5f5;stop-opacity:0" />
            </radialGradient>
            
            <!-- Fabric texture pattern -->
            <pattern id="fabricTexture" patternUnits="userSpaceOnUse" width="4" height="4">
              <rect width="4" height="4" fill="#ffffff"/>
              <circle cx="2" cy="2" r="0.3" fill="#f8f8f8"/>
            </pattern>
          </defs>
          
          <!-- Body shadow (underneath) -->
          <ellipse cx="200" cy="465" rx="95" ry="12" fill="rgba(0,0,0,0.12)"/>
          
          <!-- Main t-shirt body with realistic shading -->
          <path d="M 95 85 L 75 105 L 72 185 Q 72 260 90 340 L 92 470 L 308 470 L 310 340 Q 328 260 328 185 L 325 105 L 305 85 L 285 95 Q 250 115 200 115 Q 150 115 115 95 Z" 
                fill="url(#fabricGradient)" 
                stroke="#d4d4d4" 
                stroke-width="1.5"
                filter="url(#fabricTexture)"/>
          
          <!-- Left side shadow for depth -->
          <path d="M 95 85 L 75 105 L 72 185 Q 72 260 90 340 L 92 470 L 110 470 L 108 340 Q 90 260 90 185 L 92 105 Z" 
                fill="rgba(0,0,0,0.04)"/>
          
          <!-- Right side highlight -->
          <path d="M 305 85 L 325 105 L 328 185 Q 328 260 310 340 L 308 470 L 290 470 L 292 340 Q 310 260 310 185 L 308 105 Z" 
                fill="rgba(255,255,255,0.3)"/>
          
          <!-- Left sleeve with realistic shading -->
          <g>
            <path d="M 95 85 L 75 105 L 55 135 L 45 170 L 52 200 L 72 185" 
                  fill="url(#fabricGradient)" 
                  stroke="#d4d4d4" 
                  stroke-width="1.5"/>
            <ellipse cx="60" cy="150" rx="25" ry="45" fill="url(#sleeveShadow)" opacity="0.5"/>
            <!-- Sleeve fold -->
            <path d="M 50 140 Q 55 155 50 170" stroke="#e8e8e8" stroke-width="1.5" fill="none"/>
          </g>
          
          <!-- Right sleeve with realistic shading -->
          <g>
            <path d="M 305 85 L 325 105 L 345 135 L 355 170 L 348 200 L 328 185" 
                  fill="url(#fabricGradient)" 
                  stroke="#d4d4d4" 
                  stroke-width="1.5"/>
            <ellipse cx="340" cy="150" rx="25" ry="45" fill="url(#sleeveShadow)" opacity="0.5"/>
            <!-- Sleeve fold -->
            <path d="M 350 140 Q 345 155 350 170" stroke="#e8e8e8" stroke-width="1.5" fill="none"/>
          </g>
          
          <!-- Neck opening with realistic depth -->
          <g>
            <!-- Neck shadow/depth -->
            <ellipse cx="200" cy="95" rx="42" ry="28" fill="url(#neckShadow)"/>
            <!-- Neck opening -->
            <ellipse cx="200" cy="92" rx="38" ry="26" fill="#f0f0f0" stroke="#c0c0c0" stroke-width="1.5"/>
            <!-- Inner neck highlight -->
            <ellipse cx="200" cy="90" rx="35" ry="23" fill="#fafafa"/>
          </g>
          
          <!-- Collar ribbing with realistic texture -->
          <g>
            <path d="M 162 92 Q 162 84 180 80 L 220 80 Q 238 84 238 92" 
                  fill="#f5f5f5" 
                  stroke="#d0d0d0" 
                  stroke-width="1.2"/>
            <!-- Collar stitching lines -->
            <path d="M 165 90 Q 165 85 180 82 L 220 82 Q 235 85 235 90" 
                  stroke="#e5e5e5" 
                  stroke-width="0.5" 
                  fill="none"/>
          </g>
          
          <!-- Center vertical fold/seam -->
          <path d="M 200 115 L 200 470" 
                stroke="rgba(0,0,0,0.03)" 
                stroke-width="2" 
                fill="none"/>
          
          <!-- Side seams with realistic stitching -->
          <g>
            <path d="M 95 115 L 92 470" stroke="#e8e8e8" stroke-width="1" stroke-dasharray="3,2"/>
            <path d="M 305 115 L 308 470" stroke="#e8e8e8" stroke-width="1" stroke-dasharray="3,2"/>
          </g>
          
          <!-- Fabric folds and wrinkles for realism -->
          <g opacity="0.15">
            <!-- Chest area subtle folds -->
            <path d="M 120 160 Q 140 165 160 160" stroke="#d0d0d0" stroke-width="1.5" fill="none"/>
            <path d="M 240 160 Q 260 165 280 160" stroke="#d0d0d0" stroke-width="1.5" fill="none"/>
            
            <!-- Mid-section natural wrinkles -->
            <path d="M 110 250 Q 130 255 150 250" stroke="#d0d0d0" stroke-width="1" fill="none"/>
            <path d="M 250 250 Q 270 255 290 250" stroke="#d0d0d0" stroke-width="1" fill="none"/>
            
            <!-- Lower section subtle folds -->
            <path d="M 105 370 Q 130 375 155 370" stroke="#d0d0d0" stroke-width="1" fill="none"/>
            <path d="M 245 370 Q 270 375 295 370" stroke="#d0d0d0" stroke-width="1" fill="none"/>
          </g>
          
          <!-- Hem at bottom with stitching -->
          <g>
            <rect x="92" y="465" width="216" height="8" fill="#f8f8f8" stroke="#d4d4d4" stroke-width="0.8"/>
            <line x1="95" y1="467" x2="305" y2="467" stroke="#e8e8e8" stroke-width="0.5" stroke-dasharray="2,1"/>
          </g>
          
          <!-- Highlights for fabric shine -->
          <g opacity="0.25">
            <ellipse cx="160" cy="200" rx="35" ry="60" fill="white"/>
            <ellipse cx="240" cy="220" rx="30" ry="55" fill="white"/>
          </g>
        </svg>
      </div>
          
          <!-- Debug: Test direct asset access -->
          <div id="debug-assets-{{ section.id }}" style="position: absolute; top: -100px; left: -100px; width: 1px; height: 1px; overflow: hidden;">
            <img src="{{ 'tshirt-view.png' | asset_url }}" onload="console.log('✅ Direct asset test - tshirt-view.png loaded:', this.src);" onerror="console.error('❌ Direct asset test - tshirt-view.png failed:', this.src);">
          </div>
          
          <!-- Dynamic Design Overlay -->
          <div
            id="nt-overlay-{{ section.id }}"
            class="nt-mockup__overlay"
            style="position: absolute; width: var(--overlay-width); left: var(--overlay-left); top: var(--overlay-top); transform: translateX(-50%) rotate(var(--overlay-rotate)); height: auto; inset: auto; display: flex; align-items: center; justify-content: center; cursor: grab; transition: all 0.1s ease; border: 2px dashed rgba(39, 225, 193, 0.3); border-radius: 8px; background: rgba(39, 225, 193, 0.05);"
          >
            <span id="nt-design-text-{{ section.id }}" 
                  style="font-family: 'Bebas Neue', sans-serif; font-size: 32px; font-weight: bold; color: #000000; text-align: center; white-space: nowrap; user-select: none; text-shadow: 1px 1px 2px rgba(255,255,255,0.8); pointer-events: none;">
              Your Design Here
            </span>
            
            <!-- Drag Handle (only visible when dragging) -->
            <div id="nt-drag-handle-{{ section.id }}" 
                 style="position: absolute; top: -8px; right: -8px; width: 16px; height: 16px; background: #27e1c1; border: 2px solid white; border-radius: 50%; cursor: grab; display: none; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">
            </div>
            
            <!-- Resize Handles - All Directions (Hidden by default, shown when selected) -->
            <!-- Top-Left -->
            <div class="resize-handle" data-direction="nw" 
                 style="position: absolute; top: -12px; left: -12px; width: 24px; height: 24px; background: #ff6b6b; border: 3px solid white; border-radius: 50%; cursor: nw-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from top-left">
            </div>
            
            <!-- Top-Right -->
            <div class="resize-handle" data-direction="ne" 
                 style="position: absolute; top: -12px; right: -12px; width: 24px; height: 24px; background: #ff6b6b; border: 3px solid white; border-radius: 50%; cursor: ne-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from top-right">
            </div>
            
            <!-- Bottom-Left -->
            <div class="resize-handle" data-direction="sw" 
                 style="position: absolute; bottom: -12px; left: -12px; width: 24px; height: 24px; background: #ff6b6b; border: 3px solid white; border-radius: 50%; cursor: sw-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from bottom-left">
            </div>
            
            <!-- Bottom-Right -->
            <div class="resize-handle" data-direction="se" 
                 style="position: absolute; bottom: -12px; right: -12px; width: 24px; height: 24px; background: #ff6b6b; border: 3px solid white; border-radius: 50%; cursor: se-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from bottom-right">
            </div>
            
            <!-- Side Handles (Hidden by default, shown when selected) -->
            <!-- Top -->
            <div class="resize-handle" data-direction="n" 
                 style="position: absolute; top: -12px; left: 50%; transform: translateX(-50%); width: 24px; height: 24px; background: #4ecdc4; border: 3px solid white; border-radius: 50%; cursor: n-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from top">
            </div>
            
            <!-- Bottom -->
            <div class="resize-handle" data-direction="s" 
                 style="position: absolute; bottom: -12px; left: 50%; transform: translateX(-50%); width: 24px; height: 24px; background: #4ecdc4; border: 3px solid white; border-radius: 50%; cursor: s-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from bottom">
            </div>
            
            <!-- Left -->
            <div class="resize-handle" data-direction="w" 
                 style="position: absolute; left: -12px; top: 50%; transform: translateY(-50%); width: 24px; height: 24px; background: #4ecdc4; border: 3px solid white; border-radius: 50%; cursor: w-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from left">
            </div>
            
            <!-- Right -->
            <div class="resize-handle" data-direction="e" 
                 style="position: absolute; right: -12px; top: 50%; transform: translateY(-50%); width: 24px; height: 24px; background: #4ecdc4; border: 3px solid white; border-radius: 50%; cursor: e-resize; display: none; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10; touch-action: none;"
                 title="Resize from right">
            </div>
            
          </div>
          
          <!-- Interactive Placement Guide (positioned above design when active) -->
          <div id="nt-placement-guide-{{ section.id }}" 
               style="position: absolute; inset: 0; pointer-events: none; z-index: 6; display: none;">
            
            <!-- Crosshairs with better visibility -->
            <div style="position: absolute; top: 50%; left: 0; right: 0; height: 2px; background: linear-gradient(90deg, transparent, #ff6b6b, #ff6b6b, transparent); transform: translateY(-50%); box-shadow: 0 0 4px rgba(255, 107, 107, 0.5);"></div>
            <div style="position: absolute; left: 50%; top: 0; bottom: 0; width: 2px; background: linear-gradient(180deg, transparent, #ff6b6b, #ff6b6b, transparent); transform: translateX(-50%); box-shadow: 0 0 4px rgba(255, 107, 107, 0.5);"></div>
            
            <!-- Center circle with better visibility -->
            <div style="position: absolute; top: 50%; left: 50%; width: 24px; height: 24px; border: 3px solid #ff6b6b; border-radius: 50%; transform: translate(-50%, -50%); background: rgba(255, 107, 107, 0.2); box-shadow: 0 0 8px rgba(255, 107, 107, 0.6);"></div>
            
            <!-- Placement area indicator with better styling -->
            <div style="position: absolute; top: 20%; left: 20%; right: 20%; bottom: 20%; border: 3px dashed #4ecdc4; border-radius: 12px; background: rgba(78, 205, 196, 0.1); box-shadow: 0 0 12px rgba(78, 205, 196, 0.3);">
              <div style="position: absolute; top: 8px; left: 50%; transform: translateX(-50%); background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 6px 16px; border-radius: 8px; font-size: 13px; font-weight: 700; white-space: nowrap; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">
                🎯 Place Design Here
              </div>
            </div>
            
            <!-- Corner guides with better visibility -->
            <div style="position: absolute; top: 15%; left: 15%; width: 12px; height: 12px; border: 2px solid #4ecdc4; border-radius: 50%; background: rgba(78, 205, 196, 0.3); box-shadow: 0 0 6px rgba(78, 205, 196, 0.5);"></div>
            <div style="position: absolute; top: 15%; right: 15%; width: 12px; height: 12px; border: 2px solid #4ecdc4; border-radius: 50%; background: rgba(78, 205, 196, 0.3); box-shadow: 0 0 6px rgba(78, 205, 196, 0.5);"></div>
            <div style="position: absolute; bottom: 15%; left: 15%; width: 12px; height: 12px; border: 2px solid #4ecdc4; border-radius: 50%; background: rgba(78, 205, 196, 0.3); box-shadow: 0 0 6px rgba(78, 205, 196, 0.5);"></div>
            <div style="position: absolute; bottom: 15%; right: 15%; width: 12px; height: 12px; border: 2px solid #4ecdc4; border-radius: 50%; background: rgba(78, 205, 196, 0.3); box-shadow: 0 0 6px rgba(78, 205, 196, 0.5);"></div>
            
            <!-- Smart Centering Indicators -->
            <div id="nt-centering-indicators-{{ section.id }}" style="position: absolute; inset: 0; pointer-events: none;">
              
              <!-- Perfect Center Indicator -->
              <div id="nt-perfect-center-{{ section.id }}" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: none;">
                <div style="width: 40px; height: 40px; border: 3px solid #10b981; border-radius: 50%; background: rgba(16, 185, 129, 0.2); box-shadow: 0 0 20px rgba(16, 185, 129, 0.8); animation: pulse 2s infinite;">
                  <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #10b981; font-size: 16px; font-weight: bold;">✓</div>
                </div>
                <div style="position: absolute; top: -25px; left: 50%; transform: translateX(-50%); background: #10b981; color: white; padding: 4px 8px; border-radius: 4px; font-size: 10px; font-weight: 600; white-space: nowrap;">
                  PERFECT CENTER
                </div>
              </div>
              
              <!-- Horizontal Center Indicator -->
              <div id="nt-horizontal-center-{{ section.id }}" style="position: absolute; top: 50%; left: 0; right: 0; height: 2px; background: linear-gradient(90deg, transparent, #f59e0b, #f59e0b, transparent); transform: translateY(-50%); display: none; box-shadow: 0 0 8px rgba(245, 158, 11, 0.6);"></div>
              
              <!-- Vertical Center Indicator -->
              <div id="nt-vertical-center-{{ section.id }}" style="position: absolute; left: 50%; top: 0; bottom: 0; width: 2px; background: linear-gradient(180deg, transparent, #f59e0b, #f59e0b, transparent); transform: translateX(-50%); display: none; box-shadow: 0 0 8px rgba(245, 158, 11, 0.6);"></div>
              
              <!-- Equidistant Indicators -->
              <div id="nt-equidistant-{{ section.id }}" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: none;">
                <div style="width: 60px; height: 60px; border: 2px dashed #8b5cf6; border-radius: 50%; background: rgba(139, 92, 246, 0.1); box-shadow: 0 0 15px rgba(139, 92, 246, 0.4);">
                  <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #8b5cf6; font-size: 14px; font-weight: bold;">⚖</div>
                </div>
                <div style="position: absolute; top: -20px; left: 50%; transform: translateX(-50%); background: #8b5cf6; color: white; padding: 3px 6px; border-radius: 3px; font-size: 9px; font-weight: 600; white-space: nowrap;">
                  EQUIDISTANT
                </div>
              </div>
              
              <!-- Status Messages -->
              <div id="nt-centering-status-{{ section.id }}" style="position: absolute; top: 10px; left: 10px; background: rgba(0, 0, 0, 0.8); color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; font-weight: 600; display: none; max-width: 200px;">
                <div id="nt-status-text-{{ section.id }}"></div>
              </div>
            </div>
          </div>

            <!-- Resize Handle (only visible when design is selected) -->
            <div id="nt-resize-handle-{{ section.id }}" 
                 style="position: absolute; bottom: -8px; right: -8px; width: 20px; height: 20px; background: #8b5cf6; border: 2px solid white; border-radius: 50%; cursor: nw-resize; display: none; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">
              <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 8px; height: 8px; border-right: 2px solid white; border-bottom: 2px solid white; transform: translate(-50%, -50%) rotate(45deg);"></div>
            </div>
        </div>
        
        <p class="nt-mockup__hint" style="color: #f8fafc; font-size: 14px; margin-top: 24px; text-align: center; font-weight: 500;">
          💡 Tip: Drag the design to move it, use scroll wheel to resize, or use the precise controls above
        </p>
          </div>
      </div>
    </div>
  </div>
</section>

<style>
/* Section Background - Dark Mode Default */
.nt-mockup-section {
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
}

/* Light Mode Background */
[data-theme="light"] .nt-mockup-section {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%) !important;
}

/* Mockup Description Text */
.mockup-description {
  color: #cbd5e1;
}

/* Light Mode Text Colors */
[data-theme="light"] .mockup-description {
  color: #475569 !important;
}

/* Size Selector Dropdown Styling */
.mockup-size-select option {
  background: #1e293b;
  color: #f8fafc;
  padding: 8px;
  font-weight: 600;
}

/* Light Mode Size Selector Options */
[data-theme="light"] .mockup-size-select option {
  background: #ffffff;
  color: #1e293b;
}

/* Enhanced Button Styles */
.nt-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.nt-btn--view:hover:not(.is-active),
.nt-btn--color:hover:not(.is-active) {
  border-color: #27e1c1 !important;
  background: #f0fdfa !important;
  color: #27e1c1 !important;
}

.nt-btn--primary:hover {
  background: linear-gradient(45deg, #059669, #047857) !important;
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
}

.nt-btn--secondary:hover {
  background: linear-gradient(45deg, #a855f7, #9333ea) !important;
  box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
}

.nt-btn--upload:hover {
  background: linear-gradient(45deg, #d97706, #b45309) !important;
  box-shadow: 0 8px 25px rgba(245, 158, 11, 0.3);
}

.file-type:hover {
  background: #d1d5db !important;
}

.help-link:hover {
  color: #1d4ed8 !important;
}

/* Enhanced Interactive Styles */
.nt-mockup__overlay:hover {
  cursor: grab !important;
}

.nt-mockup__overlay:active {
  cursor: grabbing !important;
}

.nt-mockup__canvas.dragging {
  cursor: grabbing !important;
}

/* Design Selection Styles */
.nt-mockup__overlay.design-selected {
  border-color: #27e1c1 !important;
  box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.3) !important;
}

.nt-mockup__overlay.design-selected:hover {
  cursor: grab !important;
  border-color: #27e1c1 !important;
  box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.4) !important;
}

/* Resize Handle Animations */
.resize-handle {
  transition: all 0.2s ease;
  display: none !important; /* Force hide by default */
}

.resize-handle:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 16px rgba(0,0,0,0.4) !important;
}

/* Show handles only when explicitly set to block */
.resize-handle.show-handle {
  display: block !important;
}


.nt-placement-controls {
  animation: slideInUp 0.3s ease;
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0%, 100% { 
    transform: translate(-50%, -50%) scale(1); 
    opacity: 1; 
  }
  50% { 
    transform: translate(-50%, -50%) scale(1.1); 
    opacity: 0.8; 
  }
}

.placement-slider input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}

.placement-slider input[type="range"]::-webkit-slider-track {
  background: #e5e7eb;
  height: 6px;
  border-radius: 3px;
}

.placement-slider input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  background: #27e1c1;
  height: 18px;
  width: 18px;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  cursor: pointer;
}

.placement-slider input[type="range"]::-moz-range-track {
  background: #e5e7eb;
  height: 6px;
  border-radius: 3px;
  border: none;
}

.placement-slider input[type="range"]::-moz-range-thumb {
  background: #27e1c1;
  height: 18px;
  width: 18px;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  cursor: pointer;
}

/* Responsive Design */
@media (max-width: 768px) {
  .nt-mockup__controls {
    flex-direction: column !important;
    gap: 15px !important;
  }
  
  .nt-mockup__group {
    flex-direction: column !important;
    gap: 8px !important;
  }
  
  .nt-mockup__buttons {
    flex-wrap: wrap !important;
    justify-content: center !important;
  }
  
  .mockup-header h2 {
    font-size: 32px !important;
  }
  
  .nt-mockup__canvas {
    width: 100% !important;
    max-width: 500px !important;
  }

  .nt-placement-controls {
    margin: 10px 0 !important;
    padding: 16px !important;
  }

  .placement-slider {
    margin-bottom: 12px !important;
  }
}

/* Animation Classes */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.mockup-header {
  animation: fadeInUp 0.6s ease;
}

.nt-mockup__controls {
  animation: fadeInUp 0.8s ease;
}

.nt-mockup__stage {
  animation: fadeInUp 1s ease;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const mockup = {
    // Mockup images mapping - Using tshirt-view.png for all views
    mockupImages: {
      front: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      back: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      hanging: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      person1: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      },
      person2: {
        white: "{{ 'tshirt-view.png' | asset_url }}",
        black: "{{ 'tshirt-view.png' | asset_url }}",
        pink: "{{ 'tshirt-view.png' | asset_url }}",
        blue: "{{ 'tshirt-view.png' | asset_url }}"
      }
    },
    
      // Current base mockup image
      baseMockup: "{{ 'tshirt-view.png' | asset_url }}",

    // Current design state
    designState: {
      text: 'Your Design Here',
      fontSize: 32,
      fontFamily: "'Bebas Neue', sans-serif",
      textColor: '#000000',
      shirtColor: 'white',
      effect: 'none'
    },

    // Current view state
    state: { view: "front", color: "white" },

    // Enhanced placement state - Initialize with centered values
    placementState: {
      topPct: 45,
      leftPct: 25,
      widthPct: 60,
      rotateDeg: 0,
      dragging: false,
      resizing: false,
      resizeDirection: 'se',
      lastX: 0,
      lastY: 0,
      hasUploadedDesign: false,
      designSelected: false
    },

    init() {
      console.log('🎯 Initializing Enhanced Interactive Mockup...');
      console.log('📍 Current placement values:', {
        top: this.placementState.topPct,
        left: this.placementState.leftPct,
        width: this.placementState.widthPct,
        rotate: this.placementState.rotateDeg
      });
      console.log('📁 Available mockup images:', this.mockupImages);
      console.log('🖼️ Base mockup:', this.baseMockup);
      
      this.bindEvents();
      this.loadFromCustomizer();
      this.updateBase();
      this.updateDesign();
      this.updatePlacementDisplay();
      
      // Force override positioning after a short delay
      setTimeout(() => {
        this.forceCenterPositioning();
      }, 100);
      
      // Show placement controls by default for testing
      this.showPlacementControls();
      
      // Ensure design starts unselected
      this.deselectDesign();
      
      console.log('✅ Mockup initialized with placement controls visible');
    },

    forceCenterPositioning() {
      console.log('🔧 Applying centered positioning...');
      // Update the placement state to centered values
      this.placementState.topPct = 45;
      this.placementState.leftPct = 25;
      this.placementState.widthPct = 60;
      this.placementState.rotateDeg = 0;
      
      // Update the display and position
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      
      // Update the sliders to reflect the new values
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      const rotateSlider = document.getElementById(`nt-rotate-{{ section.id }}`);
      
      if (topSlider) topSlider.value = 40;
      if (leftSlider) leftSlider.value = 30;
      if (widthSlider) widthSlider.value = 50;
      if (rotateSlider) rotateSlider.value = 0;
      
      console.log('✅ Centered positioning applied:', {
        top: '40%',
        left: '30%',
        width: '50%',
        rotate: '0deg'
      });
    },

    bindEvents() {
      const rootId = "nt-mockup-{{ section.id }}";
      
      // Bind view buttons
      const viewBtns = Array.from(document.querySelectorAll(`#${rootId} .nt-btn--view`));
      viewBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          console.log('🖱️ View button clicked:', btn.dataset.view);
          this.state.view = btn.dataset.view;
          console.log('🔄 State updated to:', this.state);
          this.setActive(viewBtns, this.state.view);
          this.updateBase();
        });
      });

      // Bind color buttons
      const colorBtns = Array.from(document.querySelectorAll(`#${rootId} .nt-btn--color`));
      colorBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          this.state.color = btn.dataset.color;
          this.setActive(colorBtns, this.state.color);
          this.updateBase();
        });
      });

      // Bind edit button
      const editBtn = document.getElementById(`nt-edit-{{ section.id }}`);
      if (editBtn) {
        editBtn.addEventListener("click", () => {
          this.scrollToCustomizer();
        });
      }

      // Bind remove button
      const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
      if (removeBtn) {
        removeBtn.addEventListener("click", () => {
          this.removeDesign();
        });
      }

      // Bind upload button and file input
      const uploadBtn = document.getElementById(`nt-upload-{{ section.id }}`);
      const fileInput = document.getElementById(`nt-file-input-{{ section.id }}`);
      
      if (uploadBtn && fileInput) {
        // Click upload button triggers file input
        uploadBtn.addEventListener("click", (e) => {
          if (e.target === uploadBtn) {
            fileInput.click();
          }
        });

        // Handle file selection
        fileInput.addEventListener("change", (e) => {
          const file = e.target.files[0];
          if (file) {
            this.handleFileUpload(file);
          }
        });
      }

      // Bind help button
      const helpBtn = document.getElementById(`nt-help-{{ section.id }}`);
      if (helpBtn) {
        helpBtn.addEventListener("click", () => {
          this.showHelpModal();
        });
      }

      // Bind placement controls
      this.bindPlacementControls();

      // Bind mockup size controls
      this.bindMockupSizeControls();

      // Bind placement guide controls
      this.bindPlacementGuideControls();

      // Bind drag/resize functionality
      this.bindDragResize();

      // Bind preset size buttons
      this.bindPresetButtons();

      {% if section.settings.allow_download %}
      // Bind download button
      const downloadBtn = document.getElementById(`nt-download-{{ section.id }}`);
      if (downloadBtn) {
        downloadBtn.addEventListener("click", () => {
          this.downloadComposite();
        });
      }
      {% endif %}

      // Listen for customizer updates
      this.setupCustomizerListener();

      // Enhanced keyboard shortcuts for resizing
      document.addEventListener('keydown', (e) => {
        if (e.target.closest(`#nt-mockup-{{ section.id }}`)) {
          let increment = 5; // Default increment
          
          // Adjust increment based on modifier keys
          if (e.shiftKey) increment = 10; // Larger steps with Shift
          if (e.ctrlKey) increment = 1;   // Smaller steps with Ctrl
          if (e.altKey) increment = 2.5;  // Medium steps with Alt
          
          if (e.key === '+' || e.key === '=' || e.key === 'ArrowUp') {
            e.preventDefault();
            this.placementState.widthPct = Math.min(120, this.placementState.widthPct + increment);
            this.updatePlacementDisplay();
            this.updateDesignPosition();
            this.updateWidthSlider();
            console.log('⌨️ Keyboard resize +, new width:', this.placementState.widthPct + '%');
          } else if (e.key === '-' || e.key === 'ArrowDown') {
            e.preventDefault();
            this.placementState.widthPct = Math.max(5, this.placementState.widthPct - increment);
            this.updatePlacementDisplay();
            this.updateDesignPosition();
            this.updateWidthSlider();
            console.log('⌨️ Keyboard resize -, new width:', this.placementState.widthPct + '%');
          } else if (e.key === '0' && e.ctrlKey) {
            e.preventDefault();
            this.resetToDefaultSize();
            console.log('⌨️ Reset to default size');
          } else if (e.key === '1' && e.ctrlKey) {
            e.preventDefault();
            this.setPresetSize(25);
            console.log('⌨️ Set to 25%');
          } else if (e.key === '2' && e.ctrlKey) {
            e.preventDefault();
            this.setPresetSize(50);
            console.log('⌨️ Set to 50%');
          } else if (e.key === '3' && e.ctrlKey) {
            e.preventDefault();
            this.setPresetSize(75);
            console.log('⌨️ Set to 75%');
          } else if (e.key === '4' && e.ctrlKey) {
            e.preventDefault();
            this.setPresetSize(100);
            console.log('⌨️ Set to 100%');
          }
        }
      });
    },

    setActive(buttons, active) {
      buttons.forEach(b => {
        const on = (b.dataset.view || b.dataset.color) === active;
        if (on) {
          b.classList.add("is-active");
          b.style.borderColor = "#27e1c1";
          b.style.background = "#27e1c1";
          b.style.color = "white";
        } else {
          b.classList.remove("is-active");
          b.style.borderColor = "#e2e8f0";
          b.style.background = "white";
          b.style.color = "#64748b";
        }
        b.setAttribute("aria-selected", on ? "true" : "false");
      });
    },

    updateBase() {
      const baseEl = document.getElementById("nt-base-{{ section.id }}");
      if (baseEl) {
        // Get the appropriate mockup image based on current view and color
        const mockupImage = this.mockupImages[this.state.view]?.[this.state.color] || 
                           this.mockupImages[this.state.view]?.white ||
                           this.mockupImages.front?.white ||
                           this.baseMockup;
        
        console.log('🔄 Loading mockup image:', mockupImage, 'for view:', this.state.view, 'color:', this.state.color);
        console.log('🔍 Available mockup images:', this.mockupImages);
        console.log('🔍 Current state:', this.state);
        
        // Add error handling
        baseEl.onerror = () => {
          console.error('❌ Failed to load mockup image:', mockupImage);
          console.error('❌ Image URL:', baseEl.src);
          this.createFallbackTshirt();
        };
        
        baseEl.onload = () => {
          console.log('✅ Mockup image loaded successfully:', baseEl.src);
          // Remove any existing fallback when real image loads
          const existingFallback = document.querySelector('.fallback-tshirt');
          if (existingFallback) {
            existingFallback.remove();
          }
        };
        
        // Force reload by setting src to empty first
        baseEl.src = '';
        setTimeout(() => {
          baseEl.src = mockupImage;
        }, 10);
      } else {
        console.error('❌ Base element not found:', "nt-base-{{ section.id }}");
      }
    },

    createFallbackTshirt() {
      const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
      if (!canvas) return;
      
      // Remove existing fallback
      const existingFallback = canvas.querySelector('.fallback-tshirt');
      if (existingFallback) {
        existingFallback.remove();
      }
      
      // Create fallback t-shirt shape
      const fallback = document.createElement('div');
      fallback.className = 'fallback-tshirt';
      fallback.style.cssText = `
        position: absolute;
        inset: 0;
        background: linear-gradient(180deg, #f8f9fa, #e9ecef);
        border-radius: 12px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        font-family: 'Bebas Neue', sans-serif;
        color: #6c757d;
        text-align: center;
      `;
      
      // Create t-shirt shape
      const tshirtShape = document.createElement('div');
      tshirtShape.style.cssText = `
        width: 60%;
        height: 70%;
        background: #ffffff;
        border: 3px solid #dee2e6;
        border-radius: 20px 20px 8px 8px;
        position: relative;
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      `;
      
      // Add sleeves
      const leftSleeve = document.createElement('div');
      leftSleeve.style.cssText = `
        position: absolute;
        left: -20px;
        top: 20%;
        width: 15px;
        height: 40%;
        background: #ffffff;
        border: 3px solid #dee2e6;
        border-radius: 0 8px 8px 0;
      `;
      
      const rightSleeve = document.createElement('div');
      rightSleeve.style.cssText = `
        position: absolute;
        right: -20px;
        top: 20%;
        width: 15px;
        height: 40%;
        background: #ffffff;
        border: 3px solid #dee2e6;
        border-radius: 8px 0 0 8px;
      `;
      
      tshirtShape.appendChild(leftSleeve);
      tshirtShape.appendChild(rightSleeve);
      
      const label = document.createElement('div');
      label.style.cssText = `
        font-size: 14px;
        text-align: center;
        color: #6c757d;
      `;
      label.textContent = 'T-shirt Mockup';
      
      fallback.appendChild(tshirtShape);
      fallback.appendChild(label);
      
      canvas.appendChild(fallback);
      console.log('🔄 Created fallback t-shirt shape');
    },

    updateDesign() {
      const designText = document.getElementById("nt-design-text-{{ section.id }}");
      if (designText) {
        designText.textContent = this.designState.text;
        designText.style.fontFamily = this.designState.fontFamily;
        designText.style.fontSize = this.designState.fontSize + 'px';
        designText.style.color = this.designState.textColor;

        // Apply text effects
        switch (this.designState.effect) {
          case 'outline':
            designText.style.webkitTextStroke = `2px ${this.designState.textColor}`;
            designText.style.webkitTextFillColor = 'transparent';
            break;
          case 'shadow':
            designText.style.textShadow = '2px 2px 4px rgba(0,0,0,0.5)';
            designText.style.webkitTextStroke = 'none';
            designText.style.webkitTextFillColor = this.designState.textColor;
            break;
          case 'gradient':
            designText.style.background = 'linear-gradient(45deg, #27e1c1, #ff4fa3)';
            designText.style.webkitBackgroundClip = 'text';
            designText.style.webkitTextFillColor = 'transparent';
            designText.style.webkitTextStroke = 'none';
            break;
          default:
            designText.style.textShadow = '1px 1px 2px rgba(255,255,255,0.8)';
            designText.style.webkitTextStroke = 'none';
            designText.style.webkitTextFillColor = this.designState.textColor;
        }
      }
    },

    loadFromCustomizer() {
      // Try to load design from customizer if available
      if (window.customizer && window.customizer.state) {
        this.designState = { ...this.designState, ...window.customizer.state };
        this.updateDesign();
      }
    },

    setupCustomizerListener() {
      // Listen for customizer updates
      const originalUpdatePreview = window.customizer?.updatePreview;
      if (originalUpdatePreview) {
        window.customizer.updatePreview = () => {
          originalUpdatePreview.call(window.customizer);
          // Update mockup when customizer changes
          setTimeout(() => {
            this.loadFromCustomizer();
            this.updateDesign();
          }, 100);
        };
      }
    },

    scrollToCustomizer() {
      const customizerSection = document.querySelector('.tshirt-customizer-section');
      if (customizerSection) {
        customizerSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    },

    handleFileUpload(file) {
      console.log('File uploaded:', file.name, file.type, file.size);
      
      // Validate file type
      const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/svg+xml', 'application/pdf'];
      const allowedExtensions = ['.png', '.jpg', '.jpeg', '.svg', '.pdf', '.ai', '.psd'];
      
      const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
      const isValidType = allowedTypes.includes(file.type) || allowedExtensions.includes(fileExtension);
      
      if (!isValidType) {
        this.showMessage('❌ Invalid file type. Please upload PNG, JPG, SVG, or PDF files.', 'error');
        return;
      }
      
      // Validate file size (10MB limit)
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        this.showMessage('❌ File too large. Please upload files smaller than 10MB.', 'error');
        return;
      }
      
      // Show processing message
      this.showMessage('📁 Processing your design...', 'info');
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        this.previewUploadedDesign(e.target.result, file.name);
      };
      reader.readAsDataURL(file);
    },

    previewUploadedDesign(imageData, fileName) {
      // Create preview overlay
      const previewOverlay = document.createElement('div');
      previewOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
      `;

      const previewContainer = document.createElement('div');
      previewContainer.style.cssText = `
        background: white;
        border-radius: 20px;
        padding: 40px;
        max-width: 600px;
        width: 90vw;
        text-align: center;
        transform: scale(0.8);
        transition: transform 0.3s ease;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      `;

      previewContainer.innerHTML = `
        <h3 style="margin: 0 0 20px 0; font-size: 24px; font-weight: 700; color: #374151;">
          📁 Design Preview
        </h3>
        
        <div style="width: 300px; height: 300px; margin: 0 auto 20px; border: 2px dashed #e5e7eb; border-radius: 12px; display: flex; align-items: center; justify-content: center; overflow: hidden;">
          <img src="${imageData}" alt="Uploaded design" style="max-width: 100%; max-height: 100%; object-fit: contain;">
        </div>
        
        <p style="margin: 0 0 20px 0; font-size: 16px; color: #6b7280;">
          <strong>File:</strong> ${fileName}
        </p>
        
        <div style="display: flex; gap: 12px; justify-content: center;">
          <button id="apply-design-btn" style="padding: 12px 24px; background: linear-gradient(45deg, #27e1c1, #20b2aa); color: white; border: none; border-radius: 25px; font-weight: 600; cursor: pointer;">
            ✨ Apply to Mockup
          </button>
          <button id="cancel-upload-btn" style="padding: 12px 24px; background: white; color: #6b7280; border: 2px solid #e2e8f0; border-radius: 25px; font-weight: 600; cursor: pointer;">
            Cancel
          </button>
        </div>
      `;

      previewOverlay.appendChild(previewContainer);
      document.body.appendChild(previewOverlay);

      // Animate in
      setTimeout(() => {
        previewOverlay.style.opacity = '1';
        previewContainer.style.transform = 'scale(1)';
      }, 100);

      // Bind events
      document.getElementById('apply-design-btn').addEventListener('click', () => {
        this.applyUploadedDesign(imageData);
        this.closeUploadPreview();
      });

      document.getElementById('cancel-upload-btn').addEventListener('click', () => {
        this.closeUploadPreview();
      });

      previewOverlay.addEventListener('click', (e) => {
        if (e.target === previewOverlay) {
          this.closeUploadPreview();
        }
      });

      this.currentUploadPreview = previewOverlay;
    },

    applyUploadedDesign(imageData) {
      // Replace text with uploaded image
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      const designText = document.getElementById(`nt-design-text-{{ section.id }}`);
      
      if (overlayDiv && designText) {
        // Hide text
        designText.style.display = 'none';
        
        // Create image element
        const uploadedImg = document.createElement('img');
        uploadedImg.src = imageData;
        uploadedImg.style.cssText = `
          max-width: 100%;
          max-height: 100%;
          object-fit: contain;
          filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
          pointer-events: none;
        `;
        
        overlayDiv.appendChild(uploadedImg);
        
        // Mark as uploaded design
        this.placementState.hasUploadedDesign = true;
        
        // Show the remove button
        const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
        if (removeBtn) {
          removeBtn.style.display = 'inline-block';
        }
        
        // Show placement controls
        this.showPlacementControls();
        
        // Automatically select the uploaded design
        this.selectDesign();
        
        this.showMessage('✨ Uploaded design applied to mockup!', 'success');
      }
    },

    showPlacementControls() {
      const placementControls = document.getElementById(`nt-placement-controls-{{ section.id }}`);
      if (placementControls) {
        placementControls.style.display = 'block';
        // Animate in
        setTimeout(() => {
          placementControls.style.opacity = '1';
          placementControls.style.transform = 'translateY(0)';
        }, 100);
      }
    },

    bindPlacementControls() {
      console.log('🎛️ Binding placement controls...');
      // Get placement control elements
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      const rotateSlider = document.getElementById(`nt-rotate-{{ section.id }}`);
      const resetBtn = document.getElementById(`nt-reset-placement-{{ section.id }}`);

      console.log('Placement controls found:', {
        topSlider: !!topSlider,
        leftSlider: !!leftSlider,
        widthSlider: !!widthSlider,
        rotateSlider: !!rotateSlider,
        resetBtn: !!resetBtn
      });

      // Bind slider events
      if (topSlider) {
        topSlider.addEventListener('input', () => {
          this.placementState.topPct = parseFloat(topSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (leftSlider) {
        leftSlider.addEventListener('input', () => {
          this.placementState.leftPct = parseFloat(leftSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (widthSlider) {
        widthSlider.addEventListener('input', () => {
          this.placementState.widthPct = parseFloat(widthSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      if (rotateSlider) {
        rotateSlider.addEventListener('input', () => {
          this.placementState.rotateDeg = parseFloat(rotateSlider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      }

      // Bind reset button
      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          this.resetPlacement();
        });
      }

      // Bind auto-equidistant button
      const autoEquidistantBtn = document.getElementById(`nt-auto-equidistant-{{ section.id }}`);
      if (autoEquidistantBtn) {
        autoEquidistantBtn.addEventListener('click', () => {
          this.autoEquidistant();
        });
      }
    },

    updatePlacementDisplay() {
      // Update value displays
      const topVal = document.getElementById(`nt-top-val-{{ section.id }}`);
      const leftVal = document.getElementById(`nt-left-val-{{ section.id }}`);
      const widthVal = document.getElementById(`nt-width-val-{{ section.id }}`);
      const rotateVal = document.getElementById(`nt-rotate-val-{{ section.id }}`);

      if (topVal) topVal.textContent = this.placementState.topPct.toFixed(1) + '%';
      if (leftVal) leftVal.textContent = this.placementState.leftPct.toFixed(1) + '%';
      if (widthVal) widthVal.textContent = this.placementState.widthPct.toFixed(0) + '%';
      if (rotateVal) rotateVal.textContent = this.placementState.rotateDeg.toFixed(1) + '°';
    },

    bindMockupSizeControls() {
      const scaleSlider = document.getElementById(`nt-mockup-scale-{{ section.id }}`);
      const scaleValue = document.getElementById(`nt-mockup-scale-val-{{ section.id }}`);
      const zoomInBtn = document.getElementById(`nt-zoom-in-{{ section.id }}`);
      const zoomOutBtn = document.getElementById(`nt-zoom-out-{{ section.id }}`);

      if (scaleSlider) {
        scaleSlider.addEventListener('input', () => {
          const scale = parseFloat(scaleSlider.value);
          this.updateMockupScale(scale);
          if (scaleValue) scaleValue.textContent = scale + '%';
        });
      }

      if (zoomInBtn) {
        zoomInBtn.addEventListener('click', () => {
          const currentScale = parseFloat(scaleSlider?.value || 100);
          const newScale = Math.min(130, currentScale + 10);
          if (scaleSlider) scaleSlider.value = newScale;
          this.updateMockupScale(newScale);
          if (scaleValue) scaleValue.textContent = newScale + '%';
        });
      }

      if (zoomOutBtn) {
        zoomOutBtn.addEventListener('click', () => {
          const currentScale = parseFloat(scaleSlider?.value || 100);
          const newScale = Math.max(50, currentScale - 10);
          if (scaleSlider) scaleSlider.value = newScale;
          this.updateMockupScale(newScale);
          if (scaleValue) scaleValue.textContent = newScale + '%';
        });
      }

      // Add reset to 100% button
      const resetScaleBtn = document.createElement('button');
      resetScaleBtn.textContent = '🔄 Reset Size';
      resetScaleBtn.style.cssText = 'padding: 6px 12px; background: #6b7280; color: white; border: none; border-radius: 4px; font-size: 11px; cursor: pointer; margin-top: 8px;';
      resetScaleBtn.addEventListener('click', () => {
        if (scaleSlider) scaleSlider.value = 100;
        this.updateMockupScale(100);
        if (scaleValue) scaleValue.textContent = '100%';
      });
      
      // Add reset button to the controls
      const scaleContainer = scaleSlider?.parentElement;
      if (scaleContainer) {
        scaleContainer.appendChild(resetScaleBtn);
      }
    },

    bindPlacementGuideControls() {
      const toggleBtn = document.getElementById(`nt-toggle-guide-{{ section.id }}`);
      const guide = document.getElementById(`nt-placement-guide-{{ section.id }}`);
      
      if (toggleBtn && guide) {
        let isVisible = false;
        
        toggleBtn.addEventListener('click', () => {
          isVisible = !isVisible;
          
          if (isVisible) {
            guide.style.display = 'block';
            toggleBtn.textContent = '📐 Hide Placement Guide';
            toggleBtn.style.background = 'linear-gradient(45deg, #ef4444, #dc2626)';
            console.log('🎯 Placement guide shown');
          } else {
            guide.style.display = 'none';
            toggleBtn.textContent = '📐 Show Placement Guide';
            toggleBtn.style.background = 'linear-gradient(45deg, #f59e0b, #d97706)';
            console.log('🎯 Placement guide hidden');
          }
        });
      }
    },

    bindPresetButtons() {
      console.log('⚡ Binding preset size buttons...');
      
      // Bind preset size buttons
      const presetButtons = document.querySelectorAll(`#nt-mockup-{{ section.id }} .size-preset`);
      presetButtons.forEach(button => {
        button.addEventListener('click', () => {
          const size = parseInt(button.dataset.size);
          this.setPresetSize(size);
          
          // Visual feedback
          presetButtons.forEach(btn => {
            btn.style.background = '#f3f4f6';
            btn.style.borderColor = '#d1d5db';
            btn.style.color = '#374151';
          });
          button.style.background = '#27e1c1';
          button.style.borderColor = '#27e1c1';
          button.style.color = 'white';
        });

        // Hover effects
        button.addEventListener('mouseenter', () => {
          if (button.style.background !== 'rgb(39, 225, 193)') {
            button.style.background = '#e5e7eb';
            button.style.borderColor = '#9ca3af';
          }
        });

        button.addEventListener('mouseleave', () => {
          if (button.style.background !== 'rgb(39, 225, 193)') {
            button.style.background = '#f3f4f6';
            button.style.borderColor = '#d1d5db';
          }
        });
      });

      // Bind reset button
      const resetBtn = document.getElementById(`nt-reset-size-{{ section.id }}`);
      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          this.resetToDefaultSize();
          
          // Reset preset button styles
          presetButtons.forEach(btn => {
            btn.style.background = '#f3f4f6';
            btn.style.borderColor = '#d1d5db';
            btn.style.color = '#374151';
          });
        });
      }
      
      console.log('✅ Preset buttons bound successfully');
    },

    updateMockupScale(scale) {
      const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
      const baseImage = document.getElementById(`nt-base-{{ section.id }}`);
      
      if (canvas && baseImage) {
        console.log('🔍 Scaling t-shirt container to:', scale + '%');
        
        // Reset container to original size
        canvas.style.width = '900px';
        canvas.style.height = '900px';
        canvas.style.maxWidth = '100%';
        canvas.style.maxHeight = '100%';
        
        // Reset image positioning
        baseImage.style.position = 'absolute';
        baseImage.style.top = '0';
        baseImage.style.left = '0';
        baseImage.style.width = '100%';
        baseImage.style.height = '100%';
        baseImage.style.marginTop = '0';
        baseImage.style.marginLeft = '0';
        baseImage.style.transform = 'none';
        baseImage.style.transformOrigin = 'unset';
        
        // Scale the entire container using CSS transform
        canvas.style.transform = `scale(${scale / 100})`;
        canvas.style.transformOrigin = 'center center';
        
        // Add visual feedback for maximum scale
        if (scale >= 130) {
          canvas.style.border = '3px solid #f59e0b';
          canvas.style.boxShadow = '0 20px 60px rgba(245, 158, 11, 0.3)';
        } else {
          canvas.style.border = 'none';
          canvas.style.boxShadow = '0 20px 60px rgba(0,0,0,0.1)';
        }
        
        // Update the design overlay to match the container scale
        this.updateDesignPosition();
        
        console.log('✅ T-shirt container scaled successfully to:', scale + '%');
      }
    },

    removeDesign() {
      console.log('🗑️ Removing design...');
      
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      const designText = document.getElementById(`nt-design-text-{{ section.id }}`);
      const removeBtn = document.getElementById(`nt-remove-{{ section.id }}`);
      
      if (overlayDiv && designText) {
        // Remove any uploaded image
        const uploadedImg = overlayDiv.querySelector('img[src^="data:"]');
        if (uploadedImg) {
          uploadedImg.remove();
        }
        
        // Show the default text
        designText.style.display = 'block';
        designText.textContent = 'Your Design Here';
        
        // Reset placement state
        this.placementState.hasUploadedDesign = false;
        
        // Deselect the design
        this.deselectDesign();
        
        // Hide the remove button
        if (removeBtn) {
          removeBtn.style.display = 'none';
        }
        
        // Reset to default positioning
        this.placementState.topPct = 45;
        this.placementState.leftPct = 25;
        this.placementState.widthPct = 60;
        this.placementState.rotateDeg = 0;
        
        // Update the display
        this.updatePlacementDisplay();
        this.updateDesignPosition();
        
        // Show success message
        this.showMessage('✅ Design removed successfully', 'success');
        
        console.log('✅ Design removed successfully');
      }
    },

    updateDesignPosition() {
      const overlayDiv = document.getElementById(`nt-overlay-{{ section.id }}`);
      console.log('🔍 Looking for overlay element:', `nt-overlay-{{ section.id }}`, 'Found:', !!overlayDiv);
      
      if (overlayDiv) {
        console.log('🎯 Applying positioning:', {
          top: this.placementState.topPct + '%',
          left: this.placementState.leftPct + '%',
          width: this.placementState.widthPct + '%',
          rotate: this.placementState.rotateDeg + 'deg'
        });
        
        // Apply positioning directly to the element
        overlayDiv.style.top = this.placementState.topPct + '%';
        overlayDiv.style.left = this.placementState.leftPct + '%';
        overlayDiv.style.width = this.placementState.widthPct + '%';
        overlayDiv.style.transform = `rotate(${this.placementState.rotateDeg}deg)`;
        overlayDiv.style.transformOrigin = 'center center';
        
        // Also update CSS variables for consistency
        overlayDiv.style.setProperty('--overlay-top', this.placementState.topPct + '%');
        overlayDiv.style.setProperty('--overlay-left', this.placementState.leftPct + '%');
        overlayDiv.style.setProperty('--overlay-width', this.placementState.widthPct + '%');
        overlayDiv.style.setProperty('--overlay-rotate', this.placementState.rotateDeg + 'deg');
        
        console.log('✅ Positioning applied directly to element');
        console.log('🔍 Current element styles:', {
          top: overlayDiv.style.top,
          left: overlayDiv.style.left,
          width: overlayDiv.style.width,
          transform: overlayDiv.style.transform
        });
      } else {
        console.error('❌ Overlay element not found!');
      }
      
      // Check for centering and show indicators
      this.checkCentering();
    },

    checkCentering() {
      const { topPct, leftPct, widthPct } = this.placementState;
      
      // Get indicator elements
      const perfectCenter = document.getElementById(`nt-perfect-center-{{ section.id }}`);
      const horizontalCenter = document.getElementById(`nt-horizontal-center-{{ section.id }}`);
      const verticalCenter = document.getElementById(`nt-vertical-center-{{ section.id }}`);
      const equidistant = document.getElementById(`nt-equidistant-{{ section.id }}`);
      const statusDiv = document.getElementById(`nt-centering-status-{{ section.id }}`);
      const statusText = document.getElementById(`nt-status-text-{{ section.id }}`);
      
      if (!perfectCenter || !horizontalCenter || !verticalCenter || !equidistant || !statusDiv || !statusText) return;
      
      // Hide all indicators first
      perfectCenter.style.display = 'none';
      horizontalCenter.style.display = 'none';
      verticalCenter.style.display = 'none';
      equidistant.style.display = 'none';
      statusDiv.style.display = 'none';
      
      // Check for perfect center (within 2% tolerance)
      const isHorizontallyCentered = Math.abs(leftPct - 25) <= 2; // 25% is center for 50% width
      const isVerticallyCentered = Math.abs(topPct - 45) <= 2; // 45% is center for t-shirt
      const isPerfectCenter = isHorizontallyCentered && isVerticallyCentered;
      
      // Check for equidistant positioning (equal distance from edges)
      const leftDistance = leftPct;
      const rightDistance = 100 - leftPct - widthPct;
      const topDistance = topPct;
      const bottomDistance = 100 - topPct - (widthPct * 0.8); // Approximate height
      const isEquidistant = Math.abs(leftDistance - rightDistance) <= 3 && Math.abs(topDistance - bottomDistance) <= 3;
      
      // Show appropriate indicators
      if (isPerfectCenter) {
        perfectCenter.style.display = 'block';
        statusText.textContent = '🎯 Perfect center achieved!';
        statusDiv.style.display = 'block';
        statusDiv.style.background = 'rgba(16, 185, 129, 0.9)';
      } else if (isHorizontallyCentered && isVerticallyCentered) {
        perfectCenter.style.display = 'block';
        statusText.textContent = '🎯 Very close to center!';
        statusDiv.style.display = 'block';
        statusDiv.style.background = 'rgba(16, 185, 129, 0.9)';
      } else {
        if (isHorizontallyCentered) {
          horizontalCenter.style.display = 'block';
          statusText.textContent = '↔️ Horizontally centered';
          statusDiv.style.display = 'block';
          statusDiv.style.background = 'rgba(245, 158, 11, 0.9)';
        }
        if (isVerticallyCentered) {
          verticalCenter.style.display = 'block';
          statusText.textContent = '↕️ Vertically centered';
          statusDiv.style.display = 'block';
          statusDiv.style.background = 'rgba(245, 158, 11, 0.9)';
        }
      }
      
      if (isEquidistant && !isPerfectCenter) {
        equidistant.style.display = 'block';
        if (statusDiv.style.display === 'none') {
          statusText.textContent = '⚖️ Equidistant positioning';
          statusDiv.style.display = 'block';
          statusDiv.style.background = 'rgba(139, 92, 246, 0.9)';
        }
      }
      
      // Auto-hide status after 3 seconds
      if (statusDiv.style.display === 'block') {
        setTimeout(() => {
          statusDiv.style.display = 'none';
        }, 3000);
      }
    },

    autoEquidistant() {
      console.log('⚖️ Auto-equidistant positioning activated');
      
      // Calculate equidistant positioning
      // For a design to be equidistant, it should have equal margins on all sides
      // Assuming the design should be centered with equal margins
      const currentWidth = this.placementState.widthPct;
      
      // Calculate the optimal position for equidistant placement
      // Left margin = Right margin, Top margin = Bottom margin
      const optimalLeft = (100 - currentWidth) / 2;
      const optimalTop = 35; // Position higher on t-shirt for better visual balance
      
      // Apply the equidistant positioning
      this.placementState.leftPct = Math.max(5, Math.min(95 - currentWidth, optimalLeft));
      this.placementState.topPct = Math.max(10, Math.min(80, optimalTop));
      
      // Update the display and position
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      
      // Update the sliders to reflect the new values
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      
      if (topSlider) topSlider.value = this.placementState.topPct;
      if (leftSlider) leftSlider.value = this.placementState.leftPct;
      
      // Show success message
      this.showMessage('⚖️ Design positioned equidistant from edges!', 'success');
      
      console.log('✅ Auto-equidistant positioning applied:', {
        left: this.placementState.leftPct + '%',
        top: this.placementState.topPct + '%',
        width: this.placementState.widthPct + '%'
      });
    },

    resetPlacement() {
      this.placementState.topPct = 45;
      this.placementState.leftPct = 25;
      this.placementState.widthPct = 60;
      this.placementState.rotateDeg = 0;

      // Update sliders
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      const rotateSlider = document.getElementById(`nt-rotate-{{ section.id }}`);

      if (topSlider) topSlider.value = this.placementState.topPct;
      if (leftSlider) leftSlider.value = this.placementState.leftPct;
      if (widthSlider) widthSlider.value = this.placementState.widthPct;
      if (rotateSlider) rotateSlider.value = this.placementState.rotateDeg;

      this.updatePlacementDisplay();
      this.updateDesignPosition();
    },

    bindDragResize() {
      const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      
      if (!canvas || !overlay) return;

      // Click on overlay to select design and show handles
      overlay.addEventListener('click', (e) => {
        e.stopPropagation();
        this.selectDesign();
      });

      // Double-click to reset size
      overlay.addEventListener('dblclick', (e) => {
        e.stopPropagation();
        this.resetToDefaultSize();
        console.log('🔄 Double-click reset size');
      });

      // Click on canvas (outside design) to deselect
      canvas.addEventListener('click', (e) => {
        if (e.target === canvas || e.target.classList.contains('nt-mockup__base')) {
          this.deselectDesign();
        }
      });

      // Mouse events - Allow dragging on the entire overlay
      overlay.addEventListener('mousedown', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.startDrag(e);
      });

      document.addEventListener('mousemove', (e) => {
        if (this.placementState.dragging) {
          this.handleDrag(e);
        }
        if (this.placementState.resizing) {
          this.handleResizeDrag(e);
        }
      });

      document.addEventListener('mouseup', () => {
        this.endDrag();
        this.endResize();
      });

      // Touch events - Enhanced for mobile
      overlay.addEventListener('touchstart', (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Check if it's a single touch (not pinch)
        if (e.touches.length === 1) {
          this.startDrag(e.touches[0]);
        } else if (e.touches.length === 2) {
          // Handle pinch-to-zoom for mobile
          this.startPinch(e);
        }
      }, { passive: false });

      // Touch click to select design
      overlay.addEventListener('touchend', (e) => {
        if (e.changedTouches.length === 1) {
          e.stopPropagation();
          this.selectDesign();
        }
      }, { passive: false });

      // Touch outside to deselect
      canvas.addEventListener('touchend', (e) => {
        if (e.target === canvas || e.target.classList.contains('nt-mockup__base')) {
          this.deselectDesign();
        }
      }, { passive: false });

      document.addEventListener('touchmove', (e) => {
        if (this.placementState.dragging) {
          e.preventDefault();
          this.handleDrag(e.touches[0]);
        }
        if (this.placementState.resizing) {
          e.preventDefault();
          this.handleResizeDrag(e.touches[0]);
        }
        if (this.placementState.pinching) {
          e.preventDefault();
          this.handlePinch(e);
        }
      }, { passive: false });

      document.addEventListener('touchend', () => {
        this.endDrag();
        this.endResize();
        this.endPinch();
      });

      // Enhanced scroll wheel for resize with multiple sensitivity levels
      canvas.addEventListener('wheel', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Different sensitivity based on modifier keys
        let sensitivity = 3; // Default sensitivity
        let increment = 1;
        
        if (e.ctrlKey) {
          // Ultra-precise control with Ctrl
          sensitivity = 0.5;
          increment = 0.5;
        } else if (e.shiftKey) {
          // Coarse control with Shift
          sensitivity = 8;
          increment = 2;
        } else if (e.altKey) {
          // Medium control with Alt
          sensitivity = 2;
          increment = 1;
        }
        
        const delta = Math.sign(e.deltaY);
        const newWidth = this.placementState.widthPct - (delta * increment);
        this.placementState.widthPct = Math.max(5, Math.min(120, newWidth));
        
        this.updatePlacementDisplay();
        this.updateDesignPosition();
        
        const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
        if (widthSlider) widthSlider.value = this.placementState.widthPct;
        
        console.log('🔄 Resize with sensitivity:', sensitivity, 'new width:', this.placementState.widthPct + '%');
      }, { passive: false });

      // Hover effects - only show if design is not selected
      overlay.addEventListener('mouseenter', () => {
        if (!this.placementState.designSelected) {
          // Show subtle hover effect
          overlay.style.borderColor = 'rgba(39, 225, 193, 0.6)';
          overlay.style.boxShadow = '0 0 0 2px rgba(39, 225, 193, 0.2)';
        }
      });

      overlay.addEventListener('mouseleave', () => {
        if (!this.placementState.designSelected) {
          // Hide hover effect
          overlay.style.borderColor = 'rgba(39, 225, 193, 0.3)';
          overlay.style.boxShadow = 'none';
        }
      });

      // Resize handles functionality - All directions
      const resizeHandles = document.querySelectorAll('.resize-handle');
      resizeHandles.forEach(handle => {
        handle.addEventListener('mousedown', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const direction = handle.dataset.direction;
          console.log('🔧 Resize handle clicked, direction:', direction);
          this.startResize(e, direction);
        });
      });
    },

    startDrag(e) {
      console.log('🖱️ Start drag triggered');
      this.placementState.dragging = true;
      const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
      const rect = canvas.getBoundingClientRect();
      
      this.placementState.lastX = e.clientX - rect.left;
      this.placementState.lastY = e.clientY - rect.top;
      
      canvas.classList.add('dragging');
      this.showMessage('🎯 Drag to move design', 'info');
    },

    handleDrag(e) {
      if (!this.placementState.dragging) return;
      
      const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
      const rect = canvas.getBoundingClientRect();
      
      const currentX = e.clientX - rect.left;
      const currentY = e.clientY - rect.top;
      
      const deltaX = currentX - this.placementState.lastX;
      const deltaY = currentY - this.placementState.lastY;
      
      // Convert pixel deltas to percentages
      const deltaXPercent = (deltaX / rect.width) * 100;
      const deltaYPercent = (deltaY / rect.height) * 100;
      
      // Update position
      this.placementState.leftPct = Math.max(0, Math.min(90, this.placementState.leftPct + deltaXPercent));
      this.placementState.topPct = Math.max(0, Math.min(90, this.placementState.topPct + deltaYPercent));
      
      // Update display
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      
      // Update sliders
      const leftSlider = document.getElementById(`nt-left-{{ section.id }}`);
      const topSlider = document.getElementById(`nt-top-{{ section.id }}`);
      if (leftSlider) leftSlider.value = this.placementState.leftPct;
      if (topSlider) topSlider.value = this.placementState.topPct;
      
      this.placementState.lastX = currentX;
      this.placementState.lastY = currentY;
    },

    endDrag() {
      if (this.placementState.dragging) {
        this.placementState.dragging = false;
        const canvas = document.getElementById(`nt-mockup-canvas-{{ section.id }}`);
        canvas.classList.remove('dragging');
      }
    },

    endResize() {
      if (this.placementState.resizing) {
        this.placementState.resizing = false;
        this.placementState.resizeMomentum = 0; // Clear momentum
        console.log('🔧 Resize ended');
      }
    },

    startPinch(e) {
      if (e.touches.length === 2) {
        this.placementState.pinching = true;
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        this.placementState.initialDistance = Math.sqrt(
          Math.pow(touch2.clientX - touch1.clientX, 2) + 
          Math.pow(touch2.clientY - touch1.clientY, 2)
        );
        this.placementState.initialWidth = this.placementState.widthPct;
        console.log('📱 Pinch started, initial distance:', this.placementState.initialDistance);
      }
    },

    handlePinch(e) {
      if (!this.placementState.pinching || e.touches.length !== 2) return;
      
      const touch1 = e.touches[0];
      const touch2 = e.touches[1];
      const currentDistance = Math.sqrt(
        Math.pow(touch2.clientX - touch1.clientX, 2) + 
        Math.pow(touch2.clientY - touch1.clientY, 2)
      );
      
      const scale = currentDistance / this.placementState.initialDistance;
      const newWidth = Math.max(10, Math.min(100, this.placementState.initialWidth * scale));
      
      this.placementState.widthPct = newWidth;
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      if (widthSlider) widthSlider.value = this.placementState.widthPct;
      
      console.log('📱 Pinch resize:', newWidth.toFixed(1) + '%');
    },

    endPinch() {
      if (this.placementState.pinching) {
        this.placementState.pinching = false;
        console.log('📱 Pinch ended');
      }
    },

    startResize(e, direction) {
      console.log('🔧 Start resize triggered, direction:', direction);
      this.placementState.resizing = true;
      this.placementState.resizeDirection = direction;
      this.placementState.lastX = e.clientX;
      this.placementState.lastY = e.clientY;
    },

    handleResizeDrag(e) {
      if (!this.placementState.resizing) return;
      
      const deltaX = e.clientX - this.placementState.lastX;
      const deltaY = e.clientY - this.placementState.lastY;
      const direction = this.placementState.resizeDirection;
      
      // Calculate distance moved for better sensitivity control
      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      let sensitivity = 0.5; // Base sensitivity
      
      // Adjust sensitivity based on movement speed (helps with touchpads)
      if (distance > 20) sensitivity = 0.8; // Faster movement = higher sensitivity
      else if (distance < 5) sensitivity = 0.2; // Slower movement = lower sensitivity
      
      let resizeIncrement = 0;
      
      // Calculate resize based on direction with improved sensitivity
      switch(direction) {
        case 'nw': // Top-left: both X and Y affect size
          resizeIncrement = (deltaX + deltaY) * sensitivity;
          break;
        case 'ne': // Top-right: X increases, Y decreases
          resizeIncrement = (deltaX - deltaY) * sensitivity;
          break;
        case 'sw': // Bottom-left: X decreases, Y increases
          resizeIncrement = (-deltaX + deltaY) * sensitivity;
          break;
        case 'se': // Bottom-right: both X and Y increase
          resizeIncrement = (deltaX + deltaY) * sensitivity;
          break;
        case 'n': // Top: Y affects size
          resizeIncrement = deltaY * sensitivity;
          break;
        case 's': // Bottom: Y affects size
          resizeIncrement = deltaY * sensitivity;
          break;
        case 'w': // Left: X affects size
          resizeIncrement = deltaX * sensitivity;
          break;
        case 'e': // Right: X affects size
          resizeIncrement = deltaX * sensitivity;
          break;
        default:
          resizeIncrement = (deltaX + deltaY) * sensitivity;
      }
      
      // Apply momentum for smoother touchpad experience
      const momentum = this.placementState.resizeMomentum || 0;
      const finalIncrement = resizeIncrement + (momentum * 0.3);
      
      const newWidth = this.placementState.widthPct + finalIncrement;
      this.placementState.widthPct = Math.max(5, Math.min(120, newWidth));
      
      // Store momentum for next frame
      this.placementState.resizeMomentum = resizeIncrement * 0.7;
      
      console.log('🔧 Resizing to:', this.placementState.widthPct + '%', 'direction:', direction, 'sensitivity:', sensitivity);
      
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.updateWidthSlider();
      
      this.placementState.lastX = e.clientX;
      this.placementState.lastY = e.clientY;
    },

    updateWidthSlider() {
      const widthSlider = document.getElementById(`nt-width-{{ section.id }}`);
      if (widthSlider) widthSlider.value = this.placementState.widthPct;
    },

    resetToDefaultSize() {
      this.placementState.widthPct = 60; // Default size
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.updateWidthSlider();
      this.showMessage('📏 Reset to default size (60%)', 'success');
    },

    setPresetSize(size) {
      this.placementState.widthPct = size;
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.updateWidthSlider();
      this.showMessage(`📏 Set to ${size}%`, 'success');
    },

    handleResize(deltaY) {
      console.log('🔄 Resize triggered, deltaY:', deltaY);
      const delta = Math.sign(deltaY);
      const increment = 5; // Increased from 2 to 5 for more noticeable resizing
      const newWidth = this.placementState.widthPct - (delta * increment);
      
      // Clamp between 5% and 120% for more flexibility
      this.placementState.widthPct = Math.max(5, Math.min(120, newWidth));
      
      console.log('📏 New width:', this.placementState.widthPct + '%');
      
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.updateWidthSlider();
    },



    selectDesign() {
      console.log('🎯 Design selected - showing handles');
      
      // Show all resize handles using CSS class
      const resizeHandles = document.querySelectorAll(`#nt-mockup-canvas-{{ section.id }} .resize-handle`);
      resizeHandles.forEach(handle => {
        handle.classList.add('show-handle');
      });
      
      // Show drag handle
      const dragHandle = document.getElementById(`nt-drag-handle-{{ section.id }}`);
      if (dragHandle) dragHandle.style.display = 'block';
      
      // Show main resize handle
      const mainResizeHandle = document.getElementById(`nt-resize-handle-{{ section.id }}`);
      if (mainResizeHandle) mainResizeHandle.style.display = 'block';
      
      // Add selected class to overlay for visual feedback
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      if (overlay) {
        overlay.classList.add('design-selected');
        overlay.style.borderColor = '#27e1c1';
        overlay.style.boxShadow = '0 0 0 3px rgba(39, 225, 193, 0.3)';
      }
      
      // Mark as selected in state
      this.placementState.designSelected = true;
    },

    deselectDesign() {
      console.log('🎯 Design deselected - hiding handles');
      
      // Hide all resize handles by removing CSS class
      const resizeHandles = document.querySelectorAll(`#nt-mockup-canvas-{{ section.id }} .resize-handle`);
      resizeHandles.forEach(handle => {
        handle.classList.remove('show-handle');
      });
      
      // Hide drag handle
      const dragHandle = document.getElementById(`nt-drag-handle-{{ section.id }}`);
      if (dragHandle) dragHandle.style.display = 'none';
      
      // Hide main resize handle
      const mainResizeHandle = document.getElementById(`nt-resize-handle-{{ section.id }}`);
      if (mainResizeHandle) mainResizeHandle.style.display = 'none';
      
      // Remove selected class from overlay
      const overlay = document.getElementById(`nt-overlay-{{ section.id }}`);
      if (overlay) {
        overlay.classList.remove('design-selected');
        overlay.style.borderColor = 'rgba(39, 225, 193, 0.3)';
        overlay.style.boxShadow = 'none';
      }
      
      // Mark as not selected in state
      this.placementState.designSelected = false;
    },

    closeUploadPreview() {
      if (this.currentUploadPreview) {
        this.currentUploadPreview.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(this.currentUploadPreview)) {
            document.body.removeChild(this.currentUploadPreview);
          }
          this.currentUploadPreview = null;
        }, 300);
      }
    },

    showHelpModal() {
      const helpOverlay = document.createElement('div');
      helpOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
      `;

      const helpContainer = document.createElement('div');
      helpContainer.style.cssText = `
        background: white;
        border-radius: 20px;
        padding: 40px;
        max-width: 700px;
        width: 90vw;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      `;

      helpContainer.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
          <h2 style="margin: 0; font-size: 28px; font-weight: 700; color: #374151;">
            📁 File Upload Help
          </h2>
          <button id="close-help-btn" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">
            ×
          </button>
        </div>

        <div style="margin-bottom: 25px;">
          <h3 style="margin: 0 0 12px 0; font-size: 20px; font-weight: 600; color: #374151;">
            ✅ Accepted File Formats
          </h3>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
            <div style="background: #f8fafc; padding: 16px; border-radius: 12px; border: 1px solid #e2e8f0;">
              <div style="font-weight: 600; color: #059669; margin-bottom: 4px;">📄 PNG</div>
              <div style="font-size: 14px; color: #6b7280;">Best for designs with transparency</div>
            </div>
            <div style="background: #f8fafc; padding: 16px; border-radius: 12px; border: 1px solid #e2e8f0;">
              <div style="font-weight: 600; color: #059669; margin-bottom: 4px;">🖼️ JPG/JPEG</div>
              <div style="font-size: 14px; color: #6b7280;">Standard photo format</div>
            </div>
            <div style="background: #f8fafc; padding: 16px; border-radius: 12px; border: 1px solid #e2e8f0;">
              <div style="font-weight: 600; color: #059669; margin-bottom: 4px;">🎨 SVG</div>
              <div style="font-size: 14px; color: #6b7280;">Vector graphics (scalable)</div>
            </div>
            <div style="background: #f8fafc; padding: 16px; border-radius: 12px; border: 1px solid #e2e8f0;">
              <div style="font-weight: 600; color: #059669; margin-bottom: 4px;">📋 PDF</div>
              <div style="font-size: 14px; color: #6b7280;">Document format</div>
            </div>
          </div>
        </div>

        <div style="margin-bottom: 25px;">
          <h3 style="margin: 0 0 12px 0; font-size: 20px; font-weight: 600; color: #374151;">
            📏 File Requirements
          </h3>
          <ul style="margin: 0; padding-left: 20px; color: #6b7280; line-height: 1.6;">
            <li><strong>Maximum file size:</strong> 10MB</li>
            <li><strong>Recommended resolution:</strong> 2048x2048px or higher</li>
            <li><strong>Color mode:</strong> RGB or CMYK</li>
            <li><strong>Transparency:</strong> Supported for PNG files</li>
          </ul>
        </div>

        <div style="margin-bottom: 25px;">
          <h3 style="margin: 0 0 12px 0; font-size: 20px; font-weight: 600; color: #374151;">
            💡 Design Tips
          </h3>
          <ul style="margin: 0; padding-left: 20px; color: #6b7280; line-height: 1.6;">
            <li>Use high-resolution images for best print quality</li>
            <li>Keep important design elements within the center area</li>
            <li>PNG files with transparency work best for logos</li>
            <li>Vector files (SVG) will scale perfectly at any size</li>
            <li>Test your design on different t-shirt colors</li>
          </ul>
        </div>

        <div style="background: linear-gradient(135deg, #f0fdfa, #ecfdf5); padding: 20px; border-radius: 12px; border: 1px solid #a7f3d0;">
          <div style="font-weight: 600; color: #065f46; margin-bottom: 8px;">🚀 Pro Tip</div>
          <div style="color: #047857; font-size: 14px;">
            For best results, create your design in a square format (1:1 ratio) with a transparent background. This ensures your design will look great on any t-shirt color!
          </div>
        </div>
      `;

      helpOverlay.appendChild(helpContainer);
      document.body.appendChild(helpOverlay);

      // Animate in
      setTimeout(() => {
        helpOverlay.style.opacity = '1';
      }, 100);

      // Bind close event
      document.getElementById('close-help-btn').addEventListener('click', () => {
        helpOverlay.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(helpOverlay)) {
            document.body.removeChild(helpOverlay);
          }
        }, 300);
      });

      helpOverlay.addEventListener('click', (e) => {
        if (e.target === helpOverlay) {
          helpOverlay.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(helpOverlay)) {
              document.body.removeChild(helpOverlay);
            }
          }, 300);
        }
      });
    },

    showMessage(message, type = 'info') {
      const messageEl = document.createElement('div');
      messageEl.textContent = message;
      Object.assign(messageEl.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        background: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#6b7280',
        color: 'white',
        padding: '12px 20px',
        borderRadius: '8px',
        fontSize: '14px',
        fontWeight: '500',
        zIndex: '10000',
        boxShadow: '0 4px 16px rgba(0, 0, 0, 0.15)',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease'
      });
      
      document.body.appendChild(messageEl);
      
      setTimeout(() => messageEl.style.transform = 'translateX(0)', 100);
      setTimeout(() => {
        messageEl.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (document.body.contains(messageEl)) {
            document.body.removeChild(messageEl);
          }
        }, 300);
      }, 3000);
    },

    {% if section.settings.allow_download %}
    downloadComposite() {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      
      // Set canvas size
      canvas.width = 2000;
      canvas.height = 2000;

      // Create base image
      const baseImg = new Image();
      baseImg.crossOrigin = "anonymous";
      baseImg.src = document.getElementById("nt-base-{{ section.id }}").src;

      baseImg.onload = () => {
        // Draw base image
        ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

        // Check if there's an uploaded design image
        const overlayImg = document.querySelector(`#nt-overlay-{{ section.id }} img`);
        
        if (overlayImg && overlayImg.src && !overlayImg.src.includes('data:image/svg+xml')) {
          // Draw uploaded design image
          const designImg = new Image();
          designImg.crossOrigin = "anonymous";
          designImg.src = overlayImg.src;
          
          designImg.onload = () => {
            // Use the exact placement state values that match the preview
            const topPct = this.placementState.topPct / 100;
            const leftPct = this.placementState.leftPct / 100;
            const widthPct = this.placementState.widthPct / 100;
            const rotateDeg = this.placementState.rotate || 0;

            // Calculate design position and size on canvas (matching the visual positioning exactly)
            const designX = canvas.width * leftPct;
            const designY = canvas.height * topPct;
            const designWidth = canvas.width * widthPct;
            const designHeight = (designImg.height / designImg.width) * designWidth;

            // Save context for rotation
            ctx.save();
            ctx.translate(designX + designWidth / 2, designY + designHeight / 2);
            ctx.rotate(rotateDeg * Math.PI / 180);
            
            // Draw the design image
            ctx.drawImage(designImg, -designWidth / 2, -designHeight / 2, designWidth, designHeight);
            ctx.restore();

            // Download
            const a = document.createElement('a');
            a.download = `custom_mockup_${this.state.view}_${this.state.color}.png`;
            a.href = canvas.toDataURL("image/png");
            a.click();
          };
        } else {
          // Fallback to text if no image uploaded
          ctx.save();
          ctx.font = `${this.designState.fontSize * 2}px ${this.designState.fontFamily}`;
          ctx.fillStyle = this.designState.textColor;
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';

          // Calculate text position based on overlay settings
          const stage = document.querySelector(`#nt-mockup-{{ section.id }} .nt-mockup__canvas`);
          const topPct = parseFloat(getComputedStyle(stage).getPropertyValue('--overlay-top')) / 100;
          const leftPct = parseFloat(getComputedStyle(stage).getPropertyValue('--overlay-left')) / 100;
          const widthPct = parseFloat(getComputedStyle(stage).getPropertyValue('--overlay-width')) / 100;
          const rotateDeg = parseFloat(getComputedStyle(stage).getPropertyValue('--overlay-rotate')) || 0;

          const x = canvas.width * (leftPct + widthPct / 2);
          const y = canvas.height * (topPct + 0.3); // Adjust for text positioning

          ctx.translate(x, y);
          ctx.rotate(rotateDeg * Math.PI / 180);
          
          // Apply text effects
          switch (this.designState.effect) {
            case 'outline':
              ctx.strokeStyle = this.designState.textColor;
              ctx.lineWidth = 4;
              ctx.strokeText(this.designState.text, 0, 0);
              ctx.fillStyle = 'transparent';
              break;
            case 'shadow':
              ctx.shadowColor = 'rgba(0,0,0,0.5)';
              ctx.shadowBlur = 8;
              ctx.shadowOffsetX = 4;
              ctx.shadowOffsetY = 4;
              ctx.fillStyle = this.designState.textColor;
              break;
            default:
              ctx.fillStyle = this.designState.textColor;
          }
          
          ctx.fillText(this.designState.text, 0, 0);
          ctx.restore();

          // Download
          const a = document.createElement('a');
          a.download = `custom_mockup_${this.state.view}_${this.state.color}.png`;
          a.href = canvas.toDataURL("image/png");
          a.click();
        }
      };
    }
    {% endif %}
  };

  // Enhanced 3D Controls and Validation
  let is3DRotationEnabled = false;
  let currentRotation = 0;
  let isZoomEnabled = false;
  
  // 3D Rotation toggle
  const rotate3DBtn = document.getElementById(`nt-3d-rotate-{{ section.id }}`);
  if (rotate3DBtn) {
    rotate3DBtn.addEventListener('click', () => {
      is3DRotationEnabled = !is3DRotationEnabled;
      rotate3DBtn.style.background = is3DRotationEnabled ? '#27e1c1' : '';
      rotate3DBtn.style.color = is3DRotationEnabled ? 'white' : '';
      rotate3DBtn.style.borderColor = is3DRotationEnabled ? '#27e1c1' : '#e2e8f0';
      console.log('🔄 3D Rotation:', is3DRotationEnabled ? 'Enabled' : 'Disabled');
    });
  }
  
  // Zoom controls
  const zoomBtn = document.getElementById(`nt-zoom-{{ section.id }}`);
  if (zoomBtn) {
    zoomBtn.addEventListener('click', () => {
      isZoomEnabled = !isZoomEnabled;
      const canvas = document.querySelector('.nt-mockup__canvas');
      if (canvas) {
        canvas.style.transform = isZoomEnabled ? 'scale(1.5)' : 'scale(1)';
        canvas.style.transition = 'transform 0.3s ease';
      }
      zoomBtn.style.background = isZoomEnabled ? '#27e1c1' : '';
      zoomBtn.style.color = isZoomEnabled ? 'white' : '';
      zoomBtn.style.borderColor = isZoomEnabled ? '#27e1c1' : '#e2e8f0';
      console.log('🔍 Zoom:', isZoomEnabled ? 'Enabled' : 'Disabled');
    });
  }
  
  // Design validation
  const validateBtn = document.getElementById(`nt-validate-{{ section.id }}`);
  if (validateBtn) {
    validateBtn.addEventListener('click', () => {
      validateDesign();
    });
  }
  
  // Reset button
  const resetBtn = document.getElementById(`nt-reset-{{ section.id }}`);
  if (resetBtn) {
    resetBtn.addEventListener('click', () => {
      // Reset all controls to default values
      const topSlider = document.querySelector('input[data-control="top"]');
      const leftSlider = document.querySelector('input[data-control="left"]');
      const widthSlider = document.querySelector('input[data-control="width"]');
      const rotateSlider = document.querySelector('input[data-control="rotate"]');
      
      if (topSlider) topSlider.value = 30;
      if (leftSlider) leftSlider.value = 30;
      if (widthSlider) widthSlider.value = 50;
      if (rotateSlider) rotateSlider.value = 0;
      
      // Reset 3D controls
      is3DRotationEnabled = false;
      isZoomEnabled = false;
      currentRotation = 0;
      
      // Update button states
      if (rotate3DBtn) {
        rotate3DBtn.style.background = '';
        rotate3DBtn.style.color = '';
        rotate3DBtn.style.borderColor = '#e2e8f0';
      }
      if (zoomBtn) {
        zoomBtn.style.background = '';
        zoomBtn.style.color = '';
        zoomBtn.style.borderColor = '#e2e8f0';
      }
      
      // Reset canvas
      const canvas = document.querySelector('.nt-mockup__canvas');
      if (canvas) {
        canvas.style.transform = '';
        canvas.style.transition = '';
      }
      
      // Trigger mockup update
      if (window.mockup && window.mockup.updateMockup) {
        window.mockup.updateMockup();
      }
      
      console.log('🔄 Design reset to defaults');
    });
  }
  
  // Design validation function
  function validateDesign() {
    const issues = [];
    let score = 100;
    
    // Check if design is loaded
    const hasDesign = document.querySelector('.nt-mockup__canvas img[src*="data:"]') || 
                     document.querySelector('.nt-mockup__canvas canvas');
    
    if (!hasDesign) {
      issues.push('No design uploaded');
      score = 0;
    } else {
      // Check design size
      const widthSlider = document.querySelector('input[data-control="width"]');
      const widthValue = widthSlider ? parseFloat(widthSlider.value) : 50;
      
      if (widthValue < 20) {
        issues.push('Design too small');
        score -= 30;
      } else if (widthValue > 80) {
        issues.push('Design too large');
        score -= 20;
      }
      
      // Check positioning
      const topSlider = document.querySelector('input[data-control="top"]');
      const leftSlider = document.querySelector('input[data-control="left"]');
      const topValue = topSlider ? parseFloat(topSlider.value) : 30;
      const leftValue = leftSlider ? parseFloat(leftSlider.value) : 30;
      
      if (topValue < 10 || topValue > 80) {
        issues.push('Poor vertical positioning');
        score -= 25;
      }
      
      if (leftValue < 10 || leftValue > 80) {
        issues.push('Poor horizontal positioning');
        score -= 25;
      }
    }
    
    // Show validation result
    showValidationResult(score, issues);
    console.log('✅ Design validation complete. Score:', score, 'Issues:', issues);
  }
  
  // Show validation result
  function showValidationResult(score, issues) {
    // Remove existing validation
    const existingValidation = document.querySelector('.nt-validation-result');
    if (existingValidation) {
      existingValidation.remove();
    }
    
    // Create validation indicator
    const validationDiv = document.createElement('div');
    validationDiv.className = 'nt-validation-result';
    validationDiv.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      padding: 16px 20px;
      border-radius: 12px;
      font-weight: 600;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      backdrop-filter: blur(10px);
      animation: slideInRight 0.3s ease;
      max-width: 300px;
    `;
    
    let bgColor, icon, text;
    if (score >= 90) {
      bgColor = 'rgba(16, 185, 129, 0.95)';
      icon = '✓';
      text = 'Design Quality: Perfect';
    } else if (score >= 70) {
      bgColor = 'rgba(245, 158, 11, 0.95)';
      icon = '⚠';
      text = `Design Quality: Good${issues[0] ? ` (${issues[0]})` : ''}`;
    } else {
      bgColor = 'rgba(239, 68, 68, 0.95)';
      icon = '✗';
      text = `Design Quality: Needs Work${issues[0] ? ` (${issues[0]})` : ''}`;
    }
    
    validationDiv.style.background = bgColor;
    validationDiv.style.color = 'white';
    validationDiv.innerHTML = `
      <div style="display: flex; align-items: center; gap: 8px;">
        <span style="font-size: 1.2rem;">${icon}</span>
        <span>${text}</span>
      </div>
    `;
    
    document.body.appendChild(validationDiv);
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      if (validationDiv.parentNode) {
        validationDiv.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
          if (validationDiv.parentNode) {
            validationDiv.remove();
          }
        }, 300);
      }
    }, 5000);
  }
  
  // Add CSS animations
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideInRight {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOutRight {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  `;
  document.head.appendChild(style);

  // Initialize mockup
  mockup.init();

  // Make globally available
  window.mockup = mockup;

  // ============================================================================
  // SIZE SELECTOR INTEGRATION
  // ============================================================================
  
  const sizeSelect = document.getElementById('mockup-size-select-{{ section.id }}');
  const sizeGuideBtn = document.getElementById('mockup-size-guide-{{ section.id }}');
  const sizeInfo = document.getElementById('size-info-{{ section.id }}');
  const sizeDetails = document.getElementById('size-details-{{ section.id }}');
  
  // Get selected color for size chart lookup
  function getSelectedColor() {
    const activeColorBtn = document.querySelector('.nt-btn--color.is-active');
    return activeColorBtn ? activeColorBtn.dataset.color : 'white';
  }
  
  // Handle size selection change
  if (sizeSelect) {
    sizeSelect.addEventListener('change', async (e) => {
      const selectedSize = e.target.value;
      if (!selectedSize) {
        sizeInfo.style.display = 'none';
        return;
      }
      
      // Get size measurements from database
      try {
        const color = getSelectedColor() === 'white' || getSelectedColor() === 'black' ? getSelectedColor() : 'black';
        const result = await window.NewThriftsSizes.getSizeChart('t-shirt', color);
        
        if (result.success) {
          const sizeData = result.sizes.find(s => s.size_code === selectedSize);
          if (sizeData) {
            sizeDetails.innerHTML = `
              <strong>${selectedSize}:</strong> 
              Length: ${sizeData.garment_length}cm | 
              Bust: ${sizeData.bust_width}cm | 
              Shoulder: ${sizeData.shoulder_width}cm | 
              Sleeve: ${sizeData.sleeve_length}cm
            `;
            sizeInfo.style.display = 'block';
            
            // Store selected size in mockup state
            mockup.selectedSize = selectedSize;
            console.log(`📏 Size selected: ${selectedSize}`, sizeData);
          }
        }
      } catch (error) {
        console.error('Error loading size data:', error);
        sizeInfo.style.display = 'none';
      }
    });
    
    // Trigger change event for default size
    sizeSelect.dispatchEvent(new Event('change'));
  }
  
  // Handle size guide button click
  if (sizeGuideBtn) {
    sizeGuideBtn.addEventListener('click', () => {
      const color = getSelectedColor() === 'white' || getSelectedColor() === 'black' ? getSelectedColor() : 'black';
      window.NewThriftsSizes.showSizeGuideModal('t-shirt', color);
    });
  }
  
  // Update size info when color changes
  document.querySelectorAll('.nt-btn--color').forEach(btn => {
    btn.addEventListener('click', () => {
      // Trigger size select change to update measurements for new color
      if (sizeSelect && sizeSelect.value) {
        sizeSelect.dispatchEvent(new Event('change'));
      }
    });
  });

  console.log('🚀 ENHANCED Interactive Mockup initialized! 🎨');
  console.log('📏 Size selector integrated with size chart system!');
});
</script>

{% schema %}
{
  "name": "Interactive Mockup",
  "class": "section-interactive-mockup",
  "settings": [
    {
      "type": "header",
      "content": "🖼 Base T-shirt Mockup"
    },
    {
      "type": "image_picker",
      "id": "base_mockup",
      "label": "Base T-shirt Image",
      "info": "Upload a high-quality T-shirt mockup image. Recommended size: 800x800px or larger."
    },
    {
      "type": "header",
      "content": "📐 Design Overlay Settings"
    },
    {
      "type": "range",
      "id": "overlay_top",
      "min": 0,
      "max": 90,
      "step": 1,
      "unit": "%",
      "label": "Top Position",
      "default": 45
    },
    {
      "type": "range",
      "id": "overlay_left",
      "min": 0,
      "max": 90,
      "step": 1,
      "unit": "%",
      "label": "Left Position",
      "default": 25
    },
    {
      "type": "range",
      "id": "overlay_width",
      "min": 10,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Design Width",
      "default": 60
    },
    {
      "type": "range",
      "id": "overlay_rotate",
      "min": -45,
      "max": 45,
      "step": 1,
      "unit": "°",
      "label": "Design Rotation",
      "default": 0
    },
    {
      "type": "header",
      "content": "⚙️ Options"
    },
    {
      "type": "checkbox",
      "id": "allow_download",
      "label": "Enable Download Feature",
      "default": true
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Interactive Mockup"
    }
  ]
}
{% endschema %}
