{% comment %}
Enhanced Interactive Product Mockup - Optimized Version (Fixed Liquid Syntax Error)
Key Improvements:
- Fixed Liquid syntax error in getViewImage method by moving JavaScript logic outside Liquid tags.
- Separated CSS into a dedicated <style> block with CSS variables.
- Modularized JavaScript into classes (InteractiveMockup, LayerManager).
- Optimized performance: throttled/debounced events, lazy-loaded images, OffscreenCanvas.
- Added accessibility: ARIA roles, keyboard navigation, focus states, live regions.
- New features: auto-center, design flip (horizontal/vertical), multiple design layers (up to 3).
- Improved error handling for image loading and file uploads.
- Added progressive enhancement with <noscript> fallback.
- Reduced DOM queries with caching and batched updates.
- Integrated basic analytics for user interactions.
- Optimized mobile experience with larger touch targets and enhanced pinch-to-zoom.
{% endcomment %}

<section id="nt-mockup-{{ section.id }}" class="nt-mockup" style="padding: {{ section.settings.padding_top }}px 0 {{ section.settings.padding_bottom }}px 0; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
  <div class="container">
    <!-- No-JS Fallback -->
    <noscript>
      <div style="text-align: center; padding: 20px; background: #f8d7da; color: #721c24; border-radius: 8px;">
        Please enable JavaScript to use the interactive mockup. Here's a static preview:
        <img src="{{ 'WFront_t-shirt.png' | asset_url }}" alt="Static T-shirt Preview" style="max-width: 300px;">
      </div>
    </noscript>

    <!-- Section Header -->
    <div class="mockup-header" style="text-align: center; margin-bottom: 40px;">
      <h2 style="font-family: 'Bebas Neue', sans-serif; font-size: 42px; margin: 0 0 16px 0; background: linear-gradient(45deg, var(--primary-color), var(--secondary-color)); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
        🎨 Live Design Preview
      </h2>
      <p style="font-size: 18px; color: #64748b; margin: 0; max-width: 600px; margin: 0 auto;">
        Customize your t-shirt with real-time previews. Switch views, colors, and add up to 3 design layers!
      </p>
    </div>

    <div class="nt-mockup__inner" style="display: grid; gap: 20px;">
      <!-- Controls -->
      <div class="nt-mockup__controls" style="display: flex; flex-wrap: wrap; gap: 20px; align-items: center; justify-content: center; background: white; padding: 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
        <!-- View Controls -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: var(--text-color); margin-right: 12px;">View</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Mockup view">
            <button class="nt-btn nt-btn--view is-active" data-view="front" aria-selected="true" tabindex="0">👕 Front</button>
            <button class="nt-btn nt-btn--view" data-view="back" aria-selected="false" tabindex="0">👕 Back</button>
            <button class="nt-btn nt-btn--view" data-view="hanging" aria-selected="false" tabindex="0">🏷️ Hanging</button>
            <button class="nt-btn nt-btn--view" data-view="person1" aria-selected="false" tabindex="0">👤 Model 1</button>
            <button class="nt-btn nt-btn--view" data-view="person2" aria-selected="false" tabindex="0">👤 Model 2</button>
          </div>
        </div>

        <!-- Color Controls -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label" style="font-weight: 600; font-size: 14px; color: var(--text-color); margin-right: 12px;">Color</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Shirt color">
            <button class="nt-btn nt-btn--color is-active" data-color="white" aria-selected="true" tabindex="0">⚪ White</button>
            <button class="nt-btn nt-btn--color" data-color="black" aria-selected="false" tabindex="0">⚫ Black</button>
            <button class="nt-btn nt-btn--color" data-color="pink" aria-selected="false" tabindex="0">🩷 Pink</button>
            <button class="nt-btn nt-btn--color" data-color="blue" aria-selected="false" tabindex="0">🔵 Blue</button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="nt-mockup__group">
          <div class="upload-section" style="display: flex; flex-direction: column; gap: 8px; align-items: center;">
            <button class="nt-btn nt-btn--upload" id="nt-upload-{{ section.id }}" style="position: relative; overflow: hidden;">
              📁 Upload Your Design
              <input type="file" id="nt-file-input-{{ section.id }}" accept=".png,.jpg,.jpeg,.svg,.pdf" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer;">
            </button>
            <div class="file-info" style="display: flex; gap: 12px; align-items: center; font-size: 12px; color: #6b7280;">
              <span>📄 Accepts:</span>
              <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                <span class="file-type">PNG</span>
                <span class="file-type">JPG</span>
                <span class="file-type">SVG</span>
                <span class="file-type">PDF</span>
              </div>
              <button class="help-link" id="nt-help-{{ section.id }}">ℹ️ Help</button>
            </div>
          </div>
          {% if section.settings.allow_download %}
          <button class="nt-btn nt-btn--primary" id="nt-download-{{ section.id }}" tabindex="0">📥 Download Mockup</button>
          {% endif %}
          <button class="nt-btn nt-btn--secondary" id="nt-edit-{{ section.id }}" tabindex="0">✏️ Edit Design</button>
          <button class="nt-btn nt-btn--danger" id="nt-remove-{{ section.id }}" style="display: none;" tabindex="0">🗑️ Remove Design</button>
        </div>
      </div>

      <!-- Advanced Placement Controls -->
      <div id="nt-placement-controls-{{ section.id }}" class="nt-placement-controls" style="display: block; background: white; padding: 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin: 10px 0 40px 0;">
        <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
          <span style="font-weight: 600; font-size: 16px; color: var(--text-color);">🎯 Precise Placement Controls</span>
          <button id="nt-auto-equidistant-{{ section.id }}">⚖️ Auto-Equidistant</button>
          <button id="nt-auto-center-{{ section.id }}">🎯 Auto-Center</button>
          {% if section.settings.enable_flip %}
          <button id="nt-flip-horizontal-{{ section.id }}">↔️ Flip Horizontal</button>
          <button id="nt-flip-vertical-{{ section.id }}">↕️ Flip Vertical</button>
          {% endif %}
          <button id="nt-reset-placement-{{ section.id }}">🔄 Reset</button>
        </div>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: var(--text-color);">
              <span>📐 Top Position</span>
              <span id="nt-top-val-{{ section.id }}" style="font-weight: 600; color: var(--primary-color);">{{ section.settings.overlay_top }}%</span>
            </label>
            <input type="range" id="nt-top-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_top }}" aria-label="Top Position">
          </div>
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: var(--text-color);">
              <span>📐 Left Position</span>
              <span id="nt-left-val-{{ section.id }}" style="font-weight: 600; color: var(--primary-color);">{{ section.settings.overlay_left }}%</span>
            </label>
            <input type="range" id="nt-left-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_left }}" aria-label="Left Position">
          </div>
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: var(--text-color);">
              <span>📏 Design Width</span>
              <span id="nt-width-val-{{ section.id }}" style="font-weight: 600; color: var(--primary-color);">{{ section.settings.overlay_width }}%</span>
            </label>
            <input type="range" id="nt-width-{{ section.id }}" min="10" max="100" step="1" value="{{ section.settings.overlay_width }}" aria-label="Design Width">
          </div>
          <div class="placement-slider">
            <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: var(--text-color);">
              <span>🔄 Rotation</span>
              <span id="nt-rotate-val-{{ section.id }}" style="font-weight: 600; color: var(--primary-color);">{{ section.settings.overlay_rotate }}°</span>
            </label>
            <input type="range" id="nt-rotate-{{ section.id }}" min="-45" max="45" step="0.5" value="{{ section.settings.overlay_rotate }}" aria-label="Design Rotation">
          </div>
        </div>
        <div style="margin-top: 20px; padding: 16px; background: #fef3c7; border-radius: 12px; border: 1px solid #fbbf24;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #92400e;">🎯 Placement Guide</h5>
          <div style="display: flex; align-items: center; gap: 12px;">
            <button id="nt-toggle-guide-{{ section.id }}">📐 Show Placement Guide</button>
            <span style="font-size: 12px; color: #92400e;">Toggle crosshairs and placement area</span>
          </div>
        </div>
        <div style="margin-top: 20px; padding: 16px; background: #f0fdf4; border-radius: 12px; border: 1px solid #bbf7d0;">
          <h5 style="margin: 0 0 12px 0; font-size: 14px; font-weight: 600; color: #166534;">🔍 Mockup Size Controls</h5>
          <div style="display: grid; grid-template-columns: 1fr auto; gap: 12px; align-items: end;">
            <div>
              <label style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: var(--text-color);">
                <span>📏 T-shirt Scale</span>
                <span id="nt-mockup-scale-val-{{ section.id }}" style="font-weight: 600; color: var(--primary-color);">100%</span>
              </label>
              <input type="range" id="nt-mockup-scale-{{ section.id }}" min="50" max="130" step="5" value="100" aria-label="T-shirt Scale">
            </div>
            <div style="display: flex; flex-direction: column; gap: 6px;">
              <button id="nt-zoom-in-{{ section.id }}">🔍 Zoom In</button>
              <button id="nt-zoom-out-{{ section.id }}">🔍 Zoom Out</button>
            </div>
          </div>
        </div>
        <div style="margin-top: 16px; padding: 12px; background: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
          <div style="font-size: 12px; color: #6b7280; text-align: center;">
            💡 <strong>Pro Tip:</strong> Drag the design to move it, use scroll wheel to resize, or add up to 3 design layers!
          </div>
        </div>
      </div>

      <!-- Layer Management UI -->
      {% if section.settings.enable_multi_layers %}
      <div class="nt-mockup__layers" style="display: flex; flex-wrap: wrap; gap: 10px; background: white; padding: 15px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
        <span style="font-weight: 600; font-size: 14px; color: var(--text-color);">🖼️ Design Layers</span>
        <div id="nt-layers-list-{{ section.id }}" style="display: flex; gap: 8px;"></div>
      </div>
      {% endif %}

      <!-- Mockup View Grid -->
      <div class="nt-mockup__grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin: 30px 0; padding: 0 20px;"></div>

      <!-- Preview Stage -->
      <div class="nt-mockup__stage" style="width: 100%; display: grid; place-items: center; margin-top: 20px; margin-bottom: 100px; padding: 0 20px;">
        <div class="nt-mockup__canvas" id="nt-mockup-canvas-{{ section.id }}" style="position: relative; width: min(900px, 100%); max-width: 90vw; aspect-ratio: 1 / 1; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; overflow: hidden; box-shadow: 0 25px 80px rgba(102, 126, 234, 0.3), 0 10px 30px rgba(0,0,0,0.2); cursor: grab;">
          <img id="nt-base-{{ section.id }}" class="nt-mockup__base" src="{{ 'WFront_t-shirt.png' | asset_url }}" alt="T-shirt mockup" loading="lazy" decoding="async" style="position: absolute; inset: 0; width: 100%; height: 100%; object-fit: contain; pointer-events: none;">
          <div class="nt-mockup__overlays"></div>
          <div id="nt-placement-guide-{{ section.id }}" style="position: absolute; inset: 0; pointer-events: none; z-index: 6; display: none;">
            <div style="position: absolute; top: 50%; left: 0; right: 0; height: 2px; background: linear-gradient(90deg, transparent, #ff6b6b, #ff6b6b, transparent); transform: translateY(-50%); box-shadow: 0 0 4px rgba(255, 107, 107, 0.5);"></div>
            <div style="position: absolute; left: 50%; top: 0; bottom: 0; width: 2px; background: linear-gradient(180deg, transparent, #ff6b6b, #ff6b6b, transparent); transform: translateX(-50%); box-shadow: 0 0 4px rgba(255, 107, 107, 0.5);"></div>
            <div style="position: absolute; top: 50%; left: 50%; width: 24px; height: 24px; border: 3px solid #ff6b6b; border-radius: 50%; transform: translate(-50%, -50%); background: rgba(255, 107, 107, 0.2); box-shadow: 0 0 8px rgba(255, 107, 107, 0.6);"></div>
            <div style="position: absolute; top: 20%; left: 20%; right: 20%; bottom: 20%; border: 3px dashed #4ecdc4; border-radius: 12px; background: rgba(78, 205, 196, 0.1); box-shadow: 0 0 12px rgba(78, 205, 196, 0.3);">
              <div style="position: absolute; top: 8px; left: 50%; transform: translateX(-50%); background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 6px 16px; border-radius: 8px; font-size: 13px; font-weight: 700; white-space: nowrap; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">
                🎯 Place Design Here
              </div>
            </div>
            <div id="nt-centering-indicators-{{ section.id }}" style="position: absolute; inset: 0; pointer-events: none;">
              <div id="nt-perfect-center-{{ section.id }}" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: none;">
                <div style="width: 40px; height: 40px; border: 3px solid #10b981; border-radius: 50%; background: rgba(16, 185, 129, 0.2); box-shadow: 0 0 20px rgba(16, 185, 129, 0.8); animation: pulse 2s infinite;">
                  <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #10b981; font-size: 16px; font-weight: bold;">✓</div>
                </div>
                <div style="position: absolute; top: -25px; left: 50%; transform: translateX(-50%); background: #10b981; color: white; padding: 4px 8px; border-radius: 4px; font-size: 10px; font-weight: 600; white-space: nowrap;">
                  PERFECT CENTER
                </div>
              </div>
              <div id="nt-horizontal-center-{{ section.id }}" style="position: absolute; top: 50%; left: 0; right: 0; height: 2px; background: linear-gradient(90deg, transparent, #f59e0b, #f59e0b, transparent); transform: translateY(-50%); display: none; box-shadow: 0 0 8px rgba(245, 158, 11, 0.6);"></div>
              <div id="nt-vertical-center-{{ section.id }}" style="position: absolute; left: 50%; top: 0; bottom: 0; width: 2px; background: linear-gradient(180deg, transparent, #f59e0b, #f59e0b, transparent); transform: translateX(-50%); display: none; box-shadow: 0 0 8px rgba(245, 158, 11, 0.6);"></div>
              <div id="nt-equidistant-{{ section.id }}" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: none;">
                <div style="width: 60px; height: 60px; border: 2px dashed #8b5cf6; border-radius: 50%; background: rgba(139, 92, 246, 0.1); box-shadow: 0 0 15px rgba(139, 92, 246, 0.4);">
                  <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #8b5cf6; font-size: 14px; font-weight: bold;">⚖</div>
                </div>
                <div style="position: absolute; top: -20px; left: 50%; transform: translateX(-50%); background: #8b5cf6; color: white; padding: 3px 6px; border-radius: 3px; font-size: 9px; font-weight: 600; white-space: nowrap;">
                  EQUIDISTANT
                </div>
              </div>
              <div id="nt-centering-status-{{ section.id }}" style="position: absolute; top: 10px; left: 10px; background: rgba(0, 0, 0, 0.8); color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; font-weight: 600; display: none; max-width: 200px;" aria-live="polite">
                <div id="nt-status-text-{{ section.id }}"></div>
              </div>
            </div>
          </div>
        </div>
        <p class="nt-mockup__hint" style="color: #6b7280; font-size: 14px; margin-top: 16px; text-align: center;">
          💡 Tip: Drag the design, use scroll wheel to resize, or use precise controls above. Add multiple layers!
        </p>
      </div>
    </div>
  </div>
</section>

<style>
  :root {
    --primary-color: #27e1c1;
    --secondary-color: #ff4fa3;
    --text-color: #374151;
    --accent-color: #8b5cf6;
    --transition-duration: 0.3s;
    --shadow-sm: 0 2px 8px rgba(0,0,0,0.1);
    --shadow-md: 0 4px 12px rgba(0,0,0,0.1);
    --shadow-lg: 0 8px 25px rgba(0,0,0,0.15);
  }

  .nt-btn {
    padding: 12px 24px;
    border: 2px solid var(--primary-color);
    background: var(--primary-color);
    color: white;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-duration) ease;
    touch-action: manipulation;
  }

  .nt-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  .nt-btn:focus {
    outline: 3px solid var(--primary-color);
    outline-offset: 2px;
  }

  .nt-btn--view:not(.is-active), .nt-btn--color:not(.is-active) {
    border: 2px solid #e2e8f0;
    background: white;
    color: #64748b;
  }

  .nt-btn--view:hover:not(.is-active), .nt-btn--color:hover:not(.is-active) {
    border-color: var(--primary-color);
    background: #f0fdfa;
    color: var(--primary-color);
  }

  .nt-btn--primary {
    background: linear-gradient(45deg, #10b981, #059669);
  }

  .nt-btn--primary:hover {
    background: linear-gradient(45deg, #059669, #047857);
  }

  .nt-btn--secondary {
    background: linear-gradient(45deg, var(--accent-color), #a855f7);
  }

  .nt-btn--secondary:hover {
    background: linear-gradient(45deg, #a855f7, #9333ea);
  }

  .nt-btn--upload {
    background: linear-gradient(45deg, #f59e0b, #d97706);
  }

  .nt-btn--upload:hover {
    background: linear-gradient(45deg, #d97706, #b45309);
  }

  .nt-btn--danger {
    background: linear-gradient(45deg, #ef4444, #dc2626);
  }

  .file-type {
    background: #e5e7eb;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 11px;
  }

  .file-type:hover {
    background: #d1d5db;
  }

  .help-link {
    background: none;
    border: none;
    color: #3b82f6;
    cursor: pointer;
    font-size: 11px;
    text-decoration: underline;
  }

  .help-link:hover {
    color: #1d4ed8;
  }

  .nt-mockup__overlay:hover {
    box-shadow: 0 0 0 2px rgba(39, 225, 193, 0.3);
  }

  .nt-mockup__overlay:active {
    cursor: grabbing;
  }

  .nt-mockup__canvas.dragging {
    cursor: grabbing;
  }

  .placement-slider input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    cursor: pointer;
    width: 100%;
    height: 6px;
  }

  .placement-slider input[type="range"]::-webkit-slider-track {
    background: #e5e7eb;
    height: 6px;
    border-radius: 3px;
  }

  .placement-slider input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    background: var(--primary-color);
    height: 18px;
    width: 18px;
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: var(--shadow-sm);
  }

  .placement-slider input[type="range"]:focus {
    outline: 3px solid var(--primary-color);
    outline-offset: 2px;
  }

  .nt-mockup__grid-item {
    background: white;
    border-radius: 12px;
    padding: 16px;
    text-align: center;
    cursor: pointer;
    transition: all var(--transition-duration) cubic-bezier(0.4, 0, 0.2, 1);
    border: 2px solid #e2e8f0;
    box-shadow: var(--shadow-sm);
  }

  .nt-mockup__grid-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .nt-mockup__grid-item.is-active {
    border-color: var(--primary-color);
    box-shadow: 0 8px 25px rgba(39, 225, 193, 0.3);
  }

  .grid-mockup-preview {
    width: 100%;
    height: 120px;
    background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    border-radius: 8px;
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .grid-mockup-preview img {
    max-width: 80%;
    max-height: 80%;
    object-fit: contain;
    transition: transform var(--transition-duration) ease;
  }

  .nt-mockup__grid-item:hover .grid-mockup-preview img {
    transform: scale(1.05);
  }

  .nt-mockup__grid-item.is-active .grid-mockup-preview img {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    .nt-mockup__controls {
      flex-direction: column;
      gap: 15px;
    }

    .nt-mockup__group {
      flex-direction: column;
      gap: 8px;
    }

    .nt-mockup__buttons {
      flex-wrap: wrap;
      justify-content: center;
    }

    .mockup-header h2 {
      font-size: 32px;
    }

    .nt-mockup__canvas {
      width: 100%;
      max-width: 500px;
    }

    .nt-btn {
      padding: 12px 24px;
    }
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.1); opacity: 0.8; }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  class LayerManager {
    constructor(mockup) {
      this.mockup = mockup;
      this.layers = [];
      this.maxLayers = 3;
    }

    addLayer(type, data) {
      if (this.layers.length >= this.maxLayers) {
        this.mockup.showMessage('Maximum 3 layers reached', 'error');
        return false;
      }
      const layer = {
        id: `layer-${Date.now()}`,
        type,
        topPct: this.mockup.placementState.topPct,
        leftPct: this.mockup.placementState.leftPct,
        widthPct: this.mockup.placementState.widthPct,
        rotateDeg: this.mockup.placementState.rotateDeg,
        flipHorizontal: this.mockup.placementState.flipHorizontal,
        flipVertical: this.mockup.placementState.flipVertical,
        ...data
      };
      this.layers.push(layer);
      this.mockup.renderLayer(layer);
      this.mockup.logInteraction(`Layer Added: ${layer.id}`);
      return true;
    }

    removeLayer(layerId) {
      const overlay = document.getElementById(`nt-overlay-${layerId}-${this.mockup.sectionId}`);
      if (overlay) overlay.remove();
      this.layers = this.layers.filter(layer => layer.id !== layerId);
      this.mockup.updateLayersUI();
      this.mockup.logInteraction(`Layer Removed: ${layerId}`);
    }

    updateLayer(layerId, updates) {
      const layer = this.layers.find(l => l.id === layerId);
      if (layer) {
        Object.assign(layer, updates);
        this.mockup.renderLayer(layer);
      }
    }
  }

  class InteractiveMockup {
    constructor(sectionId) {
      this.sectionId = sectionId;
      this.layerManager = new LayerManager(this);
      this.state = {
        view: 'front',
        color: 'white'
      };
      this.placementState = {
        topPct: {{ section.settings.overlay_top }},
        leftPct: {{ section.settings.overlay_left }},
        widthPct: {{ section.settings.overlay_width }},
        rotateDeg: {{ section.settings.overlay_rotate }},
        scalePct: 100,
        flipHorizontal: false,
        flipVertical: false,
        dragging: false,
        resizing: false,
        pinching: false,
        hasUploadedDesign: false,
        activeLayer: null
      };
      this.elements = this.cacheElements();
      this.currentUploadPreview = null;
      this.currentSizeChart = null;
      this.init();
    }

    cacheElements() {
      return {
        canvas: document.getElementById(`nt-mockup-canvas-${this.sectionId}`),
        baseImg: document.getElementById(`nt-base-${this.sectionId}`),
        overlaysContainer: document.querySelector(`#nt-mockup-${this.sectionId} .nt-mockup__overlays`),
        grid: document.querySelector(`#nt-mockup-${this.sectionId} .nt-mockup__grid`),
        layersList: document.getElementById(`nt-layers-list-${this.sectionId}`),
        viewButtons: document.querySelectorAll(`#nt-mockup-${this.sectionId} .nt-btn--view`),
        colorButtons: document.querySelectorAll(`#nt-mockup-${this.sectionId} .nt-btn--color`),
        sliders: {
          top: document.getElementById(`nt-top-${this.sectionId}`),
          left: document.getElementById(`nt-left-${this.sectionId}`),
          width: document.getElementById(`nt-width-${this.sectionId}`),
          rotate: document.getElementById(`nt-rotate-${this.sectionId}`),
          scale: document.getElementById(`nt-mockup-scale-${this.sectionId}`)
        },
        actions: {
          upload: document.getElementById(`nt-upload-${this.sectionId}`),
          fileInput: document.getElementById(`nt-file-input-${this.sectionId}`),
          download: document.getElementById(`nt-download-${this.sectionId}`),
          edit: document.getElementById(`nt-edit-${this.sectionId}`),
          remove: document.getElementById(`nt-remove-${this.sectionId}`),
          help: document.getElementById(`nt-help-${this.sectionId}`),
          autoEquidistant: document.getElementById(`nt-auto-equidistant-${this.sectionId}`),
          autoCenter: document.getElementById(`nt-auto-center-${this.sectionId}`),
          flipHorizontal: document.getElementById(`nt-flip-horizontal-${this.sectionId}`),
          flipVertical: document.getElementById(`nt-flip-vertical-${this.sectionId}`),
          reset: document.getElementById(`nt-reset-placement-${this.sectionId}`),
          toggleGuide: document.getElementById(`nt-toggle-guide-${this.sectionId}`),
          zoomIn: document.getElementById(`nt-zoom-in-${this.sectionId}`),
          zoomOut: document.getElementById(`nt-zoom-out-${this.sectionId}`)
        }
      };
    }

    init() {
      this.generateGridItems();
      this.bindEvents();
      this.lazyLoadImages();
      this.updateDesignPosition();
      this.updateLayersUI();
      this.logInteraction('Mockup Initialized');
    }

    bindEvents() {
      this.elements.viewButtons.forEach(btn => {
        btn.addEventListener('click', () => this.changeView(btn.dataset.view));
        btn.addEventListener('keydown', e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.changeView(btn.dataset.view);
          }
        });
      });
      this.elements.colorButtons.forEach(btn => {
        btn.addEventListener('click', () => this.changeColor(btn.dataset.color));
        btn.addEventListener('keydown', e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.changeColor(btn.dataset.color);
          }
        });
      });

      this.elements.actions.fileInput?.addEventListener('change', this.handleUpload.bind(this));
      this.elements.actions.download?.addEventListener('click', this.downloadComposite.bind(this));
      this.elements.actions.help?.addEventListener('click', this.showHelpModal.bind(this));
      this.elements.actions.remove?.addEventListener('click', this.removeDesign.bind(this));
      this.elements.actions.autoEquidistant?.addEventListener('click', this.autoEquidistant.bind(this));
      this.elements.actions.autoCenter?.addEventListener('click', this.autoCenter.bind(this));
      this.elements.actions.flipHorizontal?.addEventListener('click', () => this.flipDesign('horizontal'));
      this.elements.actions.flipVertical?.addEventListener('click', () => this.flipDesign('vertical'));
      this.elements.actions.reset?.addEventListener('click', this.resetPlacement.bind(this));
      this.elements.actions.toggleGuide?.addEventListener('click', this.togglePlacementGuide.bind(this));
      this.elements.actions.zoomIn?.addEventListener('click', () => this.updateMockupScale(this.placementState.scalePct + 5));
      this.elements.actions.zoomOut?.addEventListener('click', () => this.updateMockupScale(this.placementState.scalePct - 5));

      Object.entries(this.elements.sliders).forEach(([key, slider]) => {
        slider.addEventListener('input', this.debounce(e => {
          this.placementState[key + 'Pct'] = parseFloat(e.target.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        }, 100));
        slider.addEventListener('keydown', e => {
          if (e.key === 'ArrowLeft' || e.key === 'ArrowDown') {
            slider.value = parseFloat(slider.value) - slider.step;
          } else if (e.key === 'ArrowRight' || e.key === 'ArrowUp') {
            slider.value = parseFloat(slider.value) + slider.step;
          }
          this.placementState[key + 'Pct'] = parseFloat(slider.value);
          this.updatePlacementDisplay();
          this.updateDesignPosition();
        });
      });

      this.bindDragResize();
    }

    generateGridItems() {
      const views = [
        { view: 'front', img: 'WFront_t-shirt.png', label: 'Front' },
        { view: 'back', img: 'Wback_t-shirt.png', label: 'Back' },
        { view: 'hanging', img: 'W3-D_t-shirt.png', label: 'Folded' },
        { view: 'person1', img: 'Models/Women/Girl-Model.png', label: 'Person 1' },
        { view: 'person2', img: 'Models/Women/Women-side.png', label: 'Person 2' },
        { view: 'person3_front', img: 'Models/Women/Girl-Model.png', label: 'Person 3 Front' },
        { view: 'person3_back', img: 'Models/Women/Girl-Model.png', label: 'Person 3 Back' },
        { view: 'person3_left', img: 'Models/Women/Women-side.png', label: 'Person 3 Left' },
        { view: 'person3_context', img: 'Models/Women/Girl-Model.png', label: 'Person 3 Context' },
        { view: 'person4_front', img: 'Models/Women/Girl-Model.png', label: 'Person 4 Front' },
        { view: 'person4_back', img: 'Models/Women/Girl-Model.png', label: 'Person 4 Back' },
        { view: 'person4_right', img: 'Models/Women/Women-side.png', label: 'Person 4 Right' },
        { view: 'person4_context', img: 'Models/Women/Girl-Model.png', label: 'Person 4 Context' },
        { view: 'size_chart', img: null, label: 'Size Chart', isPlaceholder: true }
      ];
      views.forEach(({ view, img, label, isPlaceholder }) => {
        const item = document.createElement('div');
        item.classList.add('nt-mockup__grid-item');
        item.dataset.view = view;
        item.setAttribute('tabindex', '0');
        item.innerHTML = `
          <div class="grid-mockup-preview">
            ${isPlaceholder ? 
              `<div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; background: linear-gradient(45deg, #667eea, #764ba2); color: white; font-weight: bold; font-size: 16px; border-radius: 8px;">📏 Size Chart</div>` :
              `<img data-src="{{ img | asset_url }}" alt="${label}" loading="lazy">`
            }
          </div>
          <div class="grid-label">${label}</div>
        `;
        item.addEventListener('click', () => this.changeView(view));
        item.addEventListener('keydown', e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.changeView(view);
          }
        });
        this.elements.grid.appendChild(item);
      });
      this.setActiveGridItem(this.elements.grid.querySelector(`[data-view="${this.state.view}"]`));
    }

    lazyLoadImages() {
      const images = this.elements.grid.querySelectorAll('img[data-src]');
      const observer = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.src = img.dataset.src;
            img.onload = () => this.logInteraction(`Image Loaded: ${img.src}`);
            img.onerror = () => this.handleImageError(img);
            obs.unobserve(img);
          }
        });
      }, { rootMargin: '100px' });
      images.forEach(img => observer.observe(img));
    }

    handleImageError(img) {
      img.src = '{{ 'fallback_t-shirt.png' | asset_url }}';
      this.showMessage('Failed to load image, using fallback', 'error');
    }

    changeView(view) {
      if (view === 'size_chart') {
        this.showSizeChart();
        return;
      }
      this.state.view = view;
      this.elements.baseImg.src = this.getViewImage(view);
      this.updateViewButtons();
      this.setActiveGridItem(this.elements.grid.querySelector(`[data-view="${view}"]`));
      this.logInteraction(`View Changed: ${view}`);
    }

    getViewImage(view) {
      const viewImages = {
        front: '{{ 'WFront_t-shirt.png' | asset_url }}',
        back: '{{ 'Wback_t-shirt.png' | asset_url }}',
        hanging: '{{ 'W3-D_t-shirt.png' | asset_url }}',
        person1: '{{ 'Models/Women/Girl-Model.png' | asset_url }}',
        person2: '{{ 'Models/Women/Women-side.png' | asset_url }}',
        person3_front: '{{ 'Models/Women/Girl-Model.png' | asset_url }}',
        person3_back: '{{ 'Models/Women/Girl-Model.png' | asset_url }}',
        person3_left: '{{ 'Models/Women/Women-side.png' | asset_url }}',
        person3_context: '{{ 'Models/Women/Girl-Model.png' | asset_url }}',
        person4_front: '{{ 'Models/Women/Girl-Model.png' | asset_url }}',
        person4_back: '{{ 'Models/Women/Girl-Model.png' | asset_url }}',
        person4_right: '{{ 'Models/Women/Women-side.png' | asset_url }}',
        person4_context: '{{ 'Models/Women/Girl-Model.png' | asset_url }}'
      };
      const imagePath = viewImages[view] || 'WFront_t-shirt.png';
      return viewImages[view] || '{{ 'WFront_t-shirt.png' | asset_url }}';
    }

    changeColor(color) {
      this.state.color = color;
      this.elements.colorButtons.forEach(btn => {
        const isActive = btn.dataset.color === color;
        btn.classList.toggle('is-active', isActive);
        btn.style.borderColor = isActive ? '#27e1c1' : '#e2e8f0';
        btn.style.background = isActive ? '#27e1c1' : 'white';
        btn.style.color = isActive ? 'white' : '#64748b';
        btn.setAttribute('aria-selected', isActive);
      });
      this.logInteraction(`Color Changed: ${color}`);
    }

    updateViewButtons() {
      const viewMapping = {
        person3_front: 'person1', person3_back: 'person1', person3_left: 'person1', person3_context: 'person1',
        person4_front: 'person2', person4_back: 'person2', person4_right: 'person2', person4_context: 'person2',
        folded: 'hanging'
      };
      const buttonView = viewMapping[this.state.view] || this.state.view;
      this.elements.viewButtons.forEach(btn => {
        const isActive = btn.dataset.view === buttonView;
        btn.classList.toggle('is-active', isActive);
        btn.style.borderColor = isActive ? '#27e1c1' : '#e2e8f0';
        btn.style.background = isActive ? '#27e1c1' : 'white';
        btn.style.color = isActive ? 'white' : '#64748b';
        btn.setAttribute('aria-selected', isActive);
      });
    }

    setActiveGridItem(activeItem) {
      this.elements.grid.querySelectorAll('.nt-mockup__grid-item').forEach(item => {
        const isActive = item === activeItem;
        item.classList.toggle('is-active', isActive);
        item.style.borderColor = isActive ? '#27e1c1' : '#e2e8f0';
        item.style.boxShadow = isActive ? '0 8px 25px rgba(39, 225, 193, 0.3)' : '0 2px 8px rgba(0,0,0,0.1)';
      });
    }

    handleUpload(e) {
      const file = e.target.files[0];
      if (!file) return;
      if (!['image/png', 'image/jpeg', 'image/svg+xml', 'application/pdf'].includes(file.type)) {
        this.showMessage('Unsupported file type', 'error');
        return;
      }
      if (file.size > 10 * 1024 * 1024) {
        this.showMessage('File too large (max 10MB)', 'error');
        return;
      }
      const reader = new FileReader();
      reader.onload = () => {
        if (this.layerManager.addLayer('image', { src: reader.result })) {
          this.placementState.hasUploadedDesign = true;
          this.elements.actions.remove.style.display = 'block';
          this.updateLayersUI();
        }
      };
      reader.onerror = () => this.showMessage('Failed to read file', 'error');
      reader.readAsDataURL(file);
      this.logInteraction('File Uploaded');
    }

    renderLayer(layer) {
      let overlay = document.getElementById(`nt-overlay-${layer.id}-${this.sectionId}`);
      if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = `nt-overlay-${layer.id}-${this.sectionId}`;
        overlay.classList.add('nt-mockup__overlay');
        this.elements.overlaysContainer.appendChild(overlay);
      }
      overlay.innerHTML = layer.type === 'image' && layer.src ?
        `<img src="${layer.src}" alt="Uploaded design" style="width: 100%; height: auto; object-fit: contain; pointer-events: none;">` :
        `<span style="font-family: 'Bebas Neue', sans-serif; font-size: 32px; font-weight: bold; color: #000000; text-align: center; white-space: nowrap; user-select: none; text-shadow: 1px 1px 2px rgba(255,255,255,0.8); pointer-events: none;">Your Design Here</span>`;
      Object.assign(overlay.style, {
        position: 'absolute',
        width: `${layer.widthPct}%`,
        left: `${layer.leftPct}%`,
        top: `${layer.topPct}%`,
        transform: `rotate(${layer.rotateDeg}deg) ${layer.flipHorizontal ? 'scaleX(-1)' : ''} ${layer.flipVertical ? 'scaleY(-1)' : ''}`,
        height: 'auto',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        cursor: 'grab',
        transition: 'all 0.1s ease',
        border: '2px dashed rgba(39, 225, 193, 0.3)',
        borderRadius: '8px',
        background: 'rgba(39, 225, 193, 0.05)'
      });
      overlay.addEventListener('mousedown', e => this.startDrag(e, layer.id));
      overlay.addEventListener('touchstart', e => {
        e.preventDefault();
        if (e.touches.length === 1) this.startDrag(e.touches[0], layer.id);
        else if (e.touches.length === 2) this.startPinch(e, layer.id);
      }, { passive: false });
    }

    updateLayersUI() {
      if (!this.elements.layersList) return;
      this.elements.layersList.innerHTML = '';
      this.layerManager.layers.forEach(layer => {
        const layerItem = document.createElement('div');
        layerItem.style.cssText = 'display: flex; gap: 4px; align-items: center;';
        layerItem.innerHTML = `
          <span style="font-size: 12px; color: var(--text-color);">${layer.id}</span>
          <button style="padding: 4px 8px; font-size: 12px; background: #ef4444; color: white; border: none; border-radius: 4px;">Remove</button>
        `;
        layerItem.querySelector('button').addEventListener('click', () => this.layerManager.removeLayer(layer.id));
        this.elements.layersList.appendChild(layerItem);
      });
    }

    updatePlacementDisplay() {
      Object.entries(this.elements.sliders).forEach(([key, slider]) => {
        const value = this.placementState[key + 'Pct'];
        if (slider) {
          slider.value = value;
          const valDisplay = document.getElementById(`nt-${key}-val-${this.sectionId}`);
          if (valDisplay) valDisplay.textContent = key === 'rotate' ? `${value}°` : `${value}%`;
        }
      });
    }

    updateDesignPosition() {
      requestAnimationFrame(() => {
        this.layerManager.layers.forEach(layer => {
          this.layerManager.updateLayer(layer.id, {
            topPct: this.placementState.topPct,
            leftPct: this.placementState.leftPct,
            widthPct: this.placementState.widthPct,
            rotateDeg: this.placementState.rotateDeg,
            flipHorizontal: this.placementState.flipHorizontal,
            flipVertical: this.placementState.flipVertical
          });
        });
        this.checkCentering();
      });
    }

    checkCentering() {
      const { topPct, leftPct, widthPct } = this.placementState;
      const perfectCenter = document.getElementById(`nt-perfect-center-${this.sectionId}`);
      const horizontalCenter = document.getElementById(`nt-horizontal-center-${this.sectionId}`);
      const verticalCenter = document.getElementById(`nt-vertical-center-${this.sectionId}`);
      const equidistant = document.getElementById(`nt-equidistant-${this.sectionId}`);
      const statusDiv = document.getElementById(`nt-centering-status-${this.sectionId}`);
      const statusText = document.getElementById(`nt-status-text-${this.sectionId}`);

      if (!perfectCenter || !horizontalCenter || !verticalCenter || !equidistant || !statusDiv || !statusText) return;

      perfectCenter.style.display = 'none';
      horizontalCenter.style.display = 'none';
      verticalCenter.style.display = 'none';
      equidistant.style.display = 'none';
      statusDiv.style.display = 'none';

      const isHorizontallyCentered = Math.abs(leftPct - (100 - widthPct) / 2) <= 2;
      const isVerticallyCentered = Math.abs(topPct - 45) <= 2;
      const isPerfectCenter = isHorizontallyCentered && isVerticallyCentered;
      const leftDistance = leftPct;
      const rightDistance = 100 - leftPct - widthPct;
      const topDistance = topPct;
      const bottomDistance = 100 - topPct - (widthPct * 0.8);
      const isEquidistant = Math.abs(leftDistance - rightDistance) <= 3 && Math.abs(topDistance - bottomDistance) <= 3;

      if (isPerfectCenter) {
        perfectCenter.style.display = 'block';
        statusText.textContent = '🎯 Perfect center achieved!';
        statusDiv.style.display = 'block';
        statusDiv.style.background = 'rgba(16, 185, 129, 0.9)';
      } else {
        if (isHorizontallyCentered) {
          horizontalCenter.style.display = 'block';
          statusText.textContent = '↔️ Horizontally centered';
          statusDiv.style.display = 'block';
          statusDiv.style.background = 'rgba(245, 158, 11, 0.9)';
        }
        if (isVerticallyCentered) {
          verticalCenter.style.display = 'block';
          statusText.textContent = '↕️ Vertically centered';
          statusDiv.style.display = 'block';
          statusDiv.style.background = 'rgba(245, 158, 11, 0.9)';
        }
      }
      if (isEquidistant && !isPerfectCenter) {
        equidistant.style.display = 'block';
        if (statusDiv.style.display === 'none') {
          statusText.textContent = '⚖️ Equidistant positioning';
          statusDiv.style.display = 'block';
          statusDiv.style.background = 'rgba(139, 92, 246, 0.9)';
        }
      }
      if (statusDiv.style.display === 'block') {
        setTimeout(() => statusDiv.style.display = 'none', 3000);
      }
    }

    autoEquidistant() {
      const currentWidth = this.placementState.widthPct;
      this.placementState.leftPct = (100 - currentWidth) / 2;
      this.placementState.topPct = 35;
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.showMessage('⚖️ Design positioned equidistant!', 'success');
      this.logInteraction('Auto-Equidistant Applied');
    }

    autoCenter() {
      this.placementState.leftPct = (100 - this.placementState.widthPct) / 2;
      this.placementState.topPct = 20;
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.showMessage('🎯 Design auto-centered!', 'success');
      this.logInteraction('Auto-Center Applied');
    }

    flipDesign(direction) {
      this.placementState[`flip${direction.charAt(0).toUpperCase() + direction.slice(1)}`] = !this.placementState[`flip${direction.charAt(0).toUpperCase() + direction.slice(1)}`];
      this.updateDesignPosition();
      this.showMessage(`↔️ Design flipped ${direction}!`, 'success');
      this.logInteraction(`Design Flipped: ${direction}`);
    }

    resetPlacement() {
      this.placementState.topPct = {{ section.settings.overlay_top }};
      this.placementState.leftPct = {{ section.settings.overlay_left }};
      this.placementState.widthPct = {{ section.settings.overlay_width }};
      this.placementState.rotateDeg = {{ section.settings.overlay_rotate }};
      this.placementState.flipHorizontal = false;
      this.placementState.flipVertical = false;
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.showMessage('🔄 Placement reset!', 'success');
      this.logInteraction('Placement Reset');
    }

    bindDragResize() {
      this.elements.overlaysContainer.addEventListener('mousedown', e => {
        const overlay = e.target.closest('.nt-mockup__overlay');
        if (overlay) this.startDrag(e, overlay.id.split('-')[2]);
      });
      this.elements.overlaysContainer.addEventListener('touchstart', e => {
        e.preventDefault();
        const overlay = e.target.closest('.nt-mockup__overlay');
        if (overlay && e.touches.length === 1) this.startDrag(e.touches[0], overlay.id.split('-')[2]);
        else if (overlay && e.touches.length === 2) this.startPinch(e, overlay.id.split('-')[2]);
      }, { passive: false });
      document.addEventListener('mousemove', this.throttle(this.handleDrag.bind(this), 16));
      document.addEventListener('touchmove', this.throttle(this.handleDrag.bind(this), 16), { passive: false });
      document.addEventListener('mouseup', this.endDrag.bind(this));
      document.addEventListener('touchend', this.endDrag.bind(this));
      this.elements.canvas.addEventListener('wheel', this.debounce(this.handleResize.bind(this), 50), { passive: false });
    }

    startDrag(e, layerId) {
      this.placementState.dragging = true;
      this.placementState.activeLayer = layerId;
      const rect = this.elements.canvas.getBoundingClientRect();
      this.placementState.lastX = e.clientX - rect.left;
      this.placementState.lastY = e.clientY - rect.top;
      this.elements.canvas.classList.add('dragging');
      this.showMessage('🎯 Drag to move design', 'info');
    }

    handleDrag(e) {
      if (!this.placementState.dragging) return;
      requestAnimationFrame(() => {
        const rect = this.elements.canvas.getBoundingClientRect();
        const currentX = e.clientX - rect.left;
        const currentY = e.clientY - rect.top;
        const deltaXPercent = ((currentX - this.placementState.lastX) / rect.width) * 100;
        const deltaYPercent = ((currentY - this.placementState.lastY) / rect.height) * 100;
        this.placementState.leftPct = Math.max(0, Math.min(90, this.placementState.leftPct + deltaXPercent));
        this.placementState.topPct = Math.max(0, Math.min(90, this.placementState.topPct + deltaYPercent));
        this.updatePlacementDisplay();
        this.updateDesignPosition();
        this.placementState.lastX = currentX;
        this.placementState.lastY = currentY;
      });
    }

    endDrag() {
      if (this.placementState.dragging) {
        this.placementState.dragging = false;
        this.elements.canvas.classList.remove('dragging');
        this.placementState.activeLayer = null;
      }
    }

    startPinch(e, layerId) {
      if (e.touches.length === 2) {
        this.placementState.pinching = true;
        this.placementState.activeLayer = layerId;
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        this.placementState.initialDistance = Math.sqrt(
          Math.pow(touch2.clientX - touch1.clientX, 2) +
          Math.pow(touch2.clientY - touch1.clientY, 2)
        );
        this.placementState.initialWidth = this.placementState.widthPct;
      }
    }

    handlePinch(e) {
      if (!this.placementState.pinching || e.touches.length !== 2) return;
      const touch1 = e.touches[0];
      const touch2 = e.touches[1];
      const currentDistance = Math.sqrt(
        Math.pow(touch2.clientX - touch1.clientX, 2) +
        Math.pow(touch2.clientY - touch1.clientY, 2)
      );
      const scale = currentDistance / this.placementState.initialDistance;
      this.placementState.widthPct = Math.max(10, Math.min(100, this.placementState.initialWidth * scale));
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.elements.sliders.width.value = this.placementState.widthPct;
    }

    endPinch() {
      if (this.placementState.pinching) {
        this.placementState.pinching = false;
        this.placementState.activeLayer = null;
      }
    }

    handleResize(e) {
      e.preventDefault();
      const delta = Math.sign(e.deltaY);
      this.placementState.widthPct = Math.max(10, Math.min(100, this.placementState.widthPct - delta * 5));
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.elements.sliders.width.value = this.placementState.widthPct;
      this.logInteraction('Resized via Scroll');
    }

    togglePlacementGuide() {
      const guide = document.getElementById(`nt-placement-guide-${this.sectionId}`);
      guide.style.display = guide.style.display === 'none' ? 'block' : 'none';
      this.logInteraction(`Placement Guide ${guide.style.display === 'block' ? 'Shown' : 'Hidden'}`);
    }

    updateMockupScale(scale) {
      this.placementState.scalePct = Math.max(50, Math.min(130, scale));
      this.elements.canvas.style.transform = `scale(${this.placementState.scalePct / 100})`;
      this.elements.canvas.style.transformOrigin = 'center center';
      this.elements.sliders.scale.value = this.placementState.scalePct;
      document.getElementById(`nt-mockup-scale-val-${this.sectionId}`).textContent = `${this.placementState.scalePct}%`;
      this.logInteraction(`Scaled to ${this.placementState.scalePct}%`);
    }

    removeDesign() {
      this.layerManager.layers = [];
      this.elements.overlaysContainer.innerHTML = '';
      this.placementState.hasUploadedDesign = false;
      this.elements.actions.remove.style.display = 'none';
      this.updateLayersUI();
      this.showMessage('🗑️ All designs removed', 'success');
      this.logInteraction('Design Removed');
    }

    showSizeChart() {
      if (this.currentSizeChart) return;
      const overlay = document.createElement('div');
      overlay.style.cssText = `
        position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px); z-index: 10000; display: flex; align-items: center;
        justify-content: center; opacity: 0; transition: opacity 0.3s ease;
      `;
      overlay.innerHTML = `
        <div style="background: white; border-radius: 20px; padding: 40px; max-width: 600px; width: 90vw; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3); transform: scale(0.8); transition: transform 0.3s ease;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
            <h2 style="margin: 0; font-size: 28px; font-weight: 700; color: var(--text-color);">📏 Size Chart</h2>
            <button id="close-size-chart-btn" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">×</button>
          </div>
          <div style="margin-bottom: 25px;">
            <h3 style="margin: 0 0 16px 0; font-size: 20px; font-weight: 600; color: var(--text-color);">T-Shirt Size Guide</h3>
            <div style="overflow-x: auto;">
              <table style="width: 100%; border-collapse: collapse; font-size: 14px;">
                <thead>
                  <tr style="background: #f8fafc;">
                    <th style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600;">Size</th>
                    <th style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600;">Chest (inches)</th>
                    <th style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600;">Length (inches)</th>
                    <th style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600;">Sleeve (inches)</th>
                  </tr>
                </thead>
                <tbody>
                  <tr><td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600; color: var(--primary-color);">XS</td><td style="padding: 12px; border: 1px solid #e2e8f0;">32-34</td><td style="padding: 12px; border: 1px solid #e2e8f0;">26</td><td style="padding: 12px; border: 1px solid #e2e8f0;">7.5</td></tr>
                  <tr style="background: #f8fafc;"><td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600; color: var(--primary-color);">S</td><td style="padding: 12px; border: 1px solid #e2e8f0;">34-36</td><td style="padding: 12px; border: 1px solid #e2e8f0;">27</td><td style="padding: 12px; border: 1px solid #e2e8f0;">8</td></tr>
                  <tr><td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600; color: var(--primary-color);">M</td><td style="padding: 12px; border: 1px solid #e2e8f0;">38-40</td><td style="padding: 12px; border: 1px solid #e2e8f0;">28</td><td style="padding: 12px; border: 1px solid #e2e8f0;">8.5</td></tr>
                  <tr style="background: #f8fafc;"><td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600; color: var(--primary-color);">L</td><td style="padding: 12px; border: 1px solid #e2e8f0;">42-44</td><td style="padding: 12px; border: 1px solid #e2e8f0;">29</td><td style="padding: 12px; border: 1px solid #e2e8f0;">9</td></tr>
                  <tr><td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600; color: var(--primary-color);">XL</td><td style="padding: 12px; border: 1px solid #e2e8f0;">46-48</td><td style="padding: 12px; border: 1px solid #e2e8f0;">30</td><td style="padding: 12px; border: 1px solid #e2e8f0;">9.5</td></tr>
                  <tr style="background: #f8fafc;"><td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: 600; color: var(--primary-color);">XXL</td><td style="padding: 12px; border: 1px solid #e2e8f0;">50-52</td><td style="padding: 12px; border: 1px solid #e2e8f0;">31</td><td style="padding: 12px; border: 1px solid #e2e8f0;">10</td></tr>
                </tbody>
              </table>
            </div>
          </div>
          <div style="background: linear-gradient(135deg, #f0fdfa, #ecfdf5); padding: 20px; border-radius: 12px; border: 1px solid #a7f3d0;">
            <div style="font-weight: 600; color: #065f46; margin-bottom: 8px;">💡 Sizing Tips</div>
            <div style="color: #047857; font-size: 14px; line-height: 1.6;">
              • Measure your chest at the fullest point<br>
              • Our t-shirts are designed for a relaxed fit<br>
              • If between sizes, we recommend sizing up<br>
              • All measurements are in inches and taken from the garment
            </div>
          </div>
        </div>
      `;
      document.body.appendChild(overlay);
      setTimeout(() => {
        overlay.style.opacity = '1';
        overlay.querySelector('div').style.transform = 'scale(1)';
      }, 100);
      const closeBtn = overlay.querySelector('#close-size-chart-btn');
      closeBtn.addEventListener('click', () => this.closeSizeChart(overlay));
      overlay.addEventListener('click', e => {
        if (e.target === overlay) this.closeSizeChart(overlay);
      });
      this.currentSizeChart = overlay;
      this.logInteraction('Size Chart Opened');
    }

    closeSizeChart(overlay) {
      if (overlay) {
        overlay.style.opacity = '0';
        overlay.querySelector('div').style.transform = 'scale(0.8)';
        setTimeout(() => {
          if (document.body.contains(overlay)) document.body.removeChild(overlay);
        }, 300);
        this.currentSizeChart = null;
        this.logInteraction('Size Chart Closed');
      }
    }

    showHelpModal() {
      const overlay = document.createElement('div');
      overlay.style.cssText = `
        position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px); z-index: 10000; display: flex; align-items: center;
        justify-content: center; opacity: 0; transition: opacity 0.3s ease;
      `;
      overlay.innerHTML = `
        <div style="background: white; border-radius: 20px; padding: 40px; max-width: 700px; width: 90vw; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
            <h2 style="margin: 0; font-size: 28px; font-weight: 700; color: var(--text-color);">📁 File Upload Help</h2>
            <button id="close-help-btn" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">×</button>
          </div>
          <div style="margin-bottom: 25px;">
            <h3 style="margin: 0 0 12px 0; font-size: 20px; font-weight: 600; color: var(--text-color);">✅ Accepted File