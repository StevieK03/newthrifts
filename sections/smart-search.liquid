<!-- Smart Search Section with Predictive Search and Filters -->
<div class="smart-search-container" id="smart-search-{{ section.id }}">
  <div class="search-overlay" id="search-overlay"></div>
  
  <!-- Search Input -->
  <div class="search-input-wrapper">
    <input 
      type="text" 
      id="smart-search-input" 
      class="smart-search-input"
      placeholder="Search products, brands, categories..."
      autocomplete="off"
      aria-label="Search products"
      aria-expanded="false"
      aria-haspopup="listbox"
    >
    <button class="search-clear-btn" id="search-clear" aria-label="Clear search">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>
    <div class="search-loading" id="search-loading">
      <div class="loading-spinner"></div>
    </div>
  </div>

  <!-- Search Results Container -->
  <div class="search-results-container" id="search-results" role="listbox" aria-label="Search results">
    
    <!-- Quick Suggestions -->
    <div class="search-section" id="search-suggestions">
      <h3 class="search-section-title">Popular Searches</h3>
      <div class="search-suggestions-list">
        <button class="suggestion-item" data-query="t-shirts">T-Shirts</button>
        <button class="suggestion-item" data-query="hoodies">Hoodies</button>
        <button class="suggestion-item" data-query="vintage">Vintage</button>
        <button class="suggestion-item" data-query="streetwear">Streetwear</button>
        <button class="suggestion-item" data-query="accessories">Accessories</button>
      </div>
    </div>

    <!-- Search Filters -->
    <div class="search-filters" id="search-filters">
      <h3 class="search-section-title">Filters</h3>
      
      <!-- Price Range -->
      <div class="filter-group">
        <label class="filter-label">Price Range</label>
        <div class="price-range-inputs">
          <input type="number" id="price-min" placeholder="Min" min="0" class="price-input">
          <span class="price-separator">-</span>
          <input type="number" id="price-max" placeholder="Max" min="0" class="price-input">
        </div>
      </div>

      <!-- Category Filter -->
      <div class="filter-group">
        <label class="filter-label">Category</label>
        <select id="category-filter" class="filter-select">
          <option value="">All Categories</option>
          {% for collection in collections %}
            {% unless collection.handle == 'frontpage' %}
              <option value="{{ collection.handle }}">{{ collection.title }}</option>
            {% endunless %}
          {% endfor %}
        </select>
      </div>

      <!-- Availability Filter -->
      <div class="filter-group">
        <label class="filter-checkbox">
          <input type="checkbox" id="in-stock-only" class="filter-checkbox-input">
          <span class="filter-checkbox-label">In Stock Only</span>
        </label>
      </div>

      <!-- Sort Options -->
      <div class="filter-group">
        <label class="filter-label">Sort By</label>
        <select id="sort-filter" class="filter-select">
          <option value="relevance">Relevance</option>
          <option value="price-low-high">Price: Low to High</option>
          <option value="price-high-low">Price: High to Low</option>
          <option value="newest">Newest First</option>
          <option value="best-selling">Best Selling</option>
        </select>
      </div>
    </div>

    <!-- Search Results -->
    <div class="search-results-list" id="search-results-list">
      <!-- Results will be populated by JavaScript -->
    </div>

    <!-- No Results -->
    <div class="no-results" id="no-results" style="display: none;">
      <div class="no-results-icon">üîç</div>
      <h3>No products found</h3>
      <p>Try adjusting your search or filters</p>
    </div>
  </div>
</div>

<style>
  .smart-search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
    z-index: 1000;
  }

  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 999;
  }

  .search-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .smart-search-input {
    width: 100%;
    padding: 16px 50px 16px 20px;
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    font-size: 16px;
    background: white;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .smart-search-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .search-clear-btn {
    position: absolute;
    right: 16px;
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    opacity: 0;
    transition: all 0.2s ease;
  }

  .search-clear-btn.visible {
    opacity: 1;
  }

  .search-clear-btn:hover {
    background: #f3f4f6;
    color: #374151;
  }

  .search-loading {
    position: absolute;
    right: 16px;
    display: none;
  }

  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid #e5e7eb;
    border-top: 2px solid var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .search-results-container {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    max-height: 80vh;
    overflow-y: auto;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1001;
    margin-top: 8px;
  }

  .search-results-container.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .search-section {
    padding: 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .search-section:last-child {
    border-bottom: none;
  }

  .search-section-title {
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin: 0 0 12px 0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .search-suggestions-list {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .suggestion-item {
    padding: 6px 12px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 20px;
    font-size: 14px;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .suggestion-item:hover {
    background: var(--color-accent);
    color: white;
    border-color: var(--color-accent);
  }

  .search-filters {
    padding: 20px;
    background: #f9fafb;
    border-bottom: 1px solid #e5e7eb;
  }

  .filter-group {
    margin-bottom: 16px;
  }

  .filter-group:last-child {
    margin-bottom: 0;
  }

  .filter-label {
    display: block;
    font-size: 14px;
    font-weight: 500;
    color: #374151;
    margin-bottom: 6px;
  }

  .price-range-inputs {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .price-input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
  }

  .price-separator {
    color: #6b7280;
    font-weight: 500;
  }

  .filter-select {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background: white;
  }

  .filter-checkbox {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .filter-checkbox-input {
    margin-right: 8px;
  }

  .filter-checkbox-label {
    font-size: 14px;
    color: #374151;
  }

  .search-results-list {
    padding: 20px;
  }

  .search-result-item {
    display: flex;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    transition: background 0.2s ease;
    cursor: pointer;
    text-decoration: none;
    color: inherit;
  }

  .search-result-item:hover {
    background: #f9fafb;
  }

  .search-result-image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 6px;
    margin-right: 12px;
  }

  .search-result-info {
    flex: 1;
  }

  .search-result-title {
    font-size: 16px;
    font-weight: 500;
    color: #111827;
    margin: 0 0 4px 0;
  }

  .search-result-price {
    font-size: 14px;
    color: #dc2626;
    font-weight: 600;
  }

  .search-result-category {
    font-size: 12px;
    color: #6b7280;
    margin-top: 2px;
  }

  .no-results {
    text-align: center;
    padding: 40px 20px;
    color: #6b7280;
  }

  .no-results-icon {
    font-size: 48px;
    margin-bottom: 16px;
  }

  .no-results h3 {
    margin: 0 0 8px 0;
    color: #374151;
  }

  .no-results p {
    margin: 0;
    font-size: 14px;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .smart-search-container {
      max-width: 100%;
      margin: 0 16px;
    }

    .search-results-container {
      max-height: 70vh;
    }

    .search-section {
      padding: 16px;
    }

    .search-filters {
      padding: 16px;
    }

    .price-range-inputs {
      flex-direction: column;
      align-items: stretch;
    }

    .price-separator {
      text-align: center;
      margin: 4px 0;
    }

    .suggestion-item {
      font-size: 12px;
      padding: 4px 8px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('smart-search-input');
  const searchResults = document.getElementById('search-results');
  const searchOverlay = document.getElementById('search-overlay');
  const searchClear = document.getElementById('search-clear');
  const searchLoading = document.getElementById('search-loading');
  const searchResultsList = document.getElementById('search-results-list');
  const noResults = document.getElementById('no-results');
  
  let searchTimeout;
  let currentQuery = '';
  
  // Show/hide search results
  function showResults() {
    searchResults.classList.add('active');
    searchOverlay.classList.add('active');
    searchInput.setAttribute('aria-expanded', 'true');
  }
  
  function hideResults() {
    searchResults.classList.remove('active');
    searchOverlay.classList.remove('active');
    searchInput.setAttribute('aria-expanded', 'false');
  }
  
  // Show/hide clear button
  function updateClearButton() {
    if (searchInput.value.length > 0) {
      searchClear.classList.add('visible');
    } else {
      searchClear.classList.remove('visible');
    }
  }
  
  // Show/hide loading spinner
  function showLoading() {
    searchLoading.style.display = 'block';
  }
  
  function hideLoading() {
    searchLoading.style.display = 'none';
  }
  
  // Perform search
  async function performSearch(query, filters = {}) {
    if (!query.trim()) {
      searchResultsList.innerHTML = '';
      noResults.style.display = 'none';
      return;
    }
    
    showLoading();
    
    try {
      // Build search URL with filters
      let searchUrl = `/search?q=${encodeURIComponent(query)}&view=json`;
      
      if (filters.collection) {
        searchUrl += `&collection=${filters.collection}`;
      }
      
      if (filters.priceMin) {
        searchUrl += `&price_min=${filters.priceMin * 100}`; // Shopify uses cents
      }
      
      if (filters.priceMax) {
        searchUrl += `&price_max=${filters.priceMax * 100}`;
      }
      
      if (filters.available) {
        searchUrl += `&available=true`;
      }
      
      if (filters.sort) {
        searchUrl += `&sort_by=${filters.sort}`;
      }
      
      const response = await fetch(searchUrl);
      const data = await response.json();
      
      displayResults(data.results || []);
      
    } catch (error) {
      console.error('Search error:', error);
      searchResultsList.innerHTML = '<div class="search-error">Search temporarily unavailable</div>';
    } finally {
      hideLoading();
    }
  }
  
  // Display search results
  function displayResults(results) {
    if (results.length === 0) {
      searchResultsList.innerHTML = '';
      noResults.style.display = 'block';
      return;
    }
    
    noResults.style.display = 'none';
    
    const resultsHTML = results.map(product => `
      <a href="${product.url}" class="search-result-item" data-product-id="${product.id}">
        <img src="${product.featured_image}" alt="${product.title}" class="search-result-image" loading="lazy">
        <div class="search-result-info">
          <h4 class="search-result-title">${product.title}</h4>
          <div class="search-result-price">${product.price_formatted}</div>
          <div class="search-result-category">${product.product_type}</div>
        </div>
      </a>
    `).join('');
    
    searchResultsList.innerHTML = resultsHTML;
  }
  
  // Get current filters
  function getCurrentFilters() {
    return {
      collection: document.getElementById('category-filter')?.value || '',
      priceMin: parseFloat(document.getElementById('price-min')?.value) || null,
      priceMax: parseFloat(document.getElementById('price-max')?.value) || null,
      available: document.getElementById('in-stock-only')?.checked || false,
      sort: document.getElementById('sort-filter')?.value || 'relevance'
    };
  }
  
  // Event listeners
  searchInput.addEventListener('focus', showResults);
  searchInput.addEventListener('input', function() {
    const query = this.value;
    currentQuery = query;
    updateClearButton();
    
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      if (currentQuery === query) {
        performSearch(query, getCurrentFilters());
      }
    }, 300);
  });
  
  searchClear.addEventListener('click', function() {
    searchInput.value = '';
    currentQuery = '';
    updateClearButton();
    searchResultsList.innerHTML = '';
    noResults.style.display = 'none';
    searchInput.focus();
  });
  
  searchOverlay.addEventListener('click', hideResults);
  
  // Suggestion clicks
  document.querySelectorAll('.suggestion-item').forEach(item => {
    item.addEventListener('click', function() {
      const query = this.dataset.query;
      searchInput.value = query;
      currentQuery = query;
      updateClearButton();
      performSearch(query, getCurrentFilters());
    });
  });
  
  // Filter changes
  ['category-filter', 'price-min', 'price-max', 'in-stock-only', 'sort-filter'].forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener('change', function() {
        if (currentQuery) {
          performSearch(currentQuery, getCurrentFilters());
        }
      });
    }
  });
  
  // Keyboard navigation
  searchInput.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      hideResults();
    }
  });
  
  // Close on outside click
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.smart-search-container')) {
      hideResults();
    }
  });
});
</script>

{% schema %}
{
  "name": "Smart Search",
  "settings": [
    {
      "type": "text",
      "id": "placeholder_text",
      "label": "Search placeholder text",
      "default": "Search products, brands, categories..."
    },
    {
      "type": "checkbox",
      "id": "show_suggestions",
      "label": "Show popular search suggestions",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "label": "Show search filters",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Smart Search"
    }
  ]
}
{% endschema %}
