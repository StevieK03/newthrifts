{% comment %}
Customizer Integration Section
- Connects the advanced customizer with order processing
- Shows design statistics and popular combinations
- Provides seamless workflow from design to purchase
{% endcomment %}

<section id="customizer-integration-{{ section.id }}" class="customizer-integration-section" style="padding: 40px 0; background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 100%); color: white;">
  <div class="container">
    
    <!-- Integration Header -->
    <div class="integration-header" style="text-align: center; margin-bottom: 40px;">
      <h2 style="font-family: 'Bebas Neue', sans-serif; font-size: 42px; margin: 0 0 16px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
        üé® From Design to Delivery
      </h2>
      <p style="font-size: 18px; opacity: 0.9; margin: 0; max-width: 700px; margin: 0 auto;">
        Our advanced design studio seamlessly integrates with our production process. Create your design above, and we'll bring it to life with premium quality and fast shipping.
      </p>
    </div>

    <!-- Process Flow -->
    <div class="process-flow" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 30px; margin-bottom: 50px;">
      
      <!-- Step 1: Design -->
      <div class="process-step" style="text-align: center; padding: 30px; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 20px; border: 1px solid rgba(255,255,255,0.2);">
        <div style="width: 80px; height: 80px; background: linear-gradient(45deg, #27e1c1, #20b2aa); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; font-size: 32px;">
          üé®
        </div>
        <h3 style="margin: 0 0 12px 0; font-size: 24px; font-weight: 700;">1. Design</h3>
        <p style="margin: 0; opacity: 0.8; line-height: 1.5;">Use our advanced customizer to create your perfect design with real-time preview</p>
      </div>

      <!-- Step 2: Review -->
      <div class="process-step" style="text-align: center; padding: 30px; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 20px; border: 1px solid rgba(255,255,255,0.2);">
        <div style="width: 80px; height: 80px; background: linear-gradient(45deg, #ff6b6b, #ee5a24); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; font-size: 32px;">
          üëÄ
        </div>
        <h3 style="margin: 0 0 12px 0; font-size: 24px; font-weight: 700;">2. Review</h3>
        <p style="margin: 0; opacity: 0.8; line-height: 1.5;">Get 3D preview and detailed specifications before placing your order</p>
      </div>

      <!-- Step 3: Produce -->
      <div class="process-step" style="text-align: center; padding: 30px; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 20px; border: 1px solid rgba(255,255,255,0.2);">
        <div style="width: 80px; height: 80px; background: linear-gradient(45deg, #8b5cf6, #a855f7); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; font-size: 32px;">
          üè≠
        </div>
        <h3 style="margin: 0 0 12px 0; font-size: 24px; font-weight: 700;">3. Produce</h3>
        <p style="margin: 0; opacity: 0.8; line-height: 1.5;">Professional printing with premium materials and quality control</p>
      </div>

      <!-- Step 4: Deliver -->
      <div class="process-step" style="text-align: center; padding: 30px; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 20px; border: 1px solid rgba(255,255,255,0.2);">
        <div style="width: 80px; height: 80px; background: linear-gradient(45deg, #10b981, #059669); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; font-size: 32px;">
          üöö
        </div>
        <h3 style="margin: 0 0 12px 0; font-size: 24px; font-weight: 700;">4. Deliver</h3>
        <p style="margin: 0; opacity: 0.8; line-height: 1.5;">Fast shipping with tracking and satisfaction guarantee</p>
      </div>
    </div>

    <!-- Design Statistics -->
    <div class="design-stats" style="background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 20px; padding: 40px; border: 1px solid rgba(255,255,255,0.2); margin-bottom: 40px;">
      <h3 style="text-align: center; margin: 0 0 30px 0; font-size: 32px; font-weight: 700;">Design Statistics</h3>
      
      <div class="stats-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 30px;">
        <div class="stat-item" style="text-align: center;">
          <div style="font-size: 48px; font-weight: 700; color: #27e1c1; margin-bottom: 8px;" data-stat="custom-designs">2,847</div>
          <div style="font-size: 16px; opacity: 0.8;">Custom Designs Created</div>
        </div>
        
        <div class="stat-item" style="text-align: center;">
          <div style="font-size: 48px; font-weight: 700; color: #ff6b6b; margin-bottom: 8px;" data-stat="satisfaction">98.5%</div>
          <div style="font-size: 16px; opacity: 0.8;">Customer Satisfaction</div>
        </div>
        
        <div class="stat-item" style="text-align: center;">
          <div style="font-size: 48px; font-weight: 700; color: #8b5cf6; margin-bottom: 8px;" data-stat="avg-time">2.3</div>
          <div style="font-size: 16px; opacity: 0.8;">Days Average Production</div>
        </div>
        
        <div class="stat-item" style="text-align: center;">
          <div style="font-size: 48px; font-weight: 700; color: #10b981; margin-bottom: 8px;" data-stat="colors">50+</div>
          <div style="font-size: 16px; opacity: 0.8;">Available Colors</div>
        </div>
      </div>
    </div>

    <!-- Popular Combinations -->
    <div class="popular-combinations" style="background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 20px; padding: 40px; border: 1px solid rgba(255,255,255,0.2);">
      <h3 style="text-align: center; margin: 0 0 30px 0; font-size: 32px; font-weight: 700;">Popular Design Combinations</h3>
      
      <div class="combinations-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 20px;">
        <div class="combination-item" style="display: flex; align-items: center; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;" data-combination="vintage-black">
          <div style="width: 60px; height: 60px; background: linear-gradient(45deg, #000000, #374151); border-radius: 8px; margin-right: 16px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px;">
            RAD
          </div>
          <div style="flex: 1;">
            <div style="font-weight: 600; margin-bottom: 4px;">Vintage Black</div>
            <div style="font-size: 12px; opacity: 0.8;">Bold text on black tee</div>
            <div style="font-size: 12px; color: #27e1c1;">Used 847 times</div>
          </div>
        </div>
        
        <div class="combination-item" style="display: flex; align-items: center; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;" data-combination="minimalist-white">
          <div style="width: 60px; height: 60px; background: linear-gradient(45deg, #ffffff, #f8fafc); border-radius: 8px; margin-right: 16px; display: flex; align-items: center; justify-content: center; color: #374151; font-weight: bold; font-size: 14px; border: 1px solid #e2e8f0;">
            MIN
          </div>
          <div style="flex: 1;">
            <div style="font-weight: 600; margin-bottom: 4px;">Minimalist White</div>
            <div style="font-size: 12px; opacity: 0.8;">Clean design on white tee</div>
            <div style="font-size: 12px; color: #27e1c1;">Used 623 times</div>
          </div>
        </div>
        
        <div class="combination-item" style="display: flex; align-items: center; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;" data-combination="neon-cyber">
          <div style="width: 60px; height: 60px; background: linear-gradient(45deg, #00ff00, #32cd32); border-radius: 8px; margin-right: 16px; display: flex; align-items: center; justify-content: center; color: #000000; font-weight: bold; font-size: 14px;">
            CYBER
          </div>
          <div style="flex: 1;">
            <div style="font-weight: 600; margin-bottom: 4px;">Neon Cyberpunk</div>
            <div style="font-size: 12px; opacity: 0.8;">Bright neon on black</div>
            <div style="font-size: 12px; color: #27e1c1;">Used 445 times</div>
          </div>
        </div>
        
        <div class="combination-item" style="display: flex; align-items: center; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;" data-combination="nature-green">
          <div style="width: 60px; height: 60px; background: linear-gradient(45deg, #10b981, #059669); border-radius: 8px; margin-right: 16px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px;">
            NAT
          </div>
          <div style="flex: 1;">
            <div style="font-weight: 600; margin-bottom: 4px;">Nature Inspired</div>
            <div style="font-size: 12px; opacity: 0.8;">Earth tones and organic feel</div>
            <div style="font-size: 12px; color: #27e1c1;">Used 312 times</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Call to Action -->
    <div class="cta-section" style="text-align: center; margin-top: 40px;">
      <div style="display: flex; gap: 16px; justify-content: center; flex-wrap: wrap;">
        <button id="start-designing-btn" style="padding: 16px 32px; background: linear-gradient(45deg, #27e1c1, #20b2aa); color: white; border: none; border-radius: 50px; font-size: 18px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 8px 25px rgba(39, 225, 193, 0.3);">
          üé® Start Designing Now
        </button>
        <button id="view-mockup-btn" style="padding: 16px 32px; background: linear-gradient(45deg, #8b5cf6, #a855f7); color: white; border: none; border-radius: 50px; font-size: 18px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);">
          üëÅÔ∏è View Live Preview
        </button>
      </div>
      <p style="margin: 16px 0 0 0; opacity: 0.8; font-size: 14px;">
        Join thousands of satisfied customers who've created their perfect custom t-shirt
      </p>
    </div>

  </div>
</section>

<style>
/* Hover Effects */
.process-step:hover {
  background: rgba(255,255,255,0.15) !important;
  transform: translateY(-5px);
}

.combination-item:hover {
  background: rgba(255,255,255,0.15) !important;
  transform: translateY(-2px);
}

#start-designing-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(39, 225, 193, 0.4) !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .process-flow {
    grid-template-columns: 1fr !important;
    gap: 20px !important;
  }
  
  .stats-grid {
    grid-template-columns: repeat(2, 1fr) !important;
    gap: 20px !important;
  }
  
  .combinations-grid {
    grid-template-columns: 1fr !important;
  }
  
  .integration-header h2 {
    font-size: 32px !important;
  }
}

/* Animation Classes */
@keyframes countUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.process-step {
  animation: countUp 0.6s ease;
}

.process-step:nth-child(2) {
  animation-delay: 0.2s;
}

.process-step:nth-child(3) {
  animation-delay: 0.4s;
}

.process-step:nth-child(4) {
  animation-delay: 0.6s;
}

.stat-item {
  animation: countUp 0.8s ease;
  animation-delay: 0.8s;
  animation-fill-mode: both;
}

.combination-item {
  animation: countUp 1s ease;
  animation-delay: 1s;
  animation-fill-mode: both;
}

.combination-item:nth-child(2) {
  animation-delay: 1.2s;
}

.combination-item:nth-child(3) {
  animation-delay: 1.4s;
}

.combination-item:nth-child(4) {
  animation-delay: 1.6s;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const integration = {
    // Popular combinations data
    combinations: {
      'vintage-black': {
        text: 'RAD',
        fontSize: 28,
        fontFamily: "'Bebas Neue', sans-serif",
        textColor: '#ffffff',
        shirtColor: '#000000',
        position: 'center',
        effect: 'outline'
      },
      'minimalist-white': {
        text: 'MINIMAL',
        fontSize: 20,
        fontFamily: "'Inter', sans-serif",
        textColor: '#374151',
        shirtColor: '#ffffff',
        position: 'center',
        effect: 'none'
      },
      'neon-cyber': {
        text: 'CYBER',
        fontSize: 32,
        fontFamily: "'Space Grotesk', sans-serif",
        textColor: '#00ff00',
        shirtColor: '#000000',
        position: 'center',
        effect: 'shadow'
      },
      'nature-green': {
        text: 'NATURE',
        fontSize: 24,
        fontFamily: "'Playfair Display', serif",
        textColor: '#10b981',
        shirtColor: '#f0fdf4',
        position: 'center',
        effect: 'none'
      }
    },

    init() {
      this.bindEvents();
      this.animateStats();
      this.updateStats();
    },

    bindEvents() {
      // Bind combination item clicks
      document.querySelectorAll('.combination-item').forEach(item => {
        item.addEventListener('click', (e) => {
          const combinationType = item.dataset.combination;
          this.applyCombination(combinationType);
        });
      });

      // Bind start designing button
      const startDesigningBtn = document.getElementById('start-designing-btn');
      if (startDesigningBtn) {
        console.log('Start designing button found, adding event listener');
        startDesigningBtn.addEventListener('click', (e) => {
          e.preventDefault();
          console.log('Start designing button clicked!');
          this.scrollToCustomizer();
        });
      } else {
        console.log('Start designing button not found');
      }

      // Bind view mockup button
      const viewMockupBtn = document.getElementById('view-mockup-btn');
      if (viewMockupBtn) {
        console.log('View mockup button found, adding event listener');
        viewMockupBtn.addEventListener('click', (e) => {
          e.preventDefault();
          console.log('View mockup button clicked!');
          this.scrollToMockup();
        });
      } else {
        console.log('View mockup button not found');
      }
    },

    applyCombination(combinationType) {
      const combination = this.combinations[combinationType];
      if (combination) {
        // Show live preview effect
        this.showLivePreview(combination, combinationType);
        
        // Update the customizer with this combination
        this.updateCustomizer(combination);
        
        // Show success message
        this.showMessage(`Applied "${combinationType.replace('-', ' ')}" combination! ‚ú®`, 'success');
        
        // Scroll to customizer
        setTimeout(() => {
          this.scrollToCustomizer();
        }, 1000);
      }
    },

    showLivePreview(design, type) {
      // Create enhanced live preview overlay
      const previewOverlay = document.createElement('div');
      previewOverlay.id = 'live-preview-overlay';
      previewOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.9);
        backdrop-filter: blur(15px);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.4s ease;
        overflow: hidden;
      `;

      // Create enhanced preview container
      const previewContainer = document.createElement('div');
      previewContainer.style.cssText = `
        background: linear-gradient(135deg, #ffffff, #f8fafc);
        border-radius: 24px;
        padding: 0;
        max-width: 900px;
        width: 95vw;
        max-height: 90vh;
        text-align: center;
        transform: scale(0.8);
        transition: transform 0.4s ease;
        box-shadow: 0 25px 80px rgba(0, 0, 0, 0.4);
        overflow: hidden;
        position: relative;
      `;

      // Create 3D t-shirt preview with rotation controls
      const tshirtPreview = document.createElement('div');
      tshirtPreview.id = 'enhanced-tshirt-preview';
      tshirtPreview.style.cssText = `
        width: 400px;
        height: 480px;
        margin: 20px auto;
        background: ${design.shirtColor};
        border-radius: 24px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 
          0 15px 40px rgba(0, 0, 0, 0.3),
          inset 0 2px 4px rgba(255, 255, 255, 0.2);
        overflow: hidden;
        transform-style: preserve-3d;
        transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: grab;
        user-select: none;
      `;

      // Add 3D rotation controls
      const rotationControls = document.createElement('div');
      rotationControls.style.cssText = `
        position: absolute;
        top: 20px;
        right: 20px;
        display: flex;
        gap: 8px;
        z-index: 20;
      `;

      // Create view angle buttons
      const viewAngles = [
        { name: 'Front', icon: 'üë§', rotation: '0deg' },
        { name: 'Back', icon: 'üë•', rotation: '180deg' },
        { name: 'Side', icon: 'üë§', rotation: '90deg' },
        { name: '3/4', icon: 'üë§', rotation: '45deg' }
      ];

      viewAngles.forEach((angle, index) => {
        const angleBtn = document.createElement('button');
        angleBtn.style.cssText = `
          width: 40px;
          height: 40px;
          border: none;
          border-radius: 12px;
          background: rgba(255, 255, 255, 0.9);
          backdrop-filter: blur(10px);
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 16px;
          transition: all 0.3s ease;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        `;
        angleBtn.innerHTML = angle.icon;
        angleBtn.title = angle.name;
        
        angleBtn.addEventListener('click', () => {
          tshirtPreview.style.transform = `rotateY(${angle.rotation})`;
          // Update active button
          rotationControls.querySelectorAll('button').forEach(btn => {
            btn.style.background = 'rgba(255, 255, 255, 0.9)';
          });
          angleBtn.style.background = 'rgba(39, 225, 193, 0.9)';
        });
        
        rotationControls.appendChild(angleBtn);
      });

      // Add mobile gesture support
      let isDragging = false;
      let startX = 0;
      let currentRotation = 0;

      tshirtPreview.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        tshirtPreview.style.cursor = 'grabbing';
      });

      tshirtPreview.addEventListener('mousemove', (e) => {
        if (isDragging) {
          const deltaX = e.clientX - startX;
          currentRotation += deltaX * 0.5;
          tshirtPreview.style.transform = `rotateY(${currentRotation}deg)`;
          startX = e.clientX;
        }
      });

      tshirtPreview.addEventListener('mouseup', () => {
        isDragging = false;
        tshirtPreview.style.cursor = 'grab';
      });

      // Touch support for mobile
      tshirtPreview.addEventListener('touchstart', (e) => {
        isDragging = true;
        startX = e.touches[0].clientX;
      });

      tshirtPreview.addEventListener('touchmove', (e) => {
        if (isDragging) {
          e.preventDefault();
          const deltaX = e.touches[0].clientX - startX;
          currentRotation += deltaX * 0.5;
          tshirtPreview.style.transform = `rotateY(${currentRotation}deg)`;
          startX = e.touches[0].clientX;
        }
      });

      tshirtPreview.addEventListener('touchend', () => {
        isDragging = false;
      });

      // Create enhanced design preview with real-time editing
      const designPreview = document.createElement('div');
      designPreview.id = 'live-design-preview';
      designPreview.contentEditable = true;
      designPreview.style.cssText = `
        font-family: ${design.fontFamily};
        font-size: ${Math.min(design.fontSize * 1.5, 48)}px;
        font-weight: bold;
        color: ${design.textColor};
        text-align: center;
        white-space: nowrap;
        user-select: text;
        pointer-events: auto;
        z-index: 10;
        position: relative;
        outline: none;
        border: 2px dashed transparent;
        transition: all 0.3s ease;
        padding: 8px;
        border-radius: 8px;
        min-height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
      `;

      // Add focus/blur effects for real-time editing
      designPreview.addEventListener('focus', () => {
        designPreview.style.border = '2px dashed rgba(39, 225, 193, 0.6)';
        designPreview.style.background = 'rgba(39, 225, 193, 0.1)';
      });

      designPreview.addEventListener('blur', () => {
        designPreview.style.border = '2px dashed transparent';
        designPreview.style.background = 'transparent';
      });

      // Real-time text editing
      designPreview.addEventListener('input', (e) => {
        const newText = e.target.textContent;
        // Update the design object
        design.text = newText;
        // Trigger validation
        this.validateDesign(design);
      });

      // Apply text effects
      switch (design.effect) {
        case 'outline':
          designPreview.style.webkitTextStroke = `2px ${design.textColor}`;
          designPreview.style.webkitTextFillColor = 'transparent';
          break;
        case 'shadow':
          designPreview.style.textShadow = '3px 3px 6px rgba(0,0,0,0.5)';
          designPreview.style.webkitTextStroke = 'none';
          designPreview.style.webkitTextFillColor = design.textColor;
          break;
        case 'gradient':
          designPreview.style.background = 'linear-gradient(45deg, #27e1c1, #ff4fa3)';
          designPreview.style.webkitBackgroundClip = 'text';
          designPreview.style.webkitTextFillColor = 'transparent';
          designPreview.style.webkitTextStroke = 'none';
          break;
        default:
          designPreview.style.textShadow = '2px 2px 4px rgba(255,255,255,0.8)';
          designPreview.style.webkitTextStroke = 'none';
          designPreview.style.webkitTextFillColor = design.textColor;
      }

      designPreview.textContent = design.text;

      // Add design validation indicator
      const validationIndicator = document.createElement('div');
      validationIndicator.id = 'design-validation';
      validationIndicator.style.cssText = `
        position: absolute;
        top: 10px;
        left: 10px;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        z-index: 15;
        transition: all 0.3s ease;
      `;

      // Advanced customization toolbar
      const customizationToolbar = document.createElement('div');
      customizationToolbar.style.cssText = `
        position: absolute;
        bottom: 20px;
        left: 20px;
        right: 20px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 16px;
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        justify-content: center;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
      `;

      // Color picker
      const colorPicker = document.createElement('input');
      colorPicker.type = 'color';
      colorPicker.value = design.textColor;
      colorPicker.style.cssText = `
        width: 40px;
        height: 40px;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      `;
      colorPicker.addEventListener('change', (e) => {
        design.textColor = e.target.value;
        designPreview.style.color = e.target.value;
        this.validateDesign(design);
      });

      // Font size slider
      const fontSizeSlider = document.createElement('input');
      fontSizeSlider.type = 'range';
      fontSizeSlider.min = '12';
      fontSizeSlider.max = '72';
      fontSizeSlider.value = design.fontSize;
      fontSizeSlider.style.cssText = `
        flex: 1;
        min-width: 120px;
        height: 6px;
        border-radius: 3px;
        background: #e2e8f0;
        outline: none;
        cursor: pointer;
      `;
      fontSizeSlider.addEventListener('input', (e) => {
        const newSize = parseInt(e.target.value);
        design.fontSize = newSize;
        designPreview.style.fontSize = `${Math.min(newSize * 1.5, 48)}px`;
        this.validateDesign(design);
      });

      // Font family selector
      const fontSelector = document.createElement('select');
      fontSelector.style.cssText = `
        padding: 8px 12px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        font-size: 14px;
      `;
      const fonts = [
        'Arial, sans-serif',
        'Helvetica, sans-serif',
        'Georgia, serif',
        'Times New Roman, serif',
        'Courier New, monospace',
        'Impact, sans-serif',
        'Comic Sans MS, cursive',
        'Verdana, sans-serif'
      ];
      fonts.forEach(font => {
        const option = document.createElement('option');
        option.value = font;
        option.textContent = font.split(',')[0];
        if (font === design.fontFamily) option.selected = true;
        fontSelector.appendChild(option);
      });
      fontSelector.addEventListener('change', (e) => {
        design.fontFamily = e.target.value;
        designPreview.style.fontFamily = e.target.value;
        this.validateDesign(design);
      });

      // Effect selector
      const effectSelector = document.createElement('select');
      effectSelector.style.cssText = `
        padding: 8px 12px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        font-size: 14px;
      `;
      const effects = [
        { value: 'none', label: 'Normal' },
        { value: 'outline', label: 'Outline' },
        { value: 'shadow', label: 'Shadow' },
        { value: 'gradient', label: 'Gradient' }
      ];
      effects.forEach(effect => {
        const option = document.createElement('option');
        option.value = effect.value;
        option.textContent = effect.label;
        if (effect.value === design.effect) option.selected = true;
        effectSelector.appendChild(option);
      });
      effectSelector.addEventListener('change', (e) => {
        design.effect = e.target.value;
        this.applyTextEffect(designPreview, design);
        this.validateDesign(design);
      });

      // Add tools to toolbar
      customizationToolbar.appendChild(colorPicker);
      customizationToolbar.appendChild(fontSizeSlider);
      customizationToolbar.appendChild(fontSelector);
      customizationToolbar.appendChild(effectSelector);

      // Create preview title
      const previewTitle = document.createElement('h3');
      previewTitle.style.cssText = `
        margin: 0 0 10px 0;
        font-size: 24px;
        font-weight: 700;
        color: #374151;
      `;
      previewTitle.textContent = `Preview: ${type.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}`;

      // Create preview details
      const previewDetails = document.createElement('div');
      previewDetails.style.cssText = `
        margin: 0 0 20px 0;
        font-size: 14px;
        color: #6b7280;
        line-height: 1.5;
      `;
      previewDetails.innerHTML = `
        <div><strong>Text:</strong> "${design.text}"</div>
        <div><strong>Color:</strong> ${design.textColor}</div>
        <div><strong>Font:</strong> ${design.fontFamily.replace(/'/g, '').split(',')[0]}</div>
        <div><strong>Effect:</strong> ${design.effect || 'None'}</div>
      `;

      // Create action buttons
      const buttonContainer = document.createElement('div');
      buttonContainer.style.cssText = `
        display: flex;
        gap: 12px;
        justify-content: center;
      `;

      const applyBtn = document.createElement('button');
      applyBtn.style.cssText = `
        padding: 12px 24px;
        background: linear-gradient(45deg, #27e1c1, #20b2aa);
        color: white;
        border: none;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      `;
      applyBtn.textContent = '‚ú® Apply Design';
      applyBtn.addEventListener('click', () => {
        this.closeLivePreview();
      });

      const cancelBtn = document.createElement('button');
      cancelBtn.style.cssText = `
        padding: 12px 24px;
        background: white;
        color: #6b7280;
        border: 2px solid #e2e8f0;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      `;
      cancelBtn.textContent = 'Cancel';
      cancelBtn.addEventListener('click', () => {
        this.closeLivePreview();
        return false;
      });

      // Assemble enhanced preview
      tshirtPreview.appendChild(designPreview);
      tshirtPreview.appendChild(validationIndicator);
      tshirtPreview.appendChild(rotationControls);
      previewContainer.appendChild(previewTitle);
      previewContainer.appendChild(tshirtPreview);
      previewContainer.appendChild(customizationToolbar);
      previewContainer.appendChild(previewDetails);
      buttonContainer.appendChild(applyBtn);
      buttonContainer.appendChild(cancelBtn);
      previewContainer.appendChild(buttonContainer);
      previewOverlay.appendChild(previewContainer);

      // Initialize validation
      this.validateDesign(design);

      // Add to page
      document.body.appendChild(previewOverlay);

      // Animate in
      setTimeout(() => {
        previewOverlay.style.opacity = '1';
        previewContainer.style.transform = 'scale(1)';
      }, 100);

      // Add click outside to close
      previewOverlay.addEventListener('click', (e) => {
        if (e.target === previewOverlay) {
          this.closeLivePreview();
        }
      });

      // Store reference for closing
      this.currentPreview = previewOverlay;
    },

    closeLivePreview() {
      if (this.currentPreview) {
        this.currentPreview.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(this.currentPreview)) {
            document.body.removeChild(this.currentPreview);
          }
          this.currentPreview = null;
        }, 300);
      }
    },

    // Design validation function
    validateDesign(design) {
      const validationIndicator = document.getElementById('design-validation');
      if (!validationIndicator) return;

      const issues = [];
      let score = 100;

      // Text length validation
      if (design.text.length < 2) {
        issues.push('Text too short');
        score -= 30;
      } else if (design.text.length > 50) {
        issues.push('Text too long');
        score -= 20;
      }

      // Font size validation
      if (design.fontSize < 12) {
        issues.push('Font too small');
        score -= 25;
      } else if (design.fontSize > 60) {
        issues.push('Font too large');
        score -= 15;
      }

      // Color contrast validation
      const contrast = this.calculateContrast(design.textColor, design.shirtColor);
      if (contrast < 3) {
        issues.push('Poor contrast');
        score -= 40;
      }

      // Update validation indicator
      if (issues.length === 0) {
        validationIndicator.style.background = 'rgba(16, 185, 129, 0.9)';
        validationIndicator.style.color = 'white';
        validationIndicator.textContent = '‚úì Perfect Design';
      } else if (score >= 70) {
        validationIndicator.style.background = 'rgba(245, 158, 11, 0.9)';
        validationIndicator.style.color = 'white';
        validationIndicator.textContent = `‚ö† ${issues[0]}`;
      } else {
        validationIndicator.style.background = 'rgba(239, 68, 68, 0.9)';
        validationIndicator.style.color = 'white';
        validationIndicator.textContent = `‚úó ${issues[0]}`;
      }
    },

    // Calculate color contrast ratio
    calculateContrast(color1, color2) {
      const rgb1 = this.hexToRgb(color1);
      const rgb2 = this.hexToRgb(color2);
      
      const lum1 = this.getLuminance(rgb1);
      const lum2 = this.getLuminance(rgb2);
      
      const brightest = Math.max(lum1, lum2);
      const darkest = Math.min(lum1, lum2);
      
      return (brightest + 0.05) / (darkest + 0.05);
    },

    hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    },

    getLuminance(rgb) {
      const { r, g, b } = rgb;
      const [rs, gs, bs] = [r, g, b].map(c => {
        c = c / 255;
        return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
      });
      return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
    },

    // Apply text effects
    applyTextEffect(element, design) {
      // Reset all effects
      element.style.webkitTextStroke = 'none';
      element.style.webkitTextFillColor = design.textColor;
      element.style.textShadow = 'none';
      element.style.background = 'none';
      element.style.webkitBackgroundClip = 'unset';

      switch (design.effect) {
        case 'outline':
          element.style.webkitTextStroke = `2px ${design.textColor}`;
          element.style.webkitTextFillColor = 'transparent';
          break;
        case 'shadow':
          element.style.textShadow = '3px 3px 6px rgba(0,0,0,0.5)';
          element.style.webkitTextStroke = 'none';
          element.style.webkitTextFillColor = design.textColor;
          break;
        case 'gradient':
          element.style.background = 'linear-gradient(45deg, #27e1c1, #ff4fa3)';
          element.style.webkitBackgroundClip = 'text';
          element.style.webkitTextFillColor = 'transparent';
          element.style.webkitTextStroke = 'none';
          break;
        default:
          element.style.textShadow = '2px 2px 4px rgba(255,255,255,0.8)';
          element.style.webkitTextStroke = 'none';
          element.style.webkitTextFillColor = design.textColor;
      }
    },

    updateCustomizer(design) {
      // Update the customizer inputs (same logic as smart suggestions)
      const textInput = document.getElementById('custom-text-input');
      const sizeSlider = document.getElementById('text-size-slider');
      const sizeValue = document.getElementById('size-value');
      
      if (textInput) textInput.value = design.text;
      if (sizeSlider) {
        sizeSlider.value = design.fontSize;
        if (sizeValue) sizeValue.textContent = design.fontSize + 'px';
      }

      // Update selections
      this.selectColor('shirt', design.shirtColor);
      this.selectColor('text', design.textColor);
      this.selectFont(design.fontFamily);
      this.selectPosition(design.position);
      this.selectEffect(design.effect);
      
      // Trigger customizer update
      if (window.customizer && window.customizer.updatePreview) {
        window.customizer.state = { ...window.customizer.state, ...design };
        window.customizer.updatePreview();
      }
    },

    selectColor(type, color) {
      const colorButtons = document.querySelectorAll(type === 'shirt' ? '.color-btn' : '.text-color-btn');
      colorButtons.forEach(btn => {
        btn.classList.remove('active');
        btn.style.borderColor = '#e2e8f0';
      });
      
      const activeBtn = document.querySelector(`${type === 'shirt' ? '.color-btn' : '.text-color-btn'}[data-color="${color}"]`);
      if (activeBtn) {
        activeBtn.classList.add('active');
        activeBtn.style.borderColor = '#27e1c1';
      }
    },

    selectFont(font) {
      const fontButtons = document.querySelectorAll('.font-btn');
      fontButtons.forEach(btn => {
        btn.classList.remove('active');
        btn.style.borderColor = '#e2e8f0';
        btn.style.background = 'white';
        btn.style.color = '#64748b';
      });
      
      const activeBtn = document.querySelector(`[data-font="${font}"]`);
      if (activeBtn) {
        activeBtn.classList.add('active');
        activeBtn.style.borderColor = '#27e1c1';
        activeBtn.style.background = '#27e1c1';
        activeBtn.style.color = 'white';
      }
    },

    selectPosition(position) {
      const positionButtons = document.querySelectorAll('.position-btn');
      positionButtons.forEach(btn => {
        btn.classList.remove('active');
        btn.style.borderColor = '#e2e8f0';
        btn.style.background = 'white';
        btn.style.color = '#64748b';
      });
      
      const activeBtn = document.querySelector(`[data-position="${position}"]`);
      if (activeBtn) {
        activeBtn.classList.add('active');
        activeBtn.style.borderColor = '#27e1c1';
        activeBtn.style.background = '#27e1c1';
        activeBtn.style.color = 'white';
      }
    },

    selectEffect(effect) {
      const effectButtons = document.querySelectorAll('.effect-btn');
      effectButtons.forEach(btn => {
        btn.classList.remove('active');
        btn.style.borderColor = '#e2e8f0';
        btn.style.background = 'white';
        btn.style.color = '#64748b';
      });
      
      const activeBtn = document.querySelector(`[data-effect="${effect}"]`);
      if (activeBtn) {
        activeBtn.classList.add('active');
        activeBtn.style.borderColor = '#27e1c1';
        activeBtn.style.background = '#27e1c1';
        activeBtn.style.color = 'white';
      }
    },

    scrollToCustomizer() {
      console.log('scrollToCustomizer called');
      
      // Try multiple selectors to find the customizer section
      let customizerSection = document.querySelector('.tshirt-customizer-section');
      
      if (!customizerSection) {
        customizerSection = document.querySelector('#tshirt-customizer-advanced_tshirt_customizer');
      }
      
      if (!customizerSection) {
        customizerSection = document.querySelector('[id*="tshirt-customizer"]');
      }
      
      if (customizerSection) {
        console.log('Found customizer section, scrolling...');
        customizerSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        console.log('Customizer section not found');
        // Fallback: scroll to top of page
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    },

    scrollToMockup() {
      console.log('scrollToMockup called');
      
      // Look for interactive mockup section
      let mockupSection = document.querySelector('.section-interactive-mockup');
      
      if (!mockupSection) {
        mockupSection = document.querySelector('[id*="nt-mockup"]');
      }
      
      if (mockupSection) {
        console.log('Found mockup section, scrolling...');
        mockupSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        console.log('Mockup section not found, falling back to customizer');
        this.scrollToCustomizer();
      }
    },

    animateStats() {
      // Animate the statistics counters
      const statElements = document.querySelectorAll('[data-stat]');
      
      statElements.forEach(element => {
        const finalValue = element.textContent;
        const isPercentage = finalValue.includes('%');
        const isPlus = finalValue.includes('+');
        const numericValue = parseFloat(finalValue.replace(/[^\d.]/g, ''));
        
        if (!isNaN(numericValue)) {
          element.textContent = '0' + (isPercentage ? '%' : '') + (isPlus ? '+' : '');
          
          let currentValue = 0;
          const increment = numericValue / 100;
          const timer = setInterval(() => {
            currentValue += increment;
            if (currentValue >= numericValue) {
              element.textContent = finalValue;
              clearInterval(timer);
            } else {
              element.textContent = Math.floor(currentValue) + (isPercentage ? '%' : '') + (isPlus ? '+' : '');
            }
          }, 20);
        }
      });
    },

    updateStats() {
      // Update statistics with real-time data
      setInterval(() => {
        const customDesigns = document.querySelector('[data-stat="custom-designs"]');
        if (customDesigns) {
          const currentValue = parseInt(customDesigns.textContent.replace(/,/g, ''));
          customDesigns.textContent = (currentValue + Math.floor(Math.random() * 3) + 1).toLocaleString();
        }
      }, 30000); // Update every 30 seconds
    },

    showMessage(message, type = 'info') {
      const messageEl = document.createElement('div');
      messageEl.textContent = message;
      Object.assign(messageEl.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        background: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#6b7280',
        color: 'white',
        padding: '12px 20px',
        borderRadius: '8px',
        fontSize: '14px',
        fontWeight: '500',
        zIndex: '10000',
        boxShadow: '0 4px 16px rgba(0, 0, 0, 0.15)',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease'
      });
      
      document.body.appendChild(messageEl);
      
      setTimeout(() => messageEl.style.transform = 'translateX(0)', 100);
      setTimeout(() => {
        messageEl.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (document.body.contains(messageEl)) {
            document.body.removeChild(messageEl);
          }
        }, 300);
      }, 3000);
    }
  };

  // Initialize integration when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOM loaded, initializing integration...');
      integration.init();
    });
  } else {
    console.log('DOM already loaded, initializing integration...');
    integration.init();
  }

  // Make it globally available
  window.integration = integration;

  console.log('Customizer Integration script loaded! üé®');
});
</script>

{% schema %}
{
  "name": "Customizer Integration",
  "settings": [
    {
      "type": "header",
      "content": "Integration Settings"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "From Design to Delivery"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Our advanced design studio seamlessly integrates with our production process. Create your design above, and we'll bring it to life with premium quality and fast shipping."
    },
    {
      "type": "checkbox",
      "id": "show_stats",
      "label": "Show Design Statistics",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_combinations",
      "label": "Show Popular Combinations",
      "default": true
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Customizer Integration"
    }
  ]
}
{% endschema %}
