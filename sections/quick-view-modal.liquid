<!-- Quick View Modal -->
<div class="quick-view-modal" id="quick-view-modal" role="dialog" aria-labelledby="quick-view-title" aria-hidden="true">
  <div class="quick-view-overlay" id="quick-view-overlay"></div>
  
  <div class="quick-view-container">
    <div class="quick-view-header">
      <h2 id="quick-view-title" class="quick-view-title">Quick View</h2>
      <button class="quick-view-close" id="quick-view-close" aria-label="Close quick view">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
    </div>
    
    <div class="quick-view-content" id="quick-view-content">
      <div class="quick-view-loading">
        <div class="loading-spinner-large"></div>
        <p>Loading product...</p>
      </div>
    </div>
  </div>
</div>

<style>
  /* ===== AMAZING QUICKVIEW MODAL ===== */
  .quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    padding: 20px;
  }

  .quick-view-modal.active {
    opacity: 1;
    visibility: visible;
  }

  .quick-view-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(15, 23, 42, 0.9) 100%);
    backdrop-filter: blur(20px) saturate(180%);
    -webkit-backdrop-filter: blur(20px) saturate(180%);
    animation: fadeIn 0.4s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .quick-view-container {
    position: relative;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.98) 100%);
    backdrop-filter: blur(40px) saturate(200%);
    -webkit-backdrop-filter: blur(40px) saturate(200%);
    border-radius: 24px;
    max-width: 90vw;
    max-height: 90vh;
    width: 1100px;
    overflow: hidden;
    box-shadow: 
      0 32px 64px rgba(0, 0, 0, 0.2),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 0 0 1px rgba(255, 255, 255, 0.5);
    transform: scale(0.9) translateY(20px);
    transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    animation: modalSlideIn 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  @keyframes modalSlideIn {
    from {
      transform: scale(0.8) translateY(40px);
      opacity: 0;
    }
    to {
      transform: scale(1) translateY(0);
      opacity: 1;
    }
  }

  .quick-view-modal.active .quick-view-container {
    transform: scale(1) translateY(0);
  }

  .quick-view-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 24px 32px;
    border-bottom: 1px solid rgba(226, 232, 240, 0.8);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.8) 0%, rgba(249, 250, 251, 0.9) 100%);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    position: relative;
  }

  .quick-view-header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.3), transparent);
  }

  .quick-view-title {
    margin: 0;
    font-size: 20px;
    font-weight: 700;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    letter-spacing: -0.02em;
  }

  .quick-view-close {
    background: rgba(239, 246, 255, 0.8);
    border: 1px solid rgba(59, 130, 246, 0.2);
    color: #3b82f6;
    cursor: pointer;
    padding: 10px;
    border-radius: 12px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
  }

  .quick-view-close:hover {
    background: rgba(59, 130, 246, 0.1);
    border-color: rgba(59, 130, 246, 0.4);
    transform: rotate(90deg) scale(1.1);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
  }

  .quick-view-close:active {
    transform: rotate(90deg) scale(0.95);
  }

  .quick-view-content {
    padding: 0;
    max-height: calc(90vh - 92px);
    overflow-y: auto;
    scroll-behavior: smooth;
  }

  /* Custom Scrollbar */
  .quick-view-content::-webkit-scrollbar {
    width: 8px;
  }

  .quick-view-content::-webkit-scrollbar-track {
    background: rgba(241, 245, 249, 0.5);
    border-radius: 10px;
  }

  .quick-view-content::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border-radius: 10px;
    transition: background 0.3s ease;
  }

  .quick-view-content::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #2563eb, #7c3aed);
  }

  .quick-view-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 80px 20px;
    color: #64748b;
    min-height: 400px;
  }

  .loading-spinner-large {
    width: 56px;
    height: 56px;
    border: 4px solid rgba(226, 232, 240, 0.3);
    border-top: 4px solid #3b82f6;
    border-right: 4px solid #8b5cf6;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    margin-bottom: 20px;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .quick-view-loading p {
    font-size: 16px;
    font-weight: 500;
    color: #64748b;
    margin: 0;
  }

  .quick-view-product {
    display: grid;
    grid-template-columns: 1.1fr 1fr;
    gap: 0;
    min-height: 550px;
  }

  .quick-view-images {
    position: relative;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    overflow: hidden;
  }

  .quick-view-images::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at top right, rgba(59, 130, 246, 0.1), transparent 50%),
                radial-gradient(circle at bottom left, rgba(139, 92, 246, 0.1), transparent 50%);
    pointer-events: none;
    z-index: 1;
  }

  .quick-view-main-image {
    width: 100%;
    height: 550px;
    object-fit: cover;
    position: relative;
    z-index: 2;
    transition: transform 0.3s ease;
  }

  .quick-view-main-image:hover {
    transform: scale(1.02);
  }

  .quick-view-thumbnails {
    position: absolute;
    bottom: 20px;
    left: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding: 12px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px) saturate(180%);
    -webkit-backdrop-filter: blur(20px) saturate(180%);
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1), inset 0 0 0 1px rgba(255, 255, 255, 0.8);
    z-index: 3;
  }

  .quick-view-thumbnails::-webkit-scrollbar {
    height: 4px;
  }

  .quick-view-thumbnails::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, #3b82f6, #8b5cf6);
    border-radius: 10px;
  }

  .quick-view-thumbnail {
    width: 70px;
    height: 70px;
    object-fit: cover;
    border-radius: 12px;
    cursor: pointer;
    border: 3px solid transparent;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    flex-shrink: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .quick-view-thumbnail:hover {
    border-color: rgba(59, 130, 246, 0.5);
    transform: translateY(-4px) scale(1.05);
    box-shadow: 0 8px 16px rgba(59, 130, 246, 0.2);
  }

  .quick-view-thumbnail.active {
    border-color: #3b82f6;
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
  }

  .quick-view-info {
    padding: 40px;
    display: flex;
    flex-direction: column;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(249, 250, 251, 0.95) 100%);
  }

  .quick-view-product-title {
    font-size: 28px;
    font-weight: 700;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 0 0 16px 0;
    line-height: 1.2;
    letter-spacing: -0.02em;
  }

  .quick-view-product-price {
    font-size: 32px;
    font-weight: 800;
    background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 0 0 20px 0;
    letter-spacing: -0.01em;
  }

  .quick-view-product-description {
    color: #64748b;
    line-height: 1.7;
    margin: 0 0 24px 0;
    flex: 1;
    font-size: 15px;
  }

  .quick-view-variants {
    margin: 0 0 28px 0;
  }

  .variant-group {
    margin-bottom: 20px;
  }

  .variant-label {
    display: block;
    font-size: 15px;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 12px;
    letter-spacing: -0.01em;
  }

  .variant-options {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .variant-option {
    padding: 12px 20px;
    border: 2px solid rgba(226, 232, 240, 0.8);
    border-radius: 12px;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(248, 250, 252, 0.9));
    color: #475569;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 14px;
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }

  .variant-option::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease;
  }

  .variant-option:hover::before {
    left: 100%;
  }

  .variant-option:hover {
    border-color: rgba(59, 130, 246, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(59, 130, 246, 0.2);
  }

  .variant-option.selected {
    border-color: #3b82f6;
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
    transform: translateY(-2px);
  }

  .variant-option.unavailable {
    opacity: 0.4;
    cursor: not-allowed;
    text-decoration: line-through;
    background: rgba(241, 245, 249, 0.5);
  }

  .variant-option.unavailable:hover {
    transform: none;
    box-shadow: none;
  }

  .quick-view-actions {
    display: flex;
    gap: 12px;
    margin-top: auto;
    padding-top: 24px;
  }

  .quick-add-to-cart {
    flex: 1;
    padding: 18px 28px;
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    border: none;
    border-radius: 14px;
    font-size: 17px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    box-shadow: 0 8px 24px rgba(59, 130, 246, 0.3);
    position: relative;
    overflow: hidden;
  }

  .quick-add-to-cart::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .quick-add-to-cart:hover::before {
    left: 100%;
  }

  .quick-add-to-cart:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 12px 32px rgba(59, 130, 246, 0.4);
  }

  .quick-add-to-cart:active {
    transform: translateY(0) scale(0.98);
  }

  .quick-add-to-cart:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
    background: linear-gradient(135deg, #94a3b8, #64748b);
    box-shadow: none;
  }

  .quick-add-to-cart:disabled:hover {
    transform: none;
    box-shadow: none;
  }

  .quick-view-full-details {
    padding: 18px 24px;
    background: rgba(239, 246, 255, 0.8);
    border: 2px solid rgba(59, 130, 246, 0.3);
    color: #3b82f6;
    border-radius: 14px;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
  }

  .quick-view-full-details:hover {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    border-color: #3b82f6;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(59, 130, 246, 0.3);
  }

  .quick-view-full-details:active {
    transform: translateY(0);
  }

  .quick-view-badge {
    position: absolute;
    top: 20px;
    left: 20px;
    background: linear-gradient(135deg, #dc2626, #ef4444);
    color: white;
    padding: 8px 16px;
    border-radius: 12px;
    font-size: 13px;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.4);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    z-index: 10;
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: badgePulse 2s ease-in-out infinite;
  }

  @keyframes badgePulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  .quick-view-badge.sale {
    background: linear-gradient(135deg, #dc2626, #ef4444);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.4);
  }

  .quick-view-badge.new {
    background: linear-gradient(135deg, #059669, #10b981);
    box-shadow: 0 4px 12px rgba(5, 150, 105, 0.4);
  }

  .quick-view-badge.sold-out {
    background: linear-gradient(135deg, #6b7280, #9ca3af);
    box-shadow: 0 4px 12px rgba(107, 114, 128, 0.4);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .quick-view-container {
      max-width: 95vw;
      max-height: 95vh;
      margin: 16px;
    }

    .quick-view-product {
      grid-template-columns: 1fr;
    }

    .quick-view-images {
      order: 1;
    }

    .quick-view-info {
      order: 2;
      padding: 24px 20px;
    }

    .quick-view-main-image {
      height: 350px;
      object-fit: cover;
      object-position: center top;
    }

    .quick-view-product-title {
      font-size: 20px;
    }

    .quick-view-product-price {
      font-size: 18px;
    }

    .quick-view-actions {
      flex-direction: column;
    }

    .quick-view-full-details {
      order: 2;
    }

    .quick-view-thumbnails {
      position: static;
      margin-top: 16px;
      background: white;
      border: 1px solid #e5e7eb;
    }
  }

  @media (max-width: 480px) {
    .quick-view-header {
      padding: 16px 20px;
    }

    .quick-view-info {
      padding: 20px 16px;
    }

    .variant-options {
      gap: 6px;
    }

    .variant-option {
      padding: 6px 12px;
      font-size: 13px;
    }
  }
  
  /* Homepage-style Swatch Styling */
  .quick-view-variants .swatch-list {
    display: flex !important;
    flex-wrap: wrap !important;
    justify-content: center !important;
    gap: 8px !important;
    margin: 12px 0 !important;
  }

  .quick-view-variants .swatch {
    --size: 44px;
    position: relative;
    background: transparent;
    border: 2px solid transparent !important;
    border-radius: 20px !important;
    padding: 4px 12px 4px 4px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: inline-flex;
    align-items: center;
    gap: 8px;
    outline: none;
  }

  .quick-view-variants .swatch:hover {
    transform: scale(1.1);
    border-color: rgba(102, 102, 102, 0.6) !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .quick-view-variants .swatch.is-selected {
    border-color: #000 !important;
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .quick-view-variants .swatch.unavailable {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .quick-view-variants .swatch.unavailable:hover {
    transform: none;
    box-shadow: none;
    border-color: transparent !important;
  }

  .quick-view-variants .swatch__chip {
    width: var(--size);
    height: var(--size);
    border-radius: 9999px;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    display: inline-block;
    border: 1px solid #d1d5db;
    flex-shrink: 0;
  }

  .quick-view-variants .swatch__label {
    font-size: 13px;
    font-weight: 500;
    color: #374151;
    white-space: nowrap;
  }
  
  /* Feature icons styling to match product page */
  .feature-icon {
    color: #10b981;
    font-weight: bold;
    margin-right: 8px;
  }
  
  /* Collapsible Sections Styling */
  .quick-view-info-sections {
    margin: 24px 0;
  }
  
  .info-section {
    margin-bottom: 14px;
  }
  
  .info-section-toggle {
    width: 100%;
    padding: 16px 20px;
    background: linear-gradient(135deg, rgba(249, 250, 251, 0.95), rgba(241, 245, 249, 0.95));
    border: 1px solid rgba(226, 232, 240, 0.8);
    border-radius: 12px;
    text-align: left;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  }
  
  .info-section-toggle:hover {
    background: linear-gradient(135deg, rgba(239, 246, 255, 0.95), rgba(224, 242, 254, 0.95));
    border-color: rgba(59, 130, 246, 0.3);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
  }
  
  .section-title {
    font-weight: 600;
    color: #1e293b;
    font-size: 15px;
    letter-spacing: -0.01em;
  }
  
  .toggle-icon {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 14px;
    color: #3b82f6;
    font-weight: 700;
  }
  
  .section-content {
    padding: 20px;
    background: linear-gradient(135deg, rgba(249, 250, 251, 0.6), rgba(241, 245, 249, 0.6));
    border-radius: 0 0 12px 12px;
    border: 1px solid rgba(226, 232, 240, 0.6);
    border-top: none;
    color: #64748b;
    line-height: 1.7;
    display: none;
    margin-bottom: 14px;
    animation: slideDown 0.3s ease;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .section-content ul {
    margin: 0;
    padding-left: 24px;
  }
  
  .section-content li {
    margin-bottom: 8px;
    position: relative;
  }

  .section-content li::marker {
    color: #3b82f6;
  }
  
  /* Mobile Responsive for Dropdowns */
  @media (max-width: 768px) {
    .quick-view-info-sections {
      margin: 16px 0;
    }
    
    .info-section-toggle {
      padding: 10px 12px;
      font-size: 14px;
    }
    
    .section-title {
      font-size: 13px;
    }
    
    .section-content {
      padding: 12px;
      font-size: 13px;
    }
  }

  /* ===== DARK MODE SUPPORT ===== */
  [data-theme="dark"] .quick-view-overlay {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(15, 23, 42, 0.98) 100%);
  }

  [data-theme="dark"] .quick-view-container {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.98) 0%, rgba(30, 41, 59, 0.98) 100%);
    box-shadow: 
      0 32px 64px rgba(0, 0, 0, 0.5),
      0 0 0 1px rgba(96, 165, 250, 0.2),
      inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }

  [data-theme="dark"] .quick-view-header {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
    border-bottom: 1px solid rgba(71, 85, 105, 0.5);
  }

  [data-theme="dark"] .quick-view-header::after {
    background: linear-gradient(90deg, transparent, rgba(96, 165, 250, 0.4), transparent);
  }

  [data-theme="dark"] .quick-view-title {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  [data-theme="dark"] .quick-view-close {
    background: rgba(30, 41, 59, 0.8);
    border-color: rgba(96, 165, 250, 0.3);
    color: #60a5fa;
  }

  [data-theme="dark"] .quick-view-close:hover {
    background: rgba(59, 130, 246, 0.2);
    border-color: rgba(96, 165, 250, 0.5);
  }

  [data-theme="dark"] .quick-view-content::-webkit-scrollbar-track {
    background: rgba(15, 23, 42, 0.5);
  }

  [data-theme="dark"] .quick-view-images {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
  }

  [data-theme="dark"] .quick-view-images::before {
    background: radial-gradient(circle at top right, rgba(96, 165, 250, 0.15), transparent 50%),
                radial-gradient(circle at bottom left, rgba(139, 92, 246, 0.15), transparent 50%);
  }

  [data-theme="dark"] .quick-view-thumbnails {
    background: rgba(30, 41, 59, 0.95);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3), inset 0 0 0 1px rgba(96, 165, 250, 0.2);
  }

  [data-theme="dark"] .quick-view-thumbnail {
    border-color: rgba(71, 85, 105, 0.5);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  [data-theme="dark"] .quick-view-thumbnail:hover {
    border-color: rgba(96, 165, 250, 0.6);
    box-shadow: 0 8px 16px rgba(96, 165, 250, 0.3);
  }

  [data-theme="dark"] .quick-view-thumbnail.active {
    border-color: #60a5fa;
    box-shadow: 0 4px 12px rgba(96, 165, 250, 0.5);
  }

  [data-theme="dark"] .quick-view-info {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
  }

  [data-theme="dark"] .quick-view-product-title {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  [data-theme="dark"] .quick-view-product-price {
    background: linear-gradient(135deg, #f87171 0%, #fb923c 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  [data-theme="dark"] .quick-view-product-description {
    color: #cbd5e1;
  }

  [data-theme="dark"] .variant-label {
    color: #f1f5f9;
  }

  [data-theme="dark"] .variant-option {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.9), rgba(51, 65, 85, 0.9));
    border-color: rgba(71, 85, 105, 0.8);
    color: #e2e8f0;
  }

  [data-theme="dark"] .variant-option:hover {
    border-color: rgba(96, 165, 250, 0.6);
    box-shadow: 0 6px 16px rgba(96, 165, 250, 0.3);
  }

  [data-theme="dark"] .variant-option.selected {
    background: linear-gradient(135deg, #60a5fa, #3b82f6);
    border-color: #60a5fa;
    box-shadow: 0 8px 20px rgba(96, 165, 250, 0.5);
  }

  [data-theme="dark"] .variant-option.unavailable {
    background: rgba(51, 65, 85, 0.5);
    border-color: rgba(71, 85, 105, 0.3);
  }

  [data-theme="dark"] .quick-add-to-cart {
    background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
    box-shadow: 0 8px 24px rgba(96, 165, 250, 0.4);
  }

  [data-theme="dark"] .quick-add-to-cart:hover {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    box-shadow: 0 12px 32px rgba(96, 165, 250, 0.5);
  }

  [data-theme="dark"] .quick-add-to-cart:disabled {
    background: linear-gradient(135deg, #475569, #334155);
  }

  [data-theme="dark"] .quick-view-full-details {
    background: rgba(30, 41, 59, 0.8);
    border-color: rgba(96, 165, 250, 0.4);
    color: #60a5fa;
  }

  [data-theme="dark"] .quick-view-full-details:hover {
    background: linear-gradient(135deg, #60a5fa, #3b82f6);
    border-color: #60a5fa;
    color: white;
  }

  [data-theme="dark"] .info-section-toggle {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(51, 65, 85, 0.95));
    border-color: rgba(71, 85, 105, 0.8);
  }

  [data-theme="dark"] .info-section-toggle:hover {
    background: linear-gradient(135deg, rgba(51, 65, 85, 0.95), rgba(71, 85, 105, 0.95));
    border-color: rgba(96, 165, 250, 0.4);
    box-shadow: 0 4px 12px rgba(96, 165, 250, 0.15);
  }

  [data-theme="dark"] .section-title {
    color: #f1f5f9;
  }

  [data-theme="dark"] .toggle-icon {
    color: #60a5fa;
  }

  [data-theme="dark"] .section-content {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.6), rgba(51, 65, 85, 0.6));
    border-color: rgba(71, 85, 105, 0.6);
    color: #cbd5e1;
  }

  [data-theme="dark"] .section-content li::marker {
    color: #60a5fa;
  }

  [data-theme="dark"] .quick-view-loading {
    color: #cbd5e1;
  }

  [data-theme="dark"] .loading-spinner-large {
    border-color: rgba(71, 85, 105, 0.3);
    border-top-color: #60a5fa;
    border-right-color: #a78bfa;
    box-shadow: 0 4px 12px rgba(96, 165, 250, 0.3);
  }

  [data-theme="dark"] .feature-icon {
    color: #34d399;
  }

  /* Dark mode swatch styling */
  [data-theme="dark"] .quick-view-variants .swatch {
    border-color: rgba(71, 85, 105, 0.5) !important;
  }

  [data-theme="dark"] .quick-view-variants .swatch:hover {
    border-color: rgba(96, 165, 250, 0.6) !important;
    box-shadow: 0 4px 12px rgba(96, 165, 250, 0.3);
  }

  [data-theme="dark"] .quick-view-variants .swatch.is-selected {
    border-color: #60a5fa !important;
    box-shadow: 0 2px 8px rgba(96, 165, 250, 0.4);
  }

  [data-theme="dark"] .quick-view-variants .swatch__chip {
    border-color: rgba(71, 85, 105, 0.8);
  }

  [data-theme="dark"] .quick-view-variants .swatch__label {
    color: #e2e8f0;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('quick-view-modal');
  const overlay = document.getElementById('quick-view-overlay');
  const closeBtn = document.getElementById('quick-view-close');
  const content = document.getElementById('quick-view-content');
  const title = document.getElementById('quick-view-title');
  
  let currentProductData = null;
  
  // Open quick view
  window.openQuickView = function(productHandle) {
    showModal();
    loadProduct(productHandle);
  };
  
  // Show modal
  function showModal() {
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
    modal.setAttribute('aria-hidden', 'false');
    
    // Focus management
    setTimeout(() => {
      closeBtn.focus();
    }, 100);
  }
  
  // Hide modal
  function hideModal() {
    modal.classList.remove('active');
    document.body.style.overflow = '';
    modal.setAttribute('aria-hidden', 'true');
    currentProductData = null;
  }
  
  // Load product data
  async function loadProduct(productHandle) {
    try {
      showLoading();
      
      const response = await fetch(`/products/${productHandle}.js`);
      const product = await response.json();
      
      currentProductData = product;
      renderProduct(product);
      
    } catch (error) {
      console.error('Error loading product:', error);
      showError();
    }
  }
  
  // Show loading state
  function showLoading() {
    content.innerHTML = `
      <div class="quick-view-loading">
        <div class="loading-spinner-large"></div>
        <p>Loading product...</p>
      </div>
    `;
  }
  
  // Show error state
  function showError() {
    content.innerHTML = `
      <div class="quick-view-loading">
        <p>Error loading product. Please try again.</p>
      </div>
    `;
  }
  
  // Parse product description like the product page does
  function parseProductDescription(description) {
    if (!description) return { main: '', features: '', care: '' };
    
    // Extract main description (before "Product features")
    const mainParts = description.split('Product features');
    const mainDescription = mainParts[0].split('Care instructions')[0].split('Size Chart')[0].split('Size chart')[0].split('SIZE CHART')[0].split('Sizing Chart')[0].split('Sizing chart')[0].trim();
    
    // Extract features section
    const featuresSection = description.split('Product features')[1];
    let features = '';
    if (featuresSection) {
      const featuresText = featuresSection.split('Care instructions')[0];
      if (featuresText) {
        const featuresLines = featuresText.split('\n');
        const featuresList = featuresLines
          .map(line => {
            const cleanLine = line.trim();
            if (cleanLine && cleanLine.includes('-')) {
              const featureText = cleanLine.replace(/^-/, '').trim();
              return featureText ? `<li><span class="feature-icon">✓</span>${featureText}</li>` : '';
            }
            return '';
          })
          .filter(item => item)
          .join('');
        features = featuresList ? `<ul>${featuresList}</ul>` : '';
      }
    }
    
    // Extract care instructions
    const careSection = description.split('Care instructions')[1];
    let care = '';
    if (careSection) {
      const careLines = careSection.split('\n');
      const careList = careLines
        .map(line => {
          const cleanLine = line.trim();
          if (cleanLine && cleanLine.includes('-')) {
            const careText = cleanLine.replace(/^-/, '').trim();
            return careText ? `<li>${careText}</li>` : '';
          }
          return '';
        })
        .filter(item => item)
        .join('');
      care = careList ? `<ul>${careList}</ul>` : '';
    }
    
    return { main: mainDescription, features, care };
  }

  // Parse product title to shorten it like homepage
  function shortenProductTitle(fullTitle) {
    if (!fullTitle) return '';
    
    // Handle specific long product names
    if (fullTitle.includes('Boo-tiful Ghost Toddler Long Sleeve Tee')) {
      return 'Boo-tiful Ghost Toddler Tee';
    }
    if (fullTitle.includes('Baby T-Shirt Cutest Pumpkin')) {
      return 'Cutest Pumpkin Baby Tee';
    }
    if (fullTitle.includes('Butterfly Floral Boxy Tee')) {
      return 'Butterfly Floral Boxy Tee';
    }
    if (fullTitle.includes('Miami Nights Boxy Tee for Women')) {
      return 'Miami Nights Boxy Tee';
    }
    if (fullTitle.includes('BABY T-SHIRT')) {
      return fullTitle.replace('BABY T-SHIRT', 'BABY TEE');
    }
    if (fullTitle.includes('TODDLER LONG SLEEVE TEE')) {
      return fullTitle.replace('TODDLER LONG SLEEVE TEE, HALLOWEEN SHIRT, CUTE KIDS TEE, SPOOKY SEASON APPAREL, TODDLER HALLOWEEN CLOTHING', 'TODDLER TEE');
    }
    if (fullTitle.includes('HALLOWEEN')) {
      return fullTitle.split('HALLOWEEN')[0] + 'HALLOWEEN';
    }
    
    return fullTitle;
  }

  // Render product
  function renderProduct(product) {
    // Keep header as "Quick View" instead of product title
    title.textContent = 'Quick View';
    
    const firstVariant = product.variants[0];
    const hasMultipleImages = product.images.length > 1;
    
    // Parse product description like the product page
    const { main: mainDescription, features: featuresHTML, care: careHTML } = parseProductDescription(product.description);
    
    // Generate thumbnails HTML
    const thumbnailsHTML = hasMultipleImages ? `
      <div class="quick-view-thumbnails">
        ${product.images.map((image, index) => `
          <img src="${image}" alt="${product.title}" class="quick-view-thumbnail ${index === 0 ? 'active' : ''}" data-index="${index}">
        `).join('')}
      </div>
    ` : '';
    
    // Generate variants HTML
    const variantsHTML = generateVariantsHTML(product);
    
    // Generate badges
    const badgesHTML = generateBadgesHTML(product, firstVariant);
    
    content.innerHTML = `
      <div class="quick-view-product">
        <div class="quick-view-images">
          ${badgesHTML}
          <img src="${product.images[0]}" alt="${product.title}" class="quick-view-main-image" id="quick-view-main-image">
          ${thumbnailsHTML}
        </div>
        
        <div class="quick-view-info">
          <h3 class="quick-view-product-title">${shortenProductTitle(product.title)}</h3>
          <div class="quick-view-product-price" id="quick-view-price">
            ${formatPrice(firstVariant.price)}
          </div>
          
          <!-- Collapsible Product Information Sections -->
          <div class="quick-view-info-sections">
            ${mainDescription ? `
            <div class="info-section">
              <button class="info-section-toggle">
                <span class="section-title">Product Description</span>
                <span class="toggle-icon">▼</span>
              </button>
              <div class="section-content">
                ${mainDescription}
              </div>
            </div>
            ` : ''}
            
            ${featuresHTML ? `
            <div class="info-section">
              <button class="info-section-toggle">
                <span class="section-title">Product Features</span>
                <span class="toggle-icon">▼</span>
              </button>
              <div class="section-content">
                ${featuresHTML}
              </div>
            </div>
            ` : ''}

            ${careHTML ? `
            <div class="info-section">
              <button class="info-section-toggle">
                <span class="section-title">Care Instructions</span>
                <span class="toggle-icon">▼</span>
              </button>
              <div class="section-content">
                ${careHTML}
              </div>
            </div>
            ` : ''}

            <div class="info-section">
              <button class="info-section-toggle">
                <span class="section-title">Size Chart</span>
                <span class="toggle-icon">▼</span>
              </button>
              <div class="section-content">
                <p>Please refer to our size chart for accurate measurements.</p>
              </div>
            </div>
          </div>
          
          ${variantsHTML}
          
          <div class="quick-view-actions">
            <button class="quick-add-to-cart" id="quick-add-to-cart" ${!firstVariant.available ? 'disabled' : ''}>
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.5 5.1 16.5H17M17 13V17C17 17.6 16.6 18 16 18H8C7.4 18 7 17.6 7 17V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              ${firstVariant.available ? 'Add to Cart' : 'Sold Out'}
            </button>
            <a href="${product.url}" class="quick-view-full-details">
              View Details
            </a>
          </div>
        </div>
      </div>
    `;
    
    // Initialize interactions
    initializeProductInteractions();
  }
  
  // Generate variants HTML - matches homepage swatches
  function generateVariantsHTML(product) {
    if (product.variants.length <= 1) return '';
    
    const options = product.options;
    let variantsHTML = '<div class="quick-view-variants">';
    
    options.forEach((option, optionIndex) => {
      if (option.values.length > 1) {
        const isColorOption = option.name.toLowerCase() === 'color';
        
        if (isColorOption) {
          // Generate swatches for color options (matches homepage)
          variantsHTML += `
            <div class="variant-group">
              <label class="variant-label">${option.name}:</label>
              <div class="swatch-list" data-option-index="${optionIndex}">
                ${option.values.map((value, valueIndex) => {
                  const variant = product.variants.find(v => v.options[optionIndex] === value);
                  const variantImage = variant ? variant.featured_image?.src || product.images[0] : product.images[0];
                  return `
                    <button class="swatch ${valueIndex === 0 ? 'is-selected' : ''} ${!variant?.available ? 'unavailable' : ''}" 
                            data-value="${value}"
                            data-img="${variantImage}"
                            data-variant-id="${variant?.id || ''}"
                            ${!variant?.available ? 'disabled' : ''}
                            aria-label="Color: ${value}"
                            title="${value}">
                      <span class="swatch__chip" style="background-image:url('${variantImage}');"></span>
                      <span class="swatch__label">${value}</span>
                    </button>
                  `;
                }).join('')}
              </div>
            </div>
          `;
        } else {
          // Generate regular buttons for non-color options
          variantsHTML += `
            <div class="variant-group">
              <label class="variant-label">${option.name}:</label>
              <div class="variant-options" data-option-index="${optionIndex}">
                ${option.values.map((value, valueIndex) => {
                  const variant = product.variants.find(v => v.options[optionIndex] === value);
                  return `
                    <button class="variant-option ${valueIndex === 0 ? 'selected' : ''} ${!variant?.available ? 'unavailable' : ''}" 
                            data-value="${value}" 
                            ${!variant?.available ? 'disabled' : ''}>
                      ${value}
                    </button>
                  `;
                }).join('')}
              </div>
            </div>
          `;
        }
      }
    });
    
    variantsHTML += '</div>';
    return variantsHTML;
  }
  
  // Generate badges HTML
  function generateBadgesHTML(product, variant) {
    let badges = '';
    
    if (!variant.available) {
      badges += '<div class="quick-view-badge sold-out">Sold Out</div>';
    } else if (variant.compare_at_price && variant.compare_at_price > variant.price) {
      badges += '<div class="quick-view-badge sale">Sale</div>';
    }
    
    return badges;
  }
  
  // Initialize product interactions
  function initializeProductInteractions() {
    // Image thumbnails
    const thumbnails = content.querySelectorAll('.quick-view-thumbnail');
    const mainImage = content.querySelector('#quick-view-main-image');
    
    thumbnails.forEach(thumb => {
      thumb.addEventListener('click', function() {
        thumbnails.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        mainImage.src = this.src;
      });
    });
    
    // Initialize collapsible sections
    const toggleButtons = content.querySelectorAll('.info-section-toggle');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const section = this.closest('.info-section');
        const sectionContent = section.querySelector('.section-content');
        const icon = this.querySelector('.toggle-icon');
        
        if (sectionContent.style.display === 'none' || !sectionContent.style.display) {
          sectionContent.style.display = 'block';
          icon.style.transform = 'rotate(180deg)';
          this.style.background = '#e9ecef';
          this.style.borderColor = '#dee2e6';
        } else {
          sectionContent.style.display = 'none';
          icon.style.transform = 'rotate(0deg)';
          this.style.background = '#f9fafb';
          this.style.borderColor = '#e5e7eb';
        }
      });
    });
    
    // Variant selection - handle both swatches and regular buttons
    const variantOptions = content.querySelectorAll('.variant-option, .swatch');
    const addToCartBtn = content.querySelector('#quick-add-to-cart');
    const priceElement = content.querySelector('#quick-view-price');
    const mainImage = content.querySelector('#quick-view-main-image');
    
    variantOptions.forEach(option => {
      option.addEventListener('click', function() {
        if (this.disabled) return;
        
        const isSwatch = this.classList.contains('swatch');
        
        // Update selected state
        if (isSwatch) {
          const group = this.closest('.swatch-list');
          group.querySelectorAll('.swatch').forEach(opt => opt.classList.remove('is-selected'));
          this.classList.add('is-selected');
          
          // Update main image if swatch has image
          const swatchImg = this.dataset.img;
          if (swatchImg && mainImage) {
            mainImage.src = swatchImg;
          }
        } else {
          const group = this.closest('.variant-options');
          group.querySelectorAll('.variant-option').forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
        }
        
        // Find matching variant - collect both swatch and button selections
        const selectedSwatches = Array.from(content.querySelectorAll('.swatch.is-selected')).map(opt => opt.dataset.value);
        const selectedButtons = Array.from(content.querySelectorAll('.variant-option.selected')).map(opt => opt.dataset.value);
        const selectedOptions = [...selectedSwatches, ...selectedButtons];
        
        const matchingVariant = currentProductData.variants.find(variant => 
          variant.options.every((option, index) => option === selectedOptions[index])
        );
        
        if (matchingVariant) {
          // Update price
          priceElement.textContent = formatPrice(matchingVariant.price);
          
          // Update add to cart button
          if (matchingVariant.available) {
            addToCartBtn.disabled = false;
            addToCartBtn.innerHTML = `
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.5 5.1 16.5H17M17 13V17C17 17.6 16.6 18 16 18H8C7.4 18 7 17.6 7 17V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Add to Cart
            `;
          } else {
            addToCartBtn.disabled = true;
            addToCartBtn.textContent = 'Sold Out';
          }
        }
      });
    });
    
    // Add to cart functionality
    addToCartBtn.addEventListener('click', function() {
      if (this.disabled) return;
      
      // Collect both swatch and button selections
      const selectedSwatches = Array.from(content.querySelectorAll('.swatch.is-selected')).map(opt => opt.dataset.value);
      const selectedButtons = Array.from(content.querySelectorAll('.variant-option.selected')).map(opt => opt.dataset.value);
      const selectedOptions = [...selectedSwatches, ...selectedButtons];
      
      const matchingVariant = currentProductData.variants.find(variant => 
        variant.options.every((option, index) => option === selectedOptions[index])
      );
      
      if (matchingVariant) {
        // Validate variant is available before adding
        if (!matchingVariant.available) {
          console.error('This variant is sold out');
          return;
        }
        addToCart(matchingVariant.id);
      } else {
        console.error('Please select all options');
      }
    });
  }
  
  // Add to cart function
  async function addToCart(variantId) {
    const addToCartBtn = content.querySelector('#quick-add-to-cart');
    const originalText = addToCartBtn.innerHTML;
    
    try {
      addToCartBtn.innerHTML = 'Adding...';
      addToCartBtn.disabled = true;
      
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1
        })
      });
      
      if (response.ok) {
        addToCartBtn.innerHTML = '✓ Added!';
        
        // Update cart count if exists
        if (window.updateCartCount) {
          window.updateCartCount();
        }
        
        // Close modal after success
        setTimeout(() => {
          hideModal();
        }, 1000);
        
      } else {
        throw new Error('Failed to add to cart');
      }
      
    } catch (error) {
      console.error('Add to cart error:', error);
      addToCartBtn.innerHTML = 'Error - Try Again';
      
      setTimeout(() => {
        addToCartBtn.innerHTML = originalText;
        addToCartBtn.disabled = false;
      }, 2000);
    }
  }
  
  // Format price
  function formatPrice(price) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price / 100);
  }
  
  // Event listeners
  closeBtn.addEventListener('click', hideModal);
  overlay.addEventListener('click', hideModal);
  
  // Keyboard navigation
  modal.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      hideModal();
    }
  });
  
  // Automatic quick view button generation disabled to prevent duplicates
  // Quick view buttons are now manually added in collection sections
});
</script>

{% schema %}
{
  "name": "Quick View Modal",
  "settings": [],
  "presets": [
    {
      "name": "Quick View Modal"
    }
  ]
}
{% endschema %}
