{% comment %}
Interactive Mockup (Cleaned)
- Geometry-correct centering & bounds
- Per-view/per-color presets with localStorage
- Variant-aware color sync (if product form present)
- Image preloading + graceful fallback
- Hi-DPI downloads via toBlob
- Throttled wheel, pointer capture, keyboard nudges
- A11y: aria-live, focus, reduced-motion respect
- Scoped by section.id for multi-instance safety
{% endcomment %}

<section id="nt-mockup-{{ section.id }}" class="nt-mockup" style="padding: var(--nt-pad-top,40px) 0 var(--nt-pad-bottom,40px);">
  <div class="nt-container">
    <div class="mockup-header">
      <h2 class="nt-title">🎨 Live Design Preview</h2>
      <p class="nt-subtitle">See your custom design on different views and colors. Drag to move, scroll to resize, or use precise controls.</p>
    </div>

    <div class="nt-mockup__inner">
      <!-- Controls -->
      <div class="nt-mockup__controls" role="group" aria-label="Mockup controls">
        <!-- Views -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label">View</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Mockup view">
            <button class="nt-btn nt-btn--view is-active" data-view="front" aria-selected="true">👕 Front</button>
            <button class="nt-btn nt-btn--view" data-view="back" aria-selected="false">👕 Back</button>
            <button class="nt-btn nt-btn--view" data-view="hanging" aria-selected="false">🏷️ Hanging</button>
            <button class="nt-btn nt-btn--view" data-view="person1" aria-selected="false">👤 Model 1</button>
            <button class="nt-btn nt-btn--view" data-view="person2" aria-selected="false">👤 Model 2</button>
          </div>
        </div>
        <!-- Colors -->
        <div class="nt-mockup__group">
          <span class="nt-mockup__label">Color</span>
          <div class="nt-mockup__buttons" role="tablist" aria-label="Shirt color">
            <button class="nt-btn nt-btn--color is-active" data-color="white" aria-selected="true">⚪ White</button>
            <button class="nt-btn nt-btn--color" data-color="black" aria-selected="false">⚫ Black</button>
            <button class="nt-btn nt-btn--color" data-color="pink" aria-selected="false">🩷 Pink</button>
            <button class="nt-btn nt-btn--color" data-color="blue" aria-selected="false">🔵 Blue</button>
          </div>
        </div>
        <!-- Upload / Actions -->
        <div class="nt-mockup__group">
          <div class="upload-section">
            <button class="nt-btn nt-btn--upload" id="nt-upload-{{ section.id }}">
              📁 Upload Your Design
              <input type="file" id="nt-file-input-{{ section.id }}" accept=".png,.jpg,.jpeg,.svg,.pdf,.ai,.psd" />
            </button>
            <div class="file-info">
              <span>📄 Accepts:</span>
              <div class="file-chips">
                <span class="file-type">PNG</span><span class="file-type">JPG</span><span class="file-type">SVG</span><span class="file-type">PDF</span>
              </div>
              <button class="help-link" id="nt-help-{{ section.id }}">ℹ️ Help</button>
            </div>
          </div>
          {% if section.settings.allow_download %}
          <button class="nt-btn nt-btn--primary" id="nt-download-{{ section.id }}">📥 Download Mockup</button>
          {% endif %}
          <button class="nt-btn nt-btn--secondary" id="nt-edit-{{ section.id }}">✏️ Edit Design</button>
          <button class="nt-btn nt-btn--danger" id="nt-remove-{{ section.id }}" style="display:none">🗑️ Remove Design</button>
        </div>
      </div>

      <!-- Placement Controls -->
      <div id="nt-placement-controls-{{ section.id }}" class="nt-placement-controls">
        <div class="nt-controls-row">
          <span class="nt-controls-title">🎯 Precise Placement Controls</span>
          <button id="nt-auto-equidistant-{{ section.id }}" class="nt-chip nt-chip--action">⚖️ Auto-Equidistant</button>
          <button id="nt-reset-placement-{{ section.id }}" class="nt-chip">🔄 Reset</button>
        </div>
        <div class="nt-grid">
          <div class="placement-slider">
            <label><span>📐 Top</span><span id="nt-top-val-{{ section.id }}">{{ section.settings.overlay_top }}%</span></label>
            <input type="range" id="nt-top-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_top }}" />
          </div>
          <div class="placement-slider">
            <label><span>📐 Left</span><span id="nt-left-val-{{ section.id }}">{{ section.settings.overlay_left }}%</span></label>
            <input type="range" id="nt-left-{{ section.id }}" min="0" max="90" step="0.5" value="{{ section.settings.overlay_left }}" />
          </div>
          <div class="placement-slider">
            <label><span>📏 Width</span><span id="nt-width-val-{{ section.id }}">{{ section.settings.overlay_width }}%</span></label>
            <input type="range" id="nt-width-{{ section.id }}" min="10" max="100" step="1" value="{{ section.settings.overlay_width }}" />
          </div>
          <div class="placement-slider">
            <label><span>🔄 Rotation</span><span id="nt-rotate-val-{{ section.id }}">{{ section.settings.overlay_rotate }}°</span></label>
            <input type="range" id="nt-rotate-{{ section.id }}" min="-45" max="45" step="0.5" value="{{ section.settings.overlay_rotate }}" />
          </div>
        </div>

        <div class="nt-guide-card">
          <h5>🎯 Placement Guide</h5>
          <div class="nt-guide-row">
            <button id="nt-toggle-guide-{{ section.id }}" class="nt-btn-small nt-btn-small--amber">📐 Show Placement Guide</button>
            <span>Toggle crosshairs and placement area</span>
          </div>
        </div>

        <div class="nt-size-card">
          <h5>🔍 Mockup Size</h5>
          <div class="nt-size-grid">
            <div>
              <label><span>📏 Scale</span><span id="nt-mockup-scale-val-{{ section.id }}">100%</span></label>
              <input type="range" id="nt-mockup-scale-{{ section.id }}" min="50" max="130" step="5" value="100" />
              <button id="nt-reset-scale-{{ section.id }}" class="nt-chip nt-chip--dark">🔄 Reset Size</button>
            </div>
            <div class="nt-size-buttons">
              <button id="nt-zoom-in-{{ section.id }}" class="nt-chip nt-chip--blue">🔍 Zoom In</button>
              <button id="nt-zoom-out-{{ section.id }}" class="nt-chip nt-chip--orange">🔍 Zoom Out</button>
            </div>
          </div>
        </div>

        <div class="nt-tip">💡 <strong>Pro Tip:</strong> Drag the design to move it, scroll to resize, or use the precise controls above.</div>
      </div>

      <!-- Stage -->
      <div class="nt-mockup__stage">
        <div class="nt-mockup__canvas" id="nt-mockup-canvas-{{ section.id }}" aria-label="T-shirt mockup canvas">
          <img id="nt-base-{{ section.id }}" class="nt-mockup__base" src="{{ 'WFront_t-shirt.png' | asset_url }}" alt="T-shirt mockup" loading="eager" decoding="async">

          <!-- Overlay -->
          <div id="nt-overlay-{{ section.id }}" class="nt-mockup__overlay" tabindex="0" aria-label="Design overlay" role="group" aria-roledescription="draggable resizable">
            <span id="nt-design-text-{{ section.id }}" class="nt-overlay-text">Your Design Here</span>
            <!-- handles (visually styled via CSS) -->
            <div class="resize-handle" data-direction="nw" title="Resize from top-left"></div>
            <div class="resize-handle" data-direction="ne" title="Resize from top-right"></div>
            <div class="resize-handle" data-direction="sw" title="Resize from bottom-left"></div>
            <div class="resize-handle" data-direction="se" title="Resize from bottom-right"></div>
            <div class="resize-handle" data-direction="n" title="Resize from top"></div>
            <div class="resize-handle" data-direction="s" title="Resize from bottom"></div>
            <div class="resize-handle" data-direction="w" title="Resize from left"></div>
            <div class="resize-handle" data-direction="e" title="Resize from right"></div>
          </div>

          <!-- Guides -->
          <div id="nt-placement-guide-{{ section.id }}" class="nt-placement-guide" aria-hidden="true">
            <div class="nt-guide-h"></div>
            <div class="nt-guide-v"></div>
            <div class="nt-guide-center"></div>
            <div class="nt-guide-area"><div class="nt-guide-badge">🎯 Place Design Here</div></div>
            <div class="nt-guide-corner nt-guide-c1"></div>
            <div class="nt-guide-corner nt-guide-c2"></div>
            <div class="nt-guide-corner nt-guide-c3"></div>
            <div class="nt-guide-corner nt-guide-c4"></div>
            <div id="nt-centering-indicators-{{ section.id }}" class="nt-centering">
              <div id="nt-perfect-center-{{ section.id }}" class="nt-perfect"><div class="nt-perfect-mark">✓</div><div class="nt-perfect-label">PERFECT CENTER</div></div>
              <div id="nt-horizontal-center-{{ section.id }}" class="nt-center-h"></div>
              <div id="nt-vertical-center-{{ section.id }}" class="nt-center-v"></div>
              <div id="nt-equidistant-{{ section.id }}" class="nt-eq"><div class="nt-eq-mark">⚖</div><div class="nt-eq-label">EQUIDISTANT</div></div>
              <div id="nt-centering-status-{{ section.id }}" class="nt-status"><div id="nt-status-text-{{ section.id }}"></div></div>
            </div>
          </div>
        </div>
        <p class="nt-mockup__hint">💡 Tip: Drag the design to move it, use scroll wheel to resize, or the sliders above.</p>
        <div id="nt-live-{{ section.id }}" class="sr-only" aria-live="polite"></div>
      </div>
    </div>
  </div>
</section>

<style>
/* ---- Theme variables ---- */
:root {
  --nt-teal: #27e1c1; --nt-pink:#ff4fa3; --nt-ink:#0f172a; --nt-muted:#64748b;
  --nt-border:#e2e8f0; --nt-bg:#f8fafc; --nt-card:#ffffff;
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  .nt-mockup * { animation: none !important; transition: none !important; }
}

/* Layout */
.nt-container { max-width: 1200px; margin: 0 auto; padding: 0 16px; }
.nt-title { font-family:'Bebas Neue',sans-serif; font-size:42px; margin:0 0 8px; background:linear-gradient(45deg,var(--nt-teal),var(--nt-pink)); -webkit-background-clip:text; background-clip:text; color:transparent; }
.nt-subtitle { color: var(--nt-muted); max-width: 640px; margin: 0 auto; }
.mockup-header { text-align:center; margin-bottom: 28px; animation: fadeInUp .6s ease; }
.nt-mockup__inner { display:grid; gap: 16px; }

/* Controls */
.nt-mockup__controls { display:flex; flex-wrap:wrap; gap:16px; align-items:center; justify-content:center; background:var(--nt-card); padding:16px; border-radius:16px; box-shadow: 0 6px 20px rgba(0,0,0,.08); animation: fadeInUp .8s ease; }
.nt-mockup__group { display:flex; flex-direction:column; gap:8px; }
.nt-mockup__label { font-weight:600; color:#374151; font-size:14px; }
.nt-mockup__buttons { display:flex; gap:8px; flex-wrap:wrap; }

/* ===== DRAMATICALLY ENHANCED MOCKUP BUTTONS ===== */
.nt-btn { 
  padding: 12px 20px; 
  border: 2px solid transparent; 
  background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05)); 
  color: var(--nt-muted); 
  border-radius: 16px; 
  font-size: 14px; 
  font-weight: 600; 
  cursor: pointer; 
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  box-shadow: 0 4px 16px rgba(0,0,0,0.1);
  position: relative;
  overflow: hidden;
  min-height: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
}

.nt-btn:hover { 
  transform: translateY(-2px) scale(1.02); 
  box-shadow: 0 8px 24px rgba(0,0,0,0.2); 
  border-color: var(--nt-teal); 
  color: var(--nt-teal); 
  background: linear-gradient(135deg, rgba(39,225,193,0.15), rgba(39,225,193,0.1));
}

.nt-btn.is-active { 
  border-color: var(--nt-teal); 
  background: linear-gradient(135deg, var(--nt-teal), #20b2aa); 
  color: #fff;
  box-shadow: 0 6px 20px rgba(39,225,193,0.4);
  transform: translateY(-1px);
}

.nt-btn--primary { 
  background: linear-gradient(135deg, #ff4fa3, #27e1c1); 
  color: #fff; 
  border: none; 
  box-shadow: 0 4px 16px rgba(255,79,163,0.3);
}

.nt-btn--primary:hover {
  background: linear-gradient(135deg, #ff6bb3, #39f1d1);
  box-shadow: 0 8px 24px rgba(255,79,163,0.4);
}

.nt-btn--secondary { 
  background: linear-gradient(135deg, #8b5cf6, #a855f7); 
  color: #fff; 
  border: none; 
  box-shadow: 0 4px 16px rgba(139,92,246,0.3);
}

.nt-btn--secondary:hover {
  background: linear-gradient(135deg, #9f6df8, #b865f9);
  box-shadow: 0 8px 24px rgba(139,92,246,0.4);
}

.nt-btn--danger { 
  background: linear-gradient(135deg, #ef4444, #dc2626); 
  color: #fff; 
  border: none; 
  box-shadow: 0 4px 16px rgba(239,68,68,0.3);
}

.nt-btn--danger:hover {
  background: linear-gradient(135deg, #f56565, #e53e3e);
  box-shadow: 0 8px 24px rgba(239,68,68,0.4);
}

.nt-btn--upload { 
  position: relative; 
  overflow: hidden; 
  background: linear-gradient(135deg, #f59e0b, #d97706); 
  color: #fff; 
  border: none; 
  box-shadow: 0 4px 16px rgba(245,158,11,0.3);
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.nt-btn--upload:hover {
  background: linear-gradient(135deg, #f6ad55, #ea580c);
  box-shadow: 0 8px 24px rgba(245,158,11,0.4);
  transform: translateY(-2px) scale(1.02);
}

.nt-btn--upload::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.nt-btn--upload:hover::before {
  left: 100%;
}
.nt-btn--upload input[type=file]{ position:absolute; inset:0; opacity:0; cursor:pointer; }

.upload-section { display:flex; flex-direction:column; gap:6px; align-items:center; }
.file-info{ display:flex; gap:10px; align-items:center; font-size:12px; color:#6b7280; }
.file-chips{ display:flex; gap:6px; flex-wrap:wrap; }
.file-type{ background:#e5e7eb; padding:2px 6px; border-radius:4px; font-size:11px; }
.help-link{ background:none; border:none; color:#3b82f6; cursor:pointer; font-size:11px; text-decoration:underline; }

/* Placement controls */
.nt-placement-controls{ background:#fff; padding:16px; border-radius:16px; box-shadow:0 6px 20px rgba(0,0,0,.08); animation: fadeInUp 1s ease; }
.nt-controls-row{ display:flex; align-items:center; gap:8px; margin-bottom:12px; }
.nt-controls-title{ font-weight:700; font-size:16px; color:#374151; }
.nt-chip{ padding:6px 10px; border-radius:8px; border:1px solid var(--nt-border); background:#f8fafc; font-size:12px; cursor:pointer; }
.nt-chip--action{ background: linear-gradient(45deg,#8b5cf6,#7c3aed); color:#fff; border:none; }
.nt-chip--dark{ background:#6b7280; color:#fff; border:none; }
.nt-chip--blue{ background:#4299e1; color:#fff; border:none; }
.nt-chip--orange{ background:#ed8936; color:#fff; border:none; }

.nt-grid{ display:grid; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); gap:12px; }
.placement-slider label{ display:flex; justify-content:space-between; margin-bottom:6px; font-size:14px; color:#374151; }
.placement-slider input[type=range]{ width:100%; height:6px; background:#e5e7eb; border-radius:3px; outline:none; }

.nt-guide-card{ margin-top:12px; padding:12px; background:#fef3c7; border-radius:12px; border:1px solid #fbbf24; }
.nt-guide-card h5{ margin:0 0 8px; font-size:14px; font-weight:700; color:#92400e; }
.nt-guide-row{ display:flex; align-items:center; gap:10px; }

.nt-size-card{ margin-top:12px; padding:12px; background:#f0fdf4; border-radius:12px; border:1px solid #bbf7d0; }
.nt-size-card h5{ margin:0 0 8px; font-size:14px; font-weight:700; color:#166534; }
.nt-size-grid{ display:grid; grid-template-columns: 1fr auto; gap:12px; align-items:end; }
.nt-size-buttons{ display:flex; flex-direction:column; gap:6px; }

.nt-tip{ margin-top:12px; padding:10px; background:#f8fafc; border-radius:8px; border:1px solid var(--nt-border); color:#6b7280; font-size:12px; text-align:center; }

/* Stage */
.nt-mockup__stage{ width:100%; display:grid; place-items:center; margin: 36px 0; animation: fadeInUp 1.1s ease; }
.nt-mockup__canvas{ position:relative; width:min(900px,100%); max-width:90vw; aspect-ratio:1/1; background:linear-gradient(135deg,#667eea,#764ba2); border-radius:20px; overflow:hidden; box-shadow: 0 25px 80px rgba(102,126,234,.3), 0 10px 30px rgba(0,0,0,.2); cursor:grab; }
.nt-mockup__base{ position:absolute; inset:0; width:100%; height:100%; object-fit:contain; pointer-events:none; }
.nt-mockup__canvas.dragging{ cursor:grabbing; }

.nt-mockup__overlay{ position:absolute; width:60%; left:25%; top:45%; transform:rotate(0deg); display:flex; align-items:center; justify-content:center; border:2px dashed rgba(39,225,193,.35); border-radius:8px; background:rgba(39,225,193,.06); }
.nt-overlay-text{ font-family:'Bebas Neue',sans-serif; font-size:32px; font-weight:700; color:#000; text-align:center; white-space:nowrap; user-select:none; text-shadow:1px 1px 2px rgba(255,255,255,.8); pointer-events:none; }
.resize-handle{ position:absolute; width:22px; height:22px; border:3px solid #fff; border-radius:50%; box-shadow:0 4px 12px rgba(0,0,0,.25); background:#ff6b6b; }
.resize-handle[data-direction="nw"]{ top:-12px; left:-12px; cursor:nw-resize; }
.resize-handle[data-direction="ne"]{ top:-12px; right:-12px; cursor:ne-resize; }
.resize-handle[data-direction="sw"]{ bottom:-12px; left:-12px; cursor:sw-resize; }
.resize-handle[data-direction="se"]{ bottom:-12px; right:-12px; cursor:se-resize; }
.resize-handle[data-direction="n"]{ top:-12px; left:50%; transform:translateX(-50%); background:#4ecdc4; cursor:n-resize; }
.resize-handle[data-direction="s"]{ bottom:-12px; left:50%; transform:translateX(-50%); background:#4ecdc4; cursor:s-resize; }
.resize-handle[data-direction="w"]{ left:-12px; top:50%; transform:translateY(-50%); background:#4ecdc4; cursor:w-resize; }
.resize-handle[data-direction="e"]{ right:-12px; top:50%; transform:translateY(-50%); background:#4ecdc4; cursor:e-resize; }

/* Guides */
.nt-placement-guide{ position:absolute; inset:0; pointer-events:none; z-index:6; display:none; }
.nt-guide-h{ position:absolute; top:50%; left:0; right:0; height:2px; background:linear-gradient(90deg,transparent,#ff6b6b,#ff6b6b,transparent); transform:translateY(-50%); box-shadow:0 0 4px rgba(255,107,107,.5); }
.nt-guide-v{ position:absolute; left:50%; top:0; bottom:0; width:2px; background:linear-gradient(180deg,transparent,#ff6b6b,#ff6b6b,transparent); transform:translateX(-50%); box-shadow:0 0 4px rgba(255,107,107,.5); }
.nt-guide-center{ position:absolute; top:50%; left:50%; width:24px; height:24px; border:3px solid #ff6b6b; border-radius:50%; transform:translate(-50%,-50%); background:rgba(255,107,107,.2); box-shadow:0 0 8px rgba(255,107,107,.6); }
.nt-guide-area{ position:absolute; top:20%; left:20%; right:20%; bottom:20%; border:3px dashed #4ecdc4; border-radius:12px; background:rgba(78,205,196,.1); box-shadow:0 0 12px rgba(78,205,196,.3); }
.nt-guide-badge{ position:absolute; top:8px; left:50%; transform:translateX(-50%); background:linear-gradient(45deg,#4ecdc4,#44a08d); color:#fff; padding:6px 16px; border-radius:8px; font-size:13px; font-weight:700; white-space:nowrap; box-shadow:0 2px 8px rgba(0,0,0,.3); }
.nt-guide-corner{ position:absolute; width:12px; height:12px; border:2px solid #4ecdc4; border-radius:50%; background:rgba(78,205,196,.3); box-shadow:0 0 6px rgba(78,205,196,.5); }
.nt-guide-c1{ top:15%; left:15%; } .nt-guide-c2{ top:15%; right:15%; } .nt-guide-c3{ bottom:15%; left:15%; } .nt-guide-c4{ bottom:15%; right:15%; }

.nt-centering .nt-status{ position:absolute; top:10px; left:10px; background:rgba(0,0,0,.85); color:#fff; padding:8px 12px; border-radius:6px; font-size:12px; font-weight:700; display:none; max-width:200px; }
.nt-perfect{ position:absolute; top:50%; left:50%; transform:translate(-50%,-50%); display:none; }
.nt-perfect .nt-perfect-mark{ width:40px; height:40px; border:3px solid #10b981; border-radius:50%; background:rgba(16,185,129,.2); box-shadow:0 0 20px rgba(16,185,129,.8); display:grid; place-items:center; font-size:16px; color:#10b981; font-weight:700; }
.nt-perfect .nt-perfect-label{ position:absolute; top:-26px; left:50%; transform:translateX(-50%); background:#10b981; color:#fff; padding:3px 6px; border-radius:4px; font-size:10px; font-weight:700; }
.nt-center-h{ position:absolute; top:50%; left:0; right:0; height:2px; background:linear-gradient(90deg,transparent,#f59e0b,#f59e0b,transparent); transform:translateY(-50%); display:none; box-shadow:0 0 8px rgba(245,158,11,.6); }
.nt-center-v{ position:absolute; left:50%; top:0; bottom:0; width:2px; background:linear-gradient(180deg,transparent,#f59e0b,#f59e0b,transparent); transform:translateX(-50%); display:none; box-shadow:0 0 8px rgba(245,158,11,.6); }
.nt-eq{ position:absolute; top:50%; left:50%; transform:translate(-50%,-50%); display:none; }
.nt-eq .nt-eq-mark{ width:60px; height:60px; border:2px dashed #8b5cf6; border-radius:50%; background:rgba(139,92,246,.1); box-shadow:0 0 15px rgba(139,92,246,.4); display:grid; place-items:center; font-weight:700; color:#8b5cf6; }
.nt-eq .nt-eq-label{ position:absolute; top:-20px; left:50%; transform:translateX(-50%); background:#8b5cf6; color:#fff; padding:3px 6px; border-radius:3px; font-size:9px; font-weight:700; }

/* Hint */
.nt-mockup__hint{ color:#6b7280; font-size:14px; margin-top:12px; text-align:center; }

/* Responsive */
@media (max-width: 768px){
  .nt-mockup__controls{ flex-direction:column; gap:12px; }
  .nt-mockup__canvas{ max-width: 520px; }
}

/* Animations */
@keyframes fadeInUp{ from{opacity:0; transform:translateY(16px);} to{opacity:1; transform:translateY(0);} }

/* Screen reader only */
.sr-only{ position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0; }
</style>

<script>
document.addEventListener('DOMContentLoaded', ()=>{
  const rootId = 'nt-mockup-{{ section.id }}';
  const $ = (sel,scope=document)=> scope.querySelector(sel);
  const $$ = (sel,scope=document)=> Array.from(scope.querySelectorAll(sel));

  const elRoot = document.getElementById(rootId);
  const elCanvas = $(`#nt-mockup-canvas-{{ section.id }}`);
  const elBase = $(`#nt-base-{{ section.id }}`);
  const elOverlay = $(`#nt-overlay-{{ section.id }}`);
  const elText = $(`#nt-design-text-{{ section.id }}`);

  if (!elRoot || !elCanvas || !elOverlay) return;

  const mockup = {
    mockupImages: {
      front:  { white: "{{ 'WFront_t-shirt.png' | asset_url }}",  black: "{{ 'WFront_t-shirt.png' | asset_url }}", pink: "{{ 'WFront_t-shirt.png' | asset_url }}", blue: "{{ 'WFront_t-shirt.png' | asset_url }}" },
      back:   { white: "{{ 'Wback_t-shirt.png'  | asset_url }}",  black: "{{ 'Wback_t-shirt.png'  | asset_url }}", pink: "{{ 'Wback_t-shirt.png'  | asset_url }}", blue: "{{ 'Wback_t-shirt.png'  | asset_url }}" },
      hanging:{ white: "{{ 'W3-D_t-shirt.png'   | asset_url }}",  black: "{{ 'W3-D_t-shirt.png'   | asset_url }}", pink: "{{ 'W3-D_t-shirt.png'   | asset_url }}", blue: "{{ 'W3-D_t-shirt.png'   | asset_url }}" },
      person1:{ white: "{{ 'Models/Women/Girl-Model.png' | asset_url }}", black:"{{ 'Models/Women/Girl-Model.png' | asset_url }}", pink:"{{ 'Models/Women/Girl-Model.png' | asset_url }}", blue:"{{ 'Models/Women/Girl-Model.png' | asset_url }}" },
      person2:{ white: "{{ 'Models/Women/Women-side.png' | asset_url }}", black:"{{ 'Models/Women/Women-side.png' | asset_url }}", pink:"{{ 'Models/Women/Women-side.png' | asset_url }}", blue:"{{ 'Models/Women/Women-side.png' | asset_url }}" }
    },

    baseMockup: "{{ 'WFront_t-shirt.png' | asset_url }}",
    state: { view:'front', color:'white' },
    presets: {},

    designState: {
      text: 'Your Design Here', fontSize: 32, fontFamily: "'Bebas Neue', sans-serif", textColor:'#000000', effect:'none'
    },

    placementState: { topPct: {{ section.settings.overlay_top }}, leftPct: {{ section.settings.overlay_left }}, widthPct: {{ section.settings.overlay_width }}, rotateDeg: {{ section.settings.overlay_rotate }}, dragging:false, resizing:false, resizeDirection:'se', lastX:0, lastY:0 },

    /* ---------- Utils ---------- */
    getRects(){ const cRect = elCanvas.getBoundingClientRect(); const oRect = elOverlay.getBoundingClientRect(); return { cRect, oRect }; },
    preload(url){ return new Promise((res,rej)=>{ const i=new Image(); i.onload=()=>res(); i.onerror=rej; i.src=url; }); },
    throttle(fn,ms=50){ let t=0; return (...a)=>{ const n=performance.now(); if(n-t>=ms){ t=n; fn(...a); } }; },

    /* ---------- Init ---------- */
    init(){
      try{ const saved = localStorage.getItem(`ntPresets:{{ section.id }}`); if(saved) this.presets = JSON.parse(saved); }catch{}
      this.bindUI();
      this.loadFromCustomizer();
      this.updateBase();
      this.updateDesign();
      this.updatePlacementDisplay();
      this.updateDesignPosition();
      this.setupVariantSync();
      window[`mockup_{{ section.id }}`] = this; // avoid clobbering global
    },

    /* ---------- UI Binding ---------- */
    bindUI(){
      // Buttons
      const viewBtns = $$('.nt-btn--view', elRoot);
      const colorBtns = $$('.nt-btn--color', elRoot);
      const setActive = (buttons, active) => buttons.forEach(b=>{ const on=(b.dataset.view||b.dataset.color)===active; b.classList.toggle('is-active',on); b.setAttribute('aria-selected', on?'true':'false'); });

      viewBtns.forEach(btn=> btn.addEventListener('click', ()=>{ this.state.view = btn.dataset.view; setActive(viewBtns,this.state.view); this.updateBase(); }));
      colorBtns.forEach(btn=> btn.addEventListener('click', ()=>{ this.state.color = btn.dataset.color; setActive(colorBtns,this.state.color); this.updateBase(); }));

      // Edit/remove
      const editBtn = $(`#nt-edit-{{ section.id }}`);
      editBtn?.addEventListener('click', ()=>{ document.querySelector('.tshirt-customizer-section')?.scrollIntoView({behavior:'smooth', block:'start'}); });
      const removeBtn = $(`#nt-remove-{{ section.id }}`);
      removeBtn?.addEventListener('click', ()=> this.removeDesign());

      // Upload
      const uploadBtn = $(`#nt-upload-{{ section.id }}`);
      const fileInput = $(`#nt-file-input-{{ section.id }}`);
      uploadBtn?.addEventListener('click', (e)=>{ if(e.target===uploadBtn) fileInput?.click(); });
      fileInput?.addEventListener('change', (e)=>{ const f=e.target.files[0]; if(f) this.handleFileUpload(f); });
      const helpBtn = $(`#nt-help-{{ section.id }}`); helpBtn?.addEventListener('click', ()=> this.showHelpModal());

      // Placement sliders
      const topS=$(`#nt-top-{{ section.id }}`), leftS=$(`#nt-left-{{ section.id }}`), widthS=$(`#nt-width-{{ section.id }}`), rotS=$(`#nt-rotate-{{ section.id }}`);
      topS?.addEventListener('input', ()=>{ this.placementState.topPct=parseFloat(topS.value); this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); });
      leftS?.addEventListener('input', ()=>{ this.placementState.leftPct=parseFloat(leftS.value); this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); });
      widthS?.addEventListener('input', ()=>{ this.placementState.widthPct=parseFloat(widthS.value); this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); });
      rotS?.addEventListener('input', ()=>{ this.placementState.rotateDeg=parseFloat(rotS.value); this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); });

      // Auto/Reset
      $(`#nt-reset-placement-{{ section.id }}`)?.addEventListener('click', ()=> this.resetPlacement());
      $(`#nt-auto-equidistant-{{ section.id }}`)?.addEventListener('click', ()=> this.autoEquidistant());

      // Scale
      const scaleS=$(`#nt-mockup-scale-{{ section.id }}`), scaleVal=$(`#nt-mockup-scale-val-{{ section.id }}`);
      const setScale=(v)=>{ elCanvas.style.transform=`scale(${v/100})`; elCanvas.style.transformOrigin='center center'; if(scaleVal) scaleVal.textContent=v+'%'; };
      scaleS?.addEventListener('input', ()=> setScale(parseFloat(scaleS.value)) );
      $(`#nt-zoom-in-{{ section.id }}`)?.addEventListener('click', ()=>{ const v=Math.min(130, parseFloat(scaleS?.value||100)+10); if(scaleS) scaleS.value=v; setScale(v); });
      $(`#nt-zoom-out-{{ section.id }}`)?.addEventListener('click', ()=>{ const v=Math.max(50, parseFloat(scaleS?.value||100)-10); if(scaleS) scaleS.value=v; setScale(v); });
      $(`#nt-reset-scale-{{ section.id }}`)?.addEventListener('click', ()=>{ if(scaleS) scaleS.value=100; setScale(100); });

      // Download
      {% if section.settings.allow_download %}
      $(`#nt-download-{{ section.id }}`)?.addEventListener('click', ()=> this.downloadComposite());
      {% endif %}

      // Drag/resize (pointer + wheel throttled)
      elOverlay.addEventListener('mousedown', (e)=>{ e.preventDefault(); this.startDrag(e); });
      document.addEventListener('mousemove', (e)=>{ if(this.placementState.dragging) this.handleDrag(e); if(this.placementState.resizing) this.handleResizeDrag(e); });
      document.addEventListener('mouseup', ()=>{ this.endDrag(); this.endResize(); });

      const onWheel = this.throttle((e)=>{
        e.preventDefault();
        const delta = Math.sign(e.deltaY);
        const inc = e.ctrlKey ? 1 : 3;
        this.placementState.widthPct = Math.max(10, Math.min(100, this.placementState.widthPct - delta*inc));
        this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent();
        const widthS = $(`#nt-width-{{ section.id }}`); if(widthS) widthS.value=this.placementState.widthPct;
      }, 30);
      elCanvas.addEventListener('wheel', onWheel, { passive:false });

      // Resize handles
      $$('.resize-handle', elOverlay).forEach(h=>{
        h.addEventListener('mousedown', (e)=>{ e.preventDefault(); e.stopPropagation(); this.startResize(e, h.dataset.direction); });
      });

      // Keyboard nudges
      elOverlay.tabIndex = 0;
      elOverlay.addEventListener('keydown', (e)=>{
        const step = e.shiftKey ? 5 : 1;
        const { cRect, oRect } = this.getRects();
        const heightPct = (oRect.height / cRect.height) * 100;
        if(['ArrowLeft','ArrowRight','ArrowUp','ArrowDown'].includes(e.key)){
          e.preventDefault();
          if(e.key==='ArrowLeft')  this.placementState.leftPct = Math.max(0, this.placementState.leftPct - step);
          if(e.key==='ArrowRight') this.placementState.leftPct = Math.min(100 - this.placementState.widthPct, this.placementState.leftPct + step);
          if(e.key==='ArrowUp')    this.placementState.topPct  = Math.max(0, this.placementState.topPct - step);
          if(e.key==='ArrowDown')  this.placementState.topPct  = Math.min(100 - heightPct, this.placementState.topPct + step);
          this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent();
        }
      });

      // Guides toggle
      const guide = $(`#nt-placement-guide-{{ section.id }}`);
      const toggleBtn = $(`#nt-toggle-guide-{{ section.id }}`);
      let guideVisible=false;
      toggleBtn?.addEventListener('click', ()=>{ guideVisible=!guideVisible; guide.style.display = guideVisible?'block':'none'; toggleBtn.textContent = guideVisible ? '📐 Hide Placement Guide' : '📐 Show Placement Guide'; });
    },

    /* ---------- Base image handling ---------- */
    async updateBase(){
      const url = this.mockupImages[this.state.view]?.[this.state.color] || this.baseMockup;
      try {
        await Promise.race([ this.preload(url), new Promise((_,rej)=>setTimeout(()=>rej(new Error('timeout')), 4000)) ]);
        elBase.src = url; this.removeFallback();
      } catch { this.createFallback(); }
      this.applyPresetForCurrent();
    },

    createFallback(){
      if ($('.fallback-tshirt', elCanvas)) return;
      const fb = document.createElement('div'); fb.className='fallback-tshirt';
      fb.style.cssText='position:absolute;inset:0;background:linear-gradient(180deg,#f8f9fa,#e9ecef);border-radius:12px;display:flex;flex-direction:column;align-items:center;justify-content:center;color:#6c757d;';
      const body=document.createElement('div'); body.style.cssText='width:60%;height:70%;background:#fff;border:3px solid #dee2e6;border-radius:20px 20px 8px 8px;position:relative;margin-bottom:10px;box-shadow:0 4px 12px rgba(0,0,0,.1)';
      const ls=document.createElement('div'); ls.style.cssText='position:absolute;left:-20px;top:20%;width:15px;height:40%;background:#fff;border:3px solid #dee2e6;border-radius:0 8px 8px 0';
      const rs=document.createElement('div'); rs.style.cssText='position:absolute;right:-20px;top:20%;width:15px;height:40%;background:#fff;border:3px solid #dee2e6;border-radius:8px 0 0 8px';
      const label=document.createElement('div'); label.textContent='T‑shirt Mockup'; label.style.fontSize='14px';
      body.append(ls,rs); fb.append(body,label); elCanvas.append(fb);
    },
    removeFallback(){ const fb = $('.fallback-tshirt', elCanvas); if(fb) fb.remove(); },

    /* ---------- Design ---------- */
    updateDesign(){
      if (!elText) return;
      elText.textContent = this.designState.text;
      elText.style.fontFamily = this.designState.fontFamily;
      elText.style.fontSize = this.designState.fontSize + 'px';
      elText.style.color = this.designState.textColor;
      elText.style.textShadow = '1px 1px 2px rgba(255,255,255,.8)';
    },
    loadFromCustomizer(){ if(window.customizer?.state){ this.designState = { ...this.designState, ...window.customizer.state }; this.updateDesign(); } },

    /* ---------- Presets ---------- */
    key(){ return `${this.state.view}:${this.state.color}`; },
    applyPresetForCurrent(){ const p=this.presets[this.key()]; if(p){ Object.assign(this.placementState, p); this.updatePlacementDisplay(); this.updateDesignPosition(); } },
    savePresetForCurrent(){ this.presets[this.key()]={ topPct:this.placementState.topPct, leftPct:this.placementState.leftPct, widthPct:this.placementState.widthPct, rotateDeg:this.placementState.rotateDeg }; try{ localStorage.setItem(`ntPresets:{{ section.id }}`, JSON.stringify(this.presets)); }catch{} },

    /* ---------- Placement ---------- */
    updatePlacementDisplay(){
      const t=$(`#nt-top-val-{{ section.id }}`), l=$(`#nt-left-val-{{ section.id }}`), w=$(`#nt-width-val-{{ section.id }}`), r=$(`#nt-rotate-val-{{ section.id }}`);
      if(t) t.textContent = this.placementState.topPct.toFixed(1)+'%';
      if(l) l.textContent = this.placementState.leftPct.toFixed(1)+'%';
      if(w) w.textContent = this.placementState.widthPct.toFixed(0)+'%';
      if(r) r.textContent = this.placementState.rotateDeg.toFixed(1)+'°';
    },
    updateDesignPosition(){
      elOverlay.style.top  = this.placementState.topPct + '%';
      elOverlay.style.left = this.placementState.leftPct + '%';
      elOverlay.style.width= this.placementState.widthPct + '%';
      elOverlay.style.transform = `rotate(${this.placementState.rotateDeg}deg)`;
      this.checkCentering();
    },
    checkCentering(){
      const { cRect, oRect } = this.getRects();
      const cX = cRect.left + cRect.width/2, cY = cRect.top + cRect.height/2;
      const oX = oRect.left + oRect.width/2, oY = oRect.top + oRect.height/2;
      const dxPct = Math.abs((oX-cX)/cRect.width)*100; const dyPct = Math.abs((oY-cY)/cRect.height)*100;
      const h=$(`#nt-horizontal-center-{{ section.id }}`), v=$(`#nt-vertical-center-{{ section.id }}`), p=$(`#nt-perfect-center-{{ section.id }}`), e=$(`#nt-equidistant-{{ section.id }}`), s=$(`#nt-centering-status-{{ section.id }}`), st=$(`#nt-status-text-{{ section.id }}`);
      if(!h||!v||!p||!e||!s||!st) return; [h,v,p,e,s].forEach(x=>x.style.display='none');
      const tol=1.5; const horiz=dxPct<=tol; const vert=dyPct<=tol; const perfect=horiz&&vert;
      if(perfect){ p.style.display='block'; st.textContent='🎯 Perfect center'; s.style.display='block'; s.style.background='rgba(16,185,129,.9)'; }
      else { if(horiz){ h.style.display='block'; st.textContent='↔️ Horizontally centered'; s.style.display='block'; s.style.background='rgba(245,158,11,.9)'; }
             if(vert){ v.style.display='block'; st.textContent='↕️ Vertically centered'; s.style.display='block'; s.style.background='rgba(245,158,11,.9)'; } }
      const leftPct=this.placementState.leftPct, widthPct=this.placementState.widthPct; const topPct=this.placementState.topPct; const heightPct=(oRect.height/cRect.height)*100; const rightPct=100-leftPct-widthPct; const bottomPct=100-topPct-heightPct; const eqTol=2.0;
      if(Math.abs(leftPct-rightPct)<=eqTol && Math.abs(topPct-bottomPct)<=eqTol && !perfect){ e.style.display='block'; if(s.style.display==='none'){ st.textContent='⚖️ Equidistant margins'; s.style.display='block'; s.style.background='rgba(139,92,246,.9)'; } }
      clearTimeout(this._statusTimer); if(s.style.display==='block'){ this._statusTimer=setTimeout(()=> s.style.display='none', 2500); }
    },
    autoEquidistant(){
      const { cRect, oRect } = this.getRects();
      const widthPct = this.placementState.widthPct;
      const left = (100 - widthPct)/2; // horizontal center
      // slightly higher visually for shirts
      const heightPct=(oRect.height/cRect.height)*100 || (widthPct*0.8);
      const top = Math.max(8, Math.min(100-heightPct-8, 35));
      this.placementState.leftPct=left; this.placementState.topPct=top;
      this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); this.announce('⚖️ Design positioned equidistant from edges!');
    },

    /* ---------- Drag / Resize ---------- */
    startDrag(e){ this.placementState.dragging=true; const { cRect }=this.getRects(); this.placementState.lastX=e.clientX - cRect.left; this.placementState.lastY=e.clientY - cRect.top; elCanvas.classList.add('dragging'); this.announce('🎯 Drag to move design'); },
    handleDrag(e){ if(!this.placementState.dragging) return; const { cRect, oRect }=this.getRects(); const curX=e.clientX-cRect.left, curY=e.clientY-cRect.top; const dx=curX-this.placementState.lastX, dy=curY-this.placementState.lastY; const dxPct=(dx/cRect.width)*100, dyPct=(dy/cRect.height)*100; const widthPct=this.placementState.widthPct; const heightPct=(oRect.height/cRect.height)*100; const minL=0, maxL=100-widthPct, minT=0, maxT=100-heightPct; this.placementState.leftPct=Math.max(minL,Math.min(maxL,this.placementState.leftPct+dxPct)); this.placementState.topPct=Math.max(minT,Math.min(maxT,this.placementState.topPct+dyPct)); this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); this.placementState.lastX=curX; this.placementState.lastY=curY; },
    endDrag(){ if(this.placementState.dragging){ this.placementState.dragging=false; elCanvas.classList.remove('dragging'); } },

    startResize(e,dir){ this.placementState.resizing=true; this.placementState.resizeDirection=dir; this.placementState.lastX=e.clientX; this.placementState.lastY=e.clientY; },
    handleResizeDrag(e){ if(!this.placementState.resizing) return; const dx=e.clientX-this.placementState.lastX; const dy=e.clientY-this.placementState.lastY; let inc=0; switch(this.placementState.resizeDirection){ case 'nw': inc=(dx+dy)*0.3; break; case 'ne': inc=(dx-dy)*0.3; break; case 'sw': inc=(-dx+dy)*0.3; break; case 'se': inc=(dx+dy)*0.3; break; case 'n': case 's': inc=dy*0.3; break; case 'w': case 'e': inc=dx*0.3; break; default: inc=(dx+dy)*0.3; }
      const nw = Math.max(10, Math.min(100, this.placementState.widthPct + inc)); this.placementState.widthPct = nw; this.updatePlacementDisplay(); this.updateDesignPosition(); this.savePresetForCurrent(); const widthS = $(`#nt-width-{{ section.id }}`); if(widthS) widthS.value=nw; this.placementState.lastX=e.clientX; this.placementState.lastY=e.clientY; },
    endResize(){ if(this.placementState.resizing){ this.placementState.resizing=false; } },

    /* ---------- Uploads ---------- */
    handleFileUpload(file){
      const allowedTypes=['image/png','image/jpeg','image/jpg','image/svg+xml','application/pdf'];
      const ext = (file.name.split('.').pop()||'').toLowerCase();
      const isRenderable = allowedTypes.includes(file.type) || ['png','jpg','jpeg','svg','pdf'].includes(ext);
      const max=10*1024*1024; if(file.size>max){ this.announce('❌ File too large (max 10MB).'); return; }
      if(!isRenderable && !['ai','psd'].includes(ext)){ this.announce('❌ Unsupported file type.'); return; }

      // Preview
      if(isRenderable){ const reader=new FileReader(); reader.onload=(ev)=> this.previewUploadedDesign(ev.target.result, file.name); reader.readAsDataURL(file); }
      else { this.announce('ℹ️ .AI/.PSD cannot preview here, but you can store them after add-to-cart.'); }
    },
    previewUploadedDesign(dataUrl, name){
      const overlay=document.createElement('div'); overlay.style.cssText='position:fixed;inset:0;background:rgba(0,0,0,.8);backdrop-filter:blur(8px);z-index:10000;display:flex;align-items:center;justify-content:center;opacity:0;transition:opacity .25s';
      const card=document.createElement('div'); card.style.cssText='background:#fff;border-radius:20px;padding:28px;max-width:640px;width:90vw;text-align:center;transform:scale(.96);transition:transform .25s;box-shadow:0 20px 60px rgba(0,0,0,.35)';
      card.innerHTML=`<h3 style="margin:0 0 12px;font-size:22px;font-weight:800;color:#374151">📁 Design Preview</h3>
      <div style="width:320px;height:320px;margin:0 auto 14px;border:2px dashed #e5e7eb;border-radius:12px;display:flex;align-items:center;justify-content:center;overflow:hidden;">
        <img src="${dataUrl}" alt="Uploaded design" style="max-width:100%;max-height:100%;object-fit:contain;">
      </div>
      <p style="margin:0 0 16px;color:#6b7280"><strong>File:</strong> ${name}</p>
      <div style="display:flex;gap:10px;justify-content:center">
        <button id="apply-design-btn" class="nt-chip nt-chip--action">✨ Apply to Mockup</button>
        <button id="cancel-upload-btn" class="nt-chip">Cancel</button>
      </div>`;
      overlay.append(card); document.body.append(overlay); requestAnimationFrame(()=>{ overlay.style.opacity='1'; card.style.transform='scale(1)'; });
      $('#apply-design-btn',overlay).addEventListener('click', ()=>{ this.applyUploadedDesign(dataUrl); close(); });
      $('#cancel-upload-btn',overlay).addEventListener('click', close);
      overlay.addEventListener('click',(e)=>{ if(e.target===overlay) close(); });
      function close(){ overlay.style.opacity='0'; setTimeout(()=> overlay.remove(), 250); }
    },
    applyUploadedDesign(src){
      const img = document.createElement('img'); img.src=src; img.style.cssText='max-width:100%;max-height:100%;object-fit:contain;filter:drop-shadow(0 2px 4px rgba(0,0,0,.1));pointer-events:none;';
      elText.style.display='none';
      // Remove previous preview image (if any)
      const prev = elOverlay.querySelector('img'); if(prev) prev.remove();
      elOverlay.append(img);
      $(`#nt-remove-{{ section.id }}`)?.style.setProperty('display','inline-block');
      this.announce('✨ Uploaded design applied!');
    },
    removeDesign(){ const prev = elOverlay.querySelector('img'); if(prev) prev.remove(); elText.style.display='block'; elText.textContent='Your Design Here'; this.announce('✅ Design removed'); $(`#nt-remove-{{ section.id }}`).style.display='none'; },

    /* ---------- Download ---------- */
    downloadComposite(){
      const ratio = Math.max(2, Math.min(4, Math.round(window.devicePixelRatio||2)));
      const size = 2000 * ratio; const canvas=document.createElement('canvas'); const ctx=canvas.getContext('2d'); canvas.width=size; canvas.height=size;
      const baseSrc = elBase.src; const overlayImg = elOverlay.querySelector('img');
      const { cRect, oRect } = this.getRects();
      const draw = (base)=>{
        ctx.drawImage(base, 0, 0, size, size);
        if(overlayImg && !overlayImg.src.startsWith('data:application/pdf')){
          const leftPct = (oRect.left - cRect.left) / cRect.width; const topPct = (oRect.top - cRect.top) / cRect.height; const widthPct = oRect.width / cRect.width; const heightPct = oRect.height / cRect.height;
          const x=size*leftPct, y=size*topPct, w=size*widthPct, h=size*heightPct; const rot=(this.placementState.rotateDeg||0)*Math.PI/180;
          const img=new Image(); img.crossOrigin='anonymous'; img.onload=()=>{ ctx.save(); ctx.translate(x+w/2,y+h/2); ctx.rotate(rot); ctx.drawImage(img, -w/2, -h/2, w, h); ctx.restore(); finish(); }; img.src=overlayImg.src;
        } else {
          // text fallback centered at overlay center
          const cx = size*((oRect.left-cRect.left+oRect.width/2)/cRect.width); const cy = size*((oRect.top-cRect.top+oRect.height/2)/cRect.height);
          ctx.save(); ctx.translate(cx,cy); ctx.rotate((this.placementState.rotateDeg||0)*Math.PI/180); ctx.font = `${this.designState.fontSize*ratio*2}px ${this.designState.fontFamily}`; ctx.fillStyle=this.designState.textColor; ctx.textAlign='center'; ctx.textBaseline='middle'; ctx.fillText(this.designState.text,0,0); ctx.restore(); finish();
        }
      };
      const finish = ()=> canvas.toBlob((blob)=>{ const a=document.createElement('a'); a.download=`mockup_${this.state.view}_${this.state.color}.png`; a.href=URL.createObjectURL(blob); a.click(); setTimeout(()=>URL.revokeObjectURL(a.href),1500); }, 'image/png', .92);
      const base=new Image(); base.crossOrigin='anonymous'; base.onload=()=>draw(base); base.src=baseSrc;
    },

    /* ---------- Variant sync (optional) ---------- */
    setupVariantSync(){
      document.addEventListener('variant:changed', (e)=>{
        const v=e.detail?.variant; if(!v) return;
        const title=(v.title||'').toLowerCase(); const map={white:'white',black:'black',pink:'pink',blue:'blue'};
        for(const k in map){ if(title.includes(k)){ this.state.color=map[k]; const colorBtns=$$('.nt-btn--color', elRoot); colorBtns.forEach(b=> b.classList.toggle('is-active', b.dataset.color===this.state.color)); this.updateBase(); break; } }
      });
    },

    /* ---------- Messaging ---------- */
    announce(msg){ const live=$(`#nt-live-{{ section.id }}`); if(live) live.textContent=msg; const toast=document.createElement('div'); Object.assign(toast.style,{ position:'fixed', top:'20px', right:'20px', background:'#111827', color:'#fff', padding:'10px 14px', borderRadius:'8px', fontSize:'14px', fontWeight:'600', zIndex:'10000', boxShadow:'0 4px 16px rgba(0,0,0,.2)', transform:'translateX(120%)', transition:'transform .25s' }); toast.textContent=msg; document.body.append(toast); requestAnimationFrame(()=> toast.style.transform='translateX(0)'); setTimeout(()=>{ toast.style.transform='translateX(120%)'; setTimeout(()=> toast.remove(), 250); }, 2400); }
  };

  // Public customizer hook
  if (window.customizer?.updatePreview){ const orig=window.customizer.updatePreview.bind(window.customizer); window.customizer.updatePreview=()=>{ orig(); setTimeout(()=>{ mockup.loadFromCustomizer(); mockup.updateDesign(); }, 80); } }

  mockup.init();
});
</script>

{% schema %}
{
  "name": "Interactive Mockup",
  "class": "section-interactive-mockup-clean",
  "settings": [
    { "type": "header", "content": "🖼 Base T-shirt Mockup" },
    { "type": "image_picker", "id": "base_mockup", "label": "Base T-shirt Image", "info": "Recommended size: 1000x1000px or larger." },
    { "type": "header", "content": "📐 Design Overlay Settings" },
    { "type": "range", "id": "overlay_top", "min": 0, "max": 90, "step": 1, "unit": "%", "label": "Top Position", "default": 45 },
    { "type": "range", "id": "overlay_left", "min": 0, "max": 90, "step": 1, "unit": "%", "label": "Left Position", "default": 25 },
    { "type": "range", "id": "overlay_width", "min": 10, "max": 100, "step": 1, "unit": "%", "label": "Design Width", "default": 60 },
    { "type": "range", "id": "overlay_rotate", "min": -45, "max": 45, "step": 1, "unit": "°", "label": "Design Rotation", "default": 0 },
    { "type": "header", "content": "⚙️ Options" },
    { "type": "checkbox", "id": "allow_download", "label": "Enable Download Feature", "default": true },
    { "type": "range", "id": "padding_top", "min": 0, "max": 100, "step": 4, "unit": "px", "label": "Padding Top", "default": 40 },
    { "type": "range", "id": "padding_bottom", "min": 0, "max": 100, "step": 4, "unit": "px", "label": "Padding Bottom", "default": 40 }
  ],
  "presets": [{ "name": "Interactive Mockup (Cleaned)" }]
}
{% endschema %}
