<section class="gamified-discovery" id="discovery-{{ section.id }}">
  <!-- Animated Background -->
  <div class="discovery-bg">
    <div class="bg-particles"></div>
    <div class="bg-waves"></div>
  </div>

  <!-- Discovery Game Container -->
  <div class="discovery-container">
    <!-- Game Header -->
    <div class="game-header">
      <div class="game-title">
        <h2>üéØ Style Discovery Challenge</h2>
        <p>Find your perfect match and unlock exclusive deals!</p>
      </div>
      <div class="game-stats">
        <div class="stat-item">
          <span class="stat-number" id="score">0</span>
          <span class="stat-label">Points</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="streak">0</span>
          <span class="stat-label">Streak</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="level">1</span>
          <span class="stat-label">Level</span>
        </div>
      </div>
    </div>

    <!-- Interactive Product Swiper -->
    <div class="product-swiper-container">
      <div class="swiper-wrapper" id="product-swiper">
        <!-- Products will be dynamically loaded here -->
      </div>
      
      <!-- Swipe Instructions -->
      <div class="swipe-instructions">
        <div class="instruction-item">
          <span class="icon">üëà</span>
          <span class="text">Swipe Left to Skip</span>
        </div>
        <div class="instruction-item">
          <span class="icon">‚ù§Ô∏è</span>
          <span class="text">Tap to Like</span>
        </div>
        <div class="instruction-item">
          <span class="icon">üëâ</span>
          <span class="text">Swipe Right to Love</span>
        </div>
      </div>
    </div>

    <!-- Progress and Rewards -->
    <div class="progress-section">
      <div class="progress-bar-container">
        <div class="progress-bar">
          <div class="progress-fill" id="progress-fill"></div>
        </div>
        <div class="progress-text">
          <span id="progress-text">Keep swiping to unlock rewards!</span>
        </div>
      </div>
      
      <!-- Rewards Display -->
      <div class="rewards-container" id="rewards-container">
        <div class="reward-item locked" data-level="1">
          <div class="reward-icon">üéÅ</div>
          <div class="reward-text">5% Off</div>
        </div>
        <div class="reward-item locked" data-level="2">
          <div class="reward-icon">üéâ</div>
          <div class="reward-text">10% Off</div>
        </div>
        <div class="reward-item locked" data-level="3">
          <div class="reward-icon">üíé</div>
          <div class="reward-text">Free Shipping</div>
        </div>
        <div class="reward-item locked" data-level="4">
          <div class="reward-icon">üëë</div>
          <div class="reward-text">VIP Access</div>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons">
      <button class="action-btn skip-btn" id="skip-btn">
        <span class="btn-icon">üëà</span>
        <span class="btn-text">Skip</span>
      </button>
      <button class="action-btn like-btn" id="like-btn">
        <span class="btn-icon">‚ù§Ô∏è</span>
        <span class="btn-text">Like</span>
      </button>
      <button class="action-btn love-btn" id="love-btn">
        <span class="btn-icon">üíï</span>
        <span class="btn-text">Love</span>
      </button>
    </div>

    <!-- Results Modal -->
    <div class="results-modal" id="results-modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>üéâ Amazing Taste!</h3>
          <button class="close-modal" id="close-modal">√ó</button>
        </div>
        <div class="modal-body">
          <div class="match-percentage" id="match-percentage">85%</div>
          <p class="match-text">You have excellent style! Here are your perfect matches:</p>
          <div class="matched-products" id="matched-products">
            <!-- Matched products will be displayed here -->
          </div>
          <div class="modal-actions">
            <button class="btn-primary" id="view-matches">View All Matches</button>
            <button class="btn-secondary" id="continue-shopping">Continue Shopping</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
/* Gamified Discovery Styles */
.gamified-discovery {
  position: relative;
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 40px 20px;
  overflow: hidden;
}

/* Animated Background */
.discovery-bg {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  z-index: 1;
}

.bg-particles {
  position: absolute;
  width: 100%;
  height: 100%;
  background-image: 
    radial-gradient(2px 2px at 20px 30px, rgba(255,255,255,0.3), transparent),
    radial-gradient(2px 2px at 40px 70px, rgba(39,225,193,0.4), transparent),
    radial-gradient(1px 1px at 90px 40px, rgba(255,79,163,0.3), transparent);
  background-repeat: repeat;
  background-size: 200px 200px;
  animation: particleFloat 20s linear infinite;
}

.bg-waves {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100px;
  background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));
  border-radius: 50% 50% 0 0;
  animation: wave 3s ease-in-out infinite;
}

@keyframes particleFloat {
  0% { transform: translateY(0px); }
  100% { transform: translateY(-200px); }
}

@keyframes wave {
  0%, 100% { transform: scaleX(1); }
  50% { transform: scaleX(1.1); }
}

/* Discovery Container */
.discovery-container {
  position: relative;
  z-index: 2;
  max-width: 600px;
  margin: 0 auto;
}

/* Game Header */
.game-header {
  text-align: center;
  margin-bottom: 40px;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 30px;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.game-title h2 {
  font-family: 'Bebas Neue', sans-serif;
  font-size: 36px;
  margin: 0 0 10px 0;
  color: white;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.game-title p {
  color: rgba(255, 255, 255, 0.8);
  font-size: 16px;
  margin: 0 0 20px 0;
}

.game-stats {
  display: flex;
  justify-content: center;
  gap: 30px;
}

.stat-item {
  text-align: center;
}

.stat-number {
  display: block;
  font-size: 24px;
  font-weight: bold;
  color: #27e1c1;
  text-shadow: 0 0 10px rgba(39, 225, 193, 0.5);
}

.stat-label {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.7);
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* Product Swiper */
.product-swiper-container {
  position: relative;
  margin-bottom: 40px;
}

.swiper-wrapper {
  position: relative;
  width: 100%;
  height: 500px;
  border-radius: 20px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
}

.product-card {
  position: absolute;
  width: 100%;
  height: 100%;
  background: white;
  border-radius: 20px;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: grab;
  user-select: none;
}

.product-card:active {
  cursor: grabbing;
}

.product-card.dragging {
  transition: none;
}

.product-image {
  width: 100%;
  height: 60%;
  object-fit: cover;
  background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
}

.product-info {
  padding: 20px;
  height: 40%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.product-title {
  font-size: 20px;
  font-weight: 600;
  margin: 0 0 8px 0;
  color: #1e293b;
}

.product-price {
  font-size: 18px;
  font-weight: 700;
  color: #dc2626;
  margin: 0 0 10px 0;
}

.product-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
}

.tag {
  background: linear-gradient(45deg, #27e1c1, #ff4fa3);
  color: white;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
}

/* Swipe Instructions */
.swipe-instructions {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
  padding: 0 20px;
}

.instruction-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  color: rgba(255, 255, 255, 0.8);
  font-size: 14px;
}

.instruction-item .icon {
  font-size: 24px;
  animation: bounce 2s infinite;
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-10px); }
  60% { transform: translateY(-5px); }
}

/* Progress Section */
.progress-section {
  margin-bottom: 30px;
}

.progress-bar-container {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 15px;
  padding: 20px;
  margin-bottom: 20px;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.progress-bar {
  width: 100%;
  height: 8px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 10px;
  overflow: hidden;
  margin-bottom: 10px;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(45deg, #27e1c1, #ff4fa3);
  border-radius: 10px;
  width: 0%;
  transition: width 0.5s ease;
  box-shadow: 0 0 20px rgba(39, 225, 193, 0.5);
}

.progress-text {
  text-align: center;
  color: rgba(255, 255, 255, 0.9);
  font-size: 14px;
  margin: 0;
}

/* Rewards */
.rewards-container {
  display: flex;
  justify-content: space-between;
  gap: 10px;
}

.reward-item {
  flex: 1;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 15px 10px;
  text-align: center;
  border: 2px solid rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
}

.reward-item.unlocked {
  border-color: #27e1c1;
  background: rgba(39, 225, 193, 0.2);
  box-shadow: 0 0 20px rgba(39, 225, 193, 0.3);
}

.reward-item.locked {
  opacity: 0.5;
  filter: grayscale(50%);
}

.reward-icon {
  font-size: 24px;
  margin-bottom: 8px;
}

.reward-text {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.9);
  font-weight: 500;
}

/* Action Buttons */
.action-buttons {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-bottom: 30px;
}

.action-btn {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  padding: 15px 20px;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 2px solid rgba(255, 255, 255, 0.2);
  border-radius: 15px;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 80px;
}

.action-btn:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateY(-2px);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.skip-btn:hover {
  border-color: #ef4444;
  background: rgba(239, 68, 68, 0.2);
}

.like-btn:hover {
  border-color: #3b82f6;
  background: rgba(59, 130, 246, 0.2);
}

.love-btn:hover {
  border-color: #ff4fa3;
  background: rgba(255, 79, 163, 0.2);
}

.btn-icon {
  font-size: 24px;
}

.btn-text {
  font-size: 12px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* Results Modal */
.results-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.results-modal.active {
  opacity: 1;
  visibility: visible;
}

.modal-content {
  background: white;
  border-radius: 20px;
  max-width: 500px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.results-modal.active .modal-content {
  transform: scale(1);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 30px;
  border-bottom: 1px solid #e5e7eb;
}

.modal-header h3 {
  margin: 0;
  font-size: 24px;
  color: #1e293b;
}

.close-modal {
  background: none;
  border: none;
  font-size: 24px;
  color: #6b7280;
  cursor: pointer;
  padding: 5px;
  border-radius: 50%;
  transition: all 0.2s ease;
}

.close-modal:hover {
  background: #f3f4f6;
  color: #374151;
}

.modal-body {
  padding: 30px;
  text-align: center;
}

.match-percentage {
  font-size: 48px;
  font-weight: bold;
  background: linear-gradient(45deg, #27e1c1, #ff4fa3);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 20px;
}

.match-text {
  font-size: 16px;
  color: #64748b;
  margin-bottom: 30px;
}

.matched-products {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 15px;
  margin-bottom: 30px;
}

.matched-product {
  background: #f8fafc;
  border-radius: 12px;
  padding: 15px;
  text-align: center;
  border: 2px solid #e2e8f0;
  transition: all 0.3s ease;
}

.matched-product:hover {
  border-color: #27e1c1;
  transform: translateY(-2px);
}

.matched-product img {
  width: 100%;
  height: 80px;
  object-fit: cover;
  border-radius: 8px;
  margin-bottom: 10px;
}

.matched-product-title {
  font-size: 12px;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 5px;
}

.matched-product-price {
  font-size: 14px;
  font-weight: 700;
  color: #dc2626;
}

.modal-actions {
  display: flex;
  gap: 15px;
  justify-content: center;
}

.btn-primary, .btn-secondary {
  padding: 12px 24px;
  border-radius: 10px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  border: none;
}

.btn-primary {
  background: linear-gradient(45deg, #27e1c1, #ff4fa3);
  color: white;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 30px rgba(39, 225, 193, 0.3);
}

.btn-secondary {
  background: #f3f4f6;
  color: #374151;
  border: 2px solid #e5e7eb;
}

.btn-secondary:hover {
  background: #e5e7eb;
  transform: translateY(-2px);
}

/* Responsive Design */
@media (max-width: 768px) {
  .game-stats {
    gap: 20px;
  }
  
  .action-buttons {
    gap: 15px;
  }
  
  .action-btn {
    padding: 12px 15px;
    min-width: 70px;
  }
  
  .rewards-container {
    flex-direction: column;
    gap: 10px;
  }
  
  .modal-actions {
    flex-direction: column;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Game state
  let currentScore = 0;
  let currentStreak = 0;
  let currentLevel = 1;
  let likedProducts = [];
  let currentProductIndex = 0;
  
  // Sample products data (replace with your actual products)
  const products = [
    {
      id: 1,
      title: "Vintage Miami Tee",
      price: "$24.99",
      image: "https://via.placeholder.com/300x400/27e1c1/ffffff?text=Vintage+Miami",
      tags: ["Vintage", "Miami", "Retro"]
    },
    {
      id: 2,
      title: "Neon Sunset Hoodie",
      price: "$49.99",
      image: "https://via.placeholder.com/300x400/ff4fa3/ffffff?text=Neon+Sunset",
      tags: ["Neon", "Sunset", "Hoodie"]
    },
    {
      id: 3,
      title: "Ocean Breeze Tank",
      price: "$19.99",
      image: "https://via.placeholder.com/300x400/3b82f6/ffffff?text=Ocean+Breeze",
      tags: ["Ocean", "Breeze", "Tank"]
    },
    {
      id: 4,
      title: "Retro Wave Shirt",
      price: "$29.99",
      image: "https://via.placeholder.com/300x400/10b981/ffffff?text=Retro+Wave",
      tags: ["Retro", "Wave", "Shirt"]
    },
    {
      id: 5,
      title: "Electric Dreams Jacket",
      price: "$79.99",
      image: "https://via.placeholder.com/300x400/8b5cf6/ffffff?text=Electric+Dreams",
      tags: ["Electric", "Dreams", "Jacket"]
    }
  ];
  
  // DOM elements
  const swiperWrapper = document.getElementById('product-swiper');
  const scoreElement = document.getElementById('score');
  const streakElement = document.getElementById('streak');
  const levelElement = document.getElementById('level');
  const progressFill = document.getElementById('progress-fill');
  const progressText = document.getElementById('progress-text');
  const skipBtn = document.getElementById('skip-btn');
  const likeBtn = document.getElementById('like-btn');
  const loveBtn = document.getElementById('love-btn');
  const resultsModal = document.getElementById('results-modal');
  const closeModal = document.getElementById('close-modal');
  
  // Initialize game
  function initGame() {
    loadProduct(0);
    updateStats();
    updateProgress();
  }
  
  // Load product into swiper
  function loadProduct(index) {
    if (index >= products.length) {
      showResults();
      return;
    }
    
    const product = products[index];
    const productCard = createProductCard(product);
    
    // Clear previous cards
    swiperWrapper.innerHTML = '';
    swiperWrapper.appendChild(productCard);
    
    // Add swipe functionality
    addSwipeListeners(productCard);
  }
  
  // Create product card element
  function createProductCard(product) {
    const card = document.createElement('div');
    card.className = 'product-card';
    card.dataset.productId = product.id;
    
    card.innerHTML = `
      <img src="${product.image}" alt="${product.title}" class="product-image">
      <div class="product-info">
        <h3 class="product-title">${product.title}</h3>
        <div class="product-price">${product.price}</div>
        <div class="product-tags">
          ${product.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
        </div>
      </div>
    `;
    
    return card;
  }
  
  // Add swipe functionality
  function addSwipeListeners(card) {
    let startX = 0;
    let startY = 0;
    let currentX = 0;
    let currentY = 0;
    let isDragging = false;
    
    card.addEventListener('mousedown', handleStart);
    card.addEventListener('touchstart', handleStart);
    
    function handleStart(e) {
      isDragging = true;
      card.classList.add('dragging');
      
      const clientX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
      const clientY = e.type === 'mousedown' ? e.clientY : e.touches[0].clientY;
      
      startX = clientX;
      startY = clientY;
      
      document.addEventListener('mousemove', handleMove);
      document.addEventListener('touchmove', handleMove);
      document.addEventListener('mouseup', handleEnd);
      document.addEventListener('touchend', handleEnd);
    }
    
    function handleMove(e) {
      if (!isDragging) return;
      
      e.preventDefault();
      
      const clientX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
      const clientY = e.type === 'mousemove' ? e.clientY : e.touches[0].clientY;
      
      currentX = clientX - startX;
      currentY = clientY - startY;
      
      const rotation = currentX * 0.1;
      const opacity = 1 - Math.abs(currentX) / 300;
      
      card.style.transform = `translateX(${currentX}px) translateY(${currentY}px) rotate(${rotation}deg)`;
      card.style.opacity = opacity;
      
      // Show action feedback
      if (currentX > 50) {
        card.style.background = 'linear-gradient(135deg, rgba(39, 225, 193, 0.1), rgba(39, 225, 193, 0.2))';
      } else if (currentX < -50) {
        card.style.background = 'linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.2))';
      } else {
        card.style.background = 'white';
      }
    }
    
    function handleEnd() {
      if (!isDragging) return;
      
      isDragging = false;
      card.classList.remove('dragging');
      
      document.removeEventListener('mousemove', handleMove);
      document.removeEventListener('touchmove', handleMove);
      document.removeEventListener('mouseup', handleEnd);
      document.removeEventListener('touchend', handleEnd);
      
      const threshold = 100;
      
      if (currentX > threshold) {
        // Swiped right - Love
        handleAction('love');
      } else if (currentX < -threshold) {
        // Swiped left - Skip
        handleAction('skip');
      } else {
        // Return to center
        card.style.transform = 'translateX(0) translateY(0) rotate(0deg)';
        card.style.opacity = '1';
        card.style.background = 'white';
      }
    }
  }
  
  // Handle user actions
  function handleAction(action) {
    const currentProduct = products[currentProductIndex];
    
    if (action === 'like' || action === 'love') {
      likedProducts.push(currentProduct);
      currentScore += action === 'love' ? 20 : 10;
      currentStreak++;
      
      // Add particle effect
      createParticleEffect(action === 'love' ? 'üíï' : '‚ù§Ô∏è');
    } else {
      currentStreak = 0;
    }
    
    // Update stats
    updateStats();
    updateProgress();
    
    // Move to next product
    currentProductIndex++;
    setTimeout(() => {
      loadProduct(currentProductIndex);
    }, 300);
  }
  
  // Update game statistics
  function updateStats() {
    scoreElement.textContent = currentScore;
    streakElement.textContent = currentStreak;
    
    // Update level based on score
    const newLevel = Math.floor(currentScore / 100) + 1;
    if (newLevel > currentLevel) {
      currentLevel = newLevel;
      levelElement.textContent = currentLevel;
      unlockReward(currentLevel);
    }
  }
  
  // Update progress bar
  function updateProgress() {
    const progress = Math.min((currentScore / 200) * 100, 100);
    progressFill.style.width = progress + '%';
    
    if (progress >= 100) {
      progressText.textContent = 'üéâ You\'ve unlocked all rewards!';
    } else {
      const remaining = Math.ceil((200 - currentScore) / 10);
      progressText.textContent = `${remaining} more likes to unlock next reward!`;
    }
  }
  
  // Unlock reward
  function unlockReward(level) {
    const rewardItem = document.querySelector(`[data-level="${level}"]`);
    if (rewardItem) {
      rewardItem.classList.remove('locked');
      rewardItem.classList.add('unlocked');
      
      // Add celebration effect
      rewardItem.style.animation = 'bounceIn 0.6s ease';
    }
  }
  
  // Show results modal
  function showResults() {
    const matchPercentage = Math.min(85 + (likedProducts.length * 5), 100);
    document.getElementById('match-percentage').textContent = matchPercentage + '%';
    
    // Display matched products
    const matchedProductsContainer = document.getElementById('matched-products');
    matchedProductsContainer.innerHTML = likedProducts.map(product => `
      <div class="matched-product">
        <img src="${product.image}" alt="${product.title}">
        <div class="matched-product-title">${product.title}</div>
        <div class="matched-product-price">${product.price}</div>
      </div>
    `).join('');
    
    resultsModal.classList.add('active');
  }
  
  // Create particle effect
  function createParticleEffect(emoji) {
    const container = document.querySelector('.product-swiper-container');
    const rect = container.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    for (let i = 0; i < 8; i++) {
      const particle = document.createElement('div');
      particle.textContent = emoji;
      particle.style.position = 'fixed';
      particle.style.left = centerX + 'px';
      particle.style.top = centerY + 'px';
      particle.style.fontSize = '24px';
      particle.style.pointerEvents = 'none';
      particle.style.zIndex = '1000';
      
      document.body.appendChild(particle);
      
      const angle = (i / 8) * Math.PI * 2;
      const velocity = 50 + Math.random() * 30;
      const vx = Math.cos(angle) * velocity;
      const vy = Math.sin(angle) * velocity;
      
      particle.animate([
        { transform: 'translate(0, 0) scale(1)', opacity: 1 },
        { transform: `translate(${vx}px, ${vy}px) scale(0)`, opacity: 0 }
      ], {
        duration: 1000,
        easing: 'cubic-bezier(0.4, 0, 0.2, 1)'
      }).onfinish = () => {
        document.body.removeChild(particle);
      };
    }
  }
  
  // Event listeners
  skipBtn.addEventListener('click', () => handleAction('skip'));
  likeBtn.addEventListener('click', () => handleAction('like'));
  loveBtn.addEventListener('click', () => handleAction('love'));
  
  closeModal.addEventListener('click', () => {
    resultsModal.classList.remove('active');
  });
  
  document.getElementById('view-matches').addEventListener('click', () => {
    // Navigate to liked products page
    console.log('Navigate to matches:', likedProducts);
    resultsModal.classList.remove('active');
  });
  
  document.getElementById('continue-shopping').addEventListener('click', () => {
    resultsModal.classList.remove('active');
    // Reset game or navigate to shop
    location.reload();
  });
  
  // Initialize the game
  initGame();
});
</script>

{% schema %}
{
  "name": "Gamified Discovery",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Game Title",
      "default": "Style Discovery Challenge"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Game Subtitle",
      "default": "Find your perfect match and unlock exclusive deals!"
    }
  ],
  "presets": [
    {
      "name": "Gamified Discovery"
    }
  ]
}
{% endschema %}

