
<section id="collection-{{ collection.id }}" class="container" style="padding: 28px 0;">
  <h1 style="margin-top:0; font-family:'Bebas Neue', sans-serif; font-size:42px;">{{ collection.title }}</h1>
  {% if collection.description != blank %}<p style="opacity:.85;">{{ collection.description }}</p>{% endif %}
  <div class="grid grid--3">
    {% for product in collection.products %}
      <article class="product-card enhanced-card" data-product-id="{{ product.id }}">
        <div class="card-glow"></div>
        <div class="card-shine"></div>
        <a href="{{ product.url }}" class="card-link">
          <div class="image-container">
            <img id="ProductImage-{{ product.id }}" class="product-card__img"
                 src="{{ product.featured_image | image_url: width: 720 }}"
                 alt="{{ product.title | escape }}">
            <div class="image-overlay">
              <div class="quick-view-btn">Quick View</div>
            </div>
          </div>
        </a>

        <div class="product-card__body">
          <h3 style="margin:0; font-size:1.05rem;">{{ product.title }}</h3>

          <!-- optional badge -->
          {% if product.compare_at_price_max > product.price_min %}
            <small class="badge">On sale</small>
          {% endif %}

          <!-- price at bottom-left -->
          <div class="product-card__price">
            {% if product.compare_at_price_max > product.price_min %}
              <span class="price price--sale" data-product-price>{{ product.price_min | money }}</span>
              <span class="price price--compare" style="text-decoration:line-through;">
                {{ product.compare_at_price_max | money }}
              </span>
            {% else %}
              <span class="price" data-product-price>{{ product.price_min | money }}</span>
            {% endif %}
          </div>

          {%- comment -%} Full swatch functionality for collection page - same as homepage {%- endcomment -%}
          {%- assign color_index = 0 -%}
          {%- for opt in product.options -%}
            {%- assign opt_lc = opt | downcase -%}
            {%- if opt_lc == 'color' -%}
              {%- assign color_index = forloop.index0 -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}

          {%- if product.options_with_values[color_index].values.size > 1 -%}
            <div class="swatch-block" data-swatch-group data-option-index="{{ color_index }}" aria-label="Color">
              <div class="vp-legend">Color</div>
              <div class="swatch-list">
                {%- assign seen = '' -%}
                {%- for v in product.options_with_values[color_index].values -%}
                  {%- assign key = v | downcase | strip -%}
                  {%- if seen contains key -%}{% continue %}{%- endif -%}
                  {%- assign seen = seen | append: key | append: ',' -%}

                  {%- comment -%} Find best matching variant for this value {%- endcomment -%}
                  {%- assign match = nil -%}
                  {%- for variant in product.variants -%}
                    {%- if variant.options[color_index] == v -%}
                      {%- assign ok = true -%}
                      {%- for i in (0..product.options.size-1) -%}
                        {%- if i != color_index -%}
                          {%- if product.selected_or_first_available_variant and product.selected_or_first_available_variant.options[i] and variant.options[i] != product.selected_or_first_available_variant.options[i] -%}
                            {%- assign ok = false -%}
                          {%- endif -%}
                        {%- endif -%}
                      {%- endfor -%}
                      {%- if ok -%}{% assign match = variant %}{% break %}{%- endif -%}
                    {%- endif -%}
                  {%- endfor -%}
                  {%- if match == nil -%}
                    {%- for variant in product.variants -%}
                      {%- if variant.options[color_index] == v -%}{% assign match = variant %}{% break %}{%- endif -%}
                    {%- endfor -%}
                  {%- endif -%}

                  {%- assign img = match.featured_media.preview_image | default: product.featured_image -%}
                  {%- assign media_id = match.featured_media.id | default: '' -%}
                  {%- assign price_str = match.price | money -%}

                  <button
                    type="button"
                    class="swatch"
                    data-swatch
                    data-option-index="{{ color_index }}"
                    data-value="{{ v | escape }}"
                    data-variant-id="{{ match.id }}"
                    data-available="{{ match.available }}"
                    {% if media_id != blank %}data-media-id="{{ media_id }}"{% endif %}
                    data-img="{{ img | image_url: width: 800 }}"
                    data-price="{{ price_str }}"
                    aria-label="Color: {{ v }}"
                    title="{{ v }}"
                  >
                    <span class="swatch__chip" data-swatch-chip
                          style="background-image:url('{{ img | image_url: width: 80 }}');"></span>
                    <span class="swatch__label">{{ v }}</span>
                  </button>
                {%- endfor -%}
              </div>
            </div>
          {%- endif -%}
        </div>
      </article>
    {% endfor %}
  </div>
</section>

<style>
  /* Enhanced Collection Page Styling */
  #collection-{{ collection.id }} .enhanced-card {
    position: relative;
    background: white;
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    border: 1px solid rgba(0,0,0,0.05);
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0,0,0,0.1), 0 0 0 1px rgba(0,0,0,0.05);
  }
  
  /* Card Glow Effect */
  #collection-{{ collection.id }} .card-glow {
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, rgba(0,0,0,0.05), rgba(0,0,0,0.1));
    border-radius: 18px;
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: -1;
    filter: blur(8px);
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .card-glow {
    opacity: 0.3;
  }
  
  /* Card Shine Effect */
  #collection-{{ collection.id }} .card-shine {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.6s ease;
    z-index: 1;
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .card-shine {
    left: 100%;
  }
  
  /* Image Container */
  #collection-{{ collection.id }} .image-container {
    position: relative;
    overflow: hidden;
    border-radius: 16px 16px 0 0;
  }
  
  #collection-{{ collection.id }} .product-card__img {
    width: 100%;
    height: auto;
    object-fit: contain;
    aspect-ratio: unset !important;
    transition: transform 0.4s ease;
    display: block;
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .product-card__img {
    transform: scale(1.1);
  }
  
  /* Image Overlay */
  #collection-{{ collection.id }} .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(0,0,0,0.3), rgba(0,0,0,0.5));
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .image-overlay {
    opacity: 1;
  }
  
  /* Quick View Button */
  #collection-{{ collection.id }} .quick-view-btn {
    background: white;
    color: #333;
    padding: 12px 24px;
    border-radius: 25px;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
  }
  
  #collection-{{ collection.id }} .quick-view-btn:hover {
    background: #f8f9fa;
    transform: translateY(-2px);
  }
  
  /* Product Card Body */
  #collection-{{ collection.id }} .product-card__body {
    padding: 20px;
    position: relative;
    z-index: 1;
  }
  
  #collection-{{ collection.id }} .product-card__body h3 {
    transition: color 0.3s ease;
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .product-card__body h3 {
    color: #333;
  }
  
  /* Swatch Enhancements */
  #collection-{{ collection.id }} .swatch-block {
    margin-top: 12px;
    transition: all 0.3s ease;
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .swatch-block {
    transform: translateY(-2px);
  }
  
  #collection-{{ collection.id }} .swatch {
    --size: 34px;
    transition: all 0.2s ease;
    border: 2px solid transparent;
    padding: 6px 8px 6px 6px;
    border-radius: 9999px;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }
  
  #collection-{{ collection.id }} .swatch:hover {
    transform: scale(1.1);
    border-color: #666;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }
  
  #collection-{{ collection.id }} .swatch__chip {
    width: var(--size);
    height: var(--size);
    border-radius: 9999px;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    border: 1px solid rgba(15,23,42,.15);
    display: inline-block;
  }
  
  #collection-{{ collection.id }} .swatch__label {
    font-size: 0.86rem;
    font-weight: 700;
  }
  
  /* Price Animation */
  #collection-{{ collection.id }} .product-card__price {
    transition: all 0.3s ease;
  }
  
  #collection-{{ collection.id }} .enhanced-card:hover .product-card__price {
    transform: translateX(4px);
  }
  
  /* Floating Animation */
  #collection-{{ collection.id }} .enhanced-card:nth-child(1) { animation-delay: 0.1s; }
  #collection-{{ collection.id }} .enhanced-card:nth-child(2) { animation-delay: 0.2s; }
  #collection-{{ collection.id }} .enhanced-card:nth-child(3) { animation-delay: 0.3s; }
  #collection-{{ collection.id }} .enhanced-card:nth-child(4) { animation-delay: 0.4s; }
  #collection-{{ collection.id }} .enhanced-card:nth-child(5) { animation-delay: 0.5s; }
  #collection-{{ collection.id }} .enhanced-card:nth-child(6) { animation-delay: 0.6s; }
  
  #collection-{{ collection.id }} .enhanced-card {
    animation: cardFloat 6s ease-in-out infinite;
  }
  
  @keyframes cardFloat {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-3px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    #collection-{{ collection.id }} .enhanced-card:hover {
      transform: translateY(-4px) scale(1.01);
    }
    
    #collection-{{ collection.id }} .quick-view-btn {
      padding: 10px 20px;
      font-size: 12px;
    }
  }
</style>

<!-- Scoped price color override (red) -->
<style id="price-override-{{ collection.id }}">
  #collection-{{ collection.id }} .product-card__price .price {
    color:#e53935 !important;
  }
</style>


<script>
document.addEventListener('DOMContentLoaded', function() {
  
  const cards = document.querySelectorAll('#collection-{{ collection.id }} .enhanced-card');
  
  cards.forEach(card => {
    // Add magnetic effect
    card.addEventListener('mousemove', function(e) {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      const rotateX = (y - centerY) / 10;
      const rotateY = (centerX - x) / 10;
      
      card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(10px)`;
    });
    
    card.addEventListener('mouseleave', function() {
      card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0px)';
    });
    
    // Quick view functionality
    const quickViewBtn = card.querySelector('.quick-view-btn');
    if (quickViewBtn) {
      quickViewBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const productLink = card.querySelector('.card-link').href;
        window.open(productLink, '_blank');
      });
    }
  });
  
  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.animationPlayState = 'running';
        entry.target.classList.add('animate-in');
      }
    });
  }, observerOptions);
  
  cards.forEach(card => {
    card.style.animationPlayState = 'paused';
    observer.observe(card);
  });
  
  // Initialize swatches for collection page using the same logic as homepage
  console.log('Initializing swatches for collection page');
  
  // Use the same swatch initialization as the homepage
  const swatchGroups = document.querySelectorAll('#collection-{{ collection.id }} [data-swatch-group]');
  console.log('Found swatch groups:', swatchGroups.length);
  
  swatchGroups.forEach(group => {
    const swatches = group.querySelectorAll('.swatch');
    console.log('Found swatches in group:', swatches.length);
    
    swatches.forEach(swatch => {
      console.log('Adding click listener to:', swatch.querySelector('.swatch__label')?.textContent);
      
      swatch.addEventListener('click', function(evt) {
        console.log('[collection swatch] handleSwatchClick called');
        const btn = evt.currentTarget;
        const form = btn.closest('form');

        const optIndex  = parseInt(btn.getAttribute('data-option-index'), 10);
        const value     = btn.getAttribute('data-value');
        const variantId = btn.getAttribute('data-variant-id');
        const available = btn.getAttribute('data-available') === 'true';
        const mediaId   = btn.getAttribute('data-media-id') || null;
        const thumb     = btn.getAttribute('data-img') || null;
        const priceStr  = btn.getAttribute('data-price') || null;

        console.log('[collection swatch] Swatch data:', { value, variantId, available, thumb, priceStr, hasForm: !!form });

        // Handle collection page swatches (no form context)
        if (!form) {
          // Update price in the same product card
          const card = btn.closest('.product-card');
          if (card) {
            const priceEl = card.querySelector('[data-product-price]');
            if (priceEl && priceStr) priceEl.textContent = priceStr;
          }
        }

        // Swap image using the same logic as homepage
        if (thumb) {
          console.log('[collection swatch] Attempting to swap image:', thumb);
          if (mediaId) {
            console.log('[collection swatch] Has mediaId:', mediaId);
            const mediaEl = document.querySelector(`[data-media-id="${mediaId}"] img`) || document.getElementById('MainProductImage');
            if (mediaEl) {
              console.log('[collection swatch] Found media element, updating src');
              mediaEl.src = thumb;
            } else {
              console.log('[collection swatch] No media element found for mediaId:', mediaId, 'falling back to product card logic');
              // Fall back to product card logic when mediaId doesn't work
              const card = btn.closest('.product-card');
              if (card) {
                const cardImg = card.querySelector('img.product-card__img');
                if (cardImg) {
                  console.log('[collection swatch] Found product card image, updating src');
                  cardImg.src = thumb;
                } else {
                  console.log('[collection swatch] No product card image found, available images:', card.querySelectorAll('img'));
                }
              } else {
                console.log('[collection swatch] No product card found');
              }
            }
          } else {
            // For collection page product cards, find the image in the same card
            const card = btn.closest('.product-card');
            if (card) {
              const cardImg = card.querySelector('img.product-card__img');
              if (cardImg) {
                console.log('[collection swatch] Found product card image, updating src');
                cardImg.src = thumb;
              } else {
                console.log('[collection swatch] No product card image found, available images:', card.querySelectorAll('img'));
              }
            } else {
              console.log('[collection swatch] No product card found');
            }
          }
        }

        // Visual state - same as homepage
        const group = btn.closest('[data-swatch-group]');
        if (group) {
          // Remove selected state from all swatches in group
          group.querySelectorAll('.swatch').forEach(s => s.classList.remove('is-selected'));
          // Add selected state to clicked swatch
          btn.classList.add('is-selected');
        }
      });
    });
  });
});
</script>

{% schema %}
{
  "name": "Main collection",
  "settings": [],
  "presets": [{ "name": "Main collection" }]
}
{% endschema %}
