{% comment %}
  Wishlist Button Snippet
  Add this to product pages to allow users to save items to their wishlist
{% endcomment %}

<button 
  class="wishlist-btn {% if product.id %}wishlist-btn-{{ product.id }}{% endif %}" 
  data-product-id="{{ product.id }}"
  data-product-title="{{ product.title | escape }}"
  data-product-price="{{ product.price | money_without_currency }}"
  data-product-image="{% if product.featured_image %}{{ product.featured_image | img_url: '400x400' }}{% endif %}"
  data-product-url="{{ product.url }}"
  onclick="toggleWishlist(this)"
  title="Add to wishlist"
>
  <span class="wishlist-icon">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="heart-icon">
      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="heart-filled-icon" style="display: none;">
      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
    </svg>
  </span>
  <span class="wishlist-text">Add to Wishlist</span>
  <span class="wishlist-text-added" style="display: none;">Added to Wishlist</span>
</button>

<style>
  .wishlist-btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    background: transparent;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    color: #6b7280;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .wishlist-btn:hover {
    border-color: #ef4444;
    color: #ef4444;
    background: #fef2f2;
  }

  .wishlist-btn.added {
    border-color: #ef4444;
    color: #ef4444;
    background: #fef2f2;
  }

  .wishlist-btn.added .heart-icon {
    display: none;
  }

  .wishlist-btn.added .heart-filled-icon {
    display: block;
    color: #ef4444;
  }

  .wishlist-btn.added .wishlist-text {
    display: none;
  }

  .wishlist-btn.added .wishlist-text-added {
    display: block;
  }

  .wishlist-icon {
    position: relative;
    width: 20px;
    height: 20px;
  }

  .heart-icon,
  .heart-filled-icon {
    position: absolute;
    top: 0;
    left: 0;
    transition: all 0.2s ease;
  }

  .wishlist-btn.loading {
    pointer-events: none;
    opacity: 0.7;
  }

  .wishlist-btn.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 16px;
    height: 16px;
    margin: -8px 0 0 -8px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Dark mode support */
  [data-theme="dark"] .wishlist-btn {
    border-color: #374151;
    color: #9ca3af;
  }

  [data-theme="dark"] .wishlist-btn:hover {
    border-color: #ef4444;
    color: #ef4444;
    background: rgba(239, 68, 68, 0.1);
  }

  [data-theme="dark"] .wishlist-btn.added {
    border-color: #ef4444;
    color: #ef4444;
    background: rgba(239, 68, 68, 0.1);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .wishlist-btn {
      padding: 10px 16px;
      font-size: 13px;
    }
  }
</style>

<script>
// Global wishlist state
window.wishlistState = window.wishlistState || {
  items: new Set(),
  loading: false
};

// Initialize wishlist state on page load
document.addEventListener('DOMContentLoaded', async function() {
  await loadWishlistState();
  updateWishlistButtons();
});

async function loadWishlistState() {
  try {
    // Check if user is authenticated
    if (typeof window.supabaseClient === 'undefined') {
      console.log('⏳ Supabase client not available');
      return;
    }

    const { user, error } = await window.supabaseClient.getCurrentUser();
    if (error || !user) {
      // User not authenticated, clear wishlist state
      window.wishlistState.items.clear();
      return;
    }

    // Load user's wishlist
    const client = await window.supabaseClient.getClient();
    if (!client) return;

    const { data, error: wishlistError } = await client
      .from('wishlist')
      .select('shopify_product_id');

    if (wishlistError) {
      console.error('❌ Failed to load wishlist:', wishlistError);
      return;
    }

    // Update wishlist state
    window.wishlistState.items.clear();
    if (data) {
      data.forEach(item => {
        window.wishlistState.items.add(item.shopify_product_id);
      });
    }

  } catch (error) {
    console.error('❌ Failed to load wishlist state:', error);
  }
}

function updateWishlistButtons() {
  const buttons = document.querySelectorAll('.wishlist-btn');
  buttons.forEach(button => {
    const productId = button.dataset.productId;
    if (window.wishlistState.items.has(productId)) {
      button.classList.add('added');
    } else {
      button.classList.remove('added');
    }
  });
}

async function toggleWishlist(button) {
  if (window.wishlistState.loading) return;

  const productId = button.dataset.productId;
  const productTitle = button.dataset.productTitle;
  const productPrice = parseFloat(button.dataset.productPrice);
  const productImage = button.dataset.productImage;
  const productUrl = button.dataset.productUrl;

  // Check authentication
  if (typeof window.supabaseClient === 'undefined') {
    showMessage('Please sign in to use the wishlist', 'error');
    return;
  }

  const { user, error } = await window.supabaseClient.getCurrentUser();
  if (error || !user) {
    showMessage('Please sign in to use the wishlist', 'error');
    // Optionally redirect to auth section
    const authSection = document.querySelector('#supabase-auth-{{ section.id }}');
    if (authSection) {
      authSection.scrollIntoView({ behavior: 'smooth' });
    }
    return;
  }

  window.wishlistState.loading = true;
  button.classList.add('loading');

  try {
    const client = await window.supabaseClient.getClient();
    if (!client) {
      throw new Error('Supabase client not available');
    }

    const isInWishlist = window.wishlistState.items.has(productId);

    if (isInWishlist) {
      // Remove from wishlist
      const { error } = await client
        .from('wishlist')
        .delete()
        .eq('shopify_product_id', productId)
        .eq('user_id', user.id);

      if (error) {
        throw error;
      }

      window.wishlistState.items.delete(productId);
      button.classList.remove('added');
      showMessage('Removed from wishlist', 'success');

    } else {
      // Add to wishlist
      const { error } = await client
        .from('wishlist')
        .insert({
          shopify_product_id: productId,
          product_title: productTitle,
          product_price: productPrice,
          product_image_url: productImage,
          product_url: productUrl
        });

      if (error) {
        throw error;
      }

      window.wishlistState.items.add(productId);
      button.classList.add('added');
      showMessage('Added to wishlist', 'success');
    }

  } catch (error) {
    console.error('❌ Wishlist operation failed:', error);
    showMessage('Failed to update wishlist', 'error');
  } finally {
    window.wishlistState.loading = false;
    button.classList.remove('loading');
  }
}

function showMessage(message, type) {
  // Create temporary message element
  const messageDiv = document.createElement('div');
  messageDiv.className = `wishlist-message ${type}`;
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 20px;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    z-index: 1000;
    animation: slideInRight 0.3s ease;
    ${type === 'success' ? 'background: linear-gradient(135deg, #10b981, #059669);' : 'background: linear-gradient(135deg, #ef4444, #dc2626);'}
  `;
  messageDiv.textContent = message;
  
  document.body.appendChild(messageDiv);
  
  // Remove after 3 seconds
  setTimeout(() => {
    messageDiv.style.animation = 'slideOutRight 0.3s ease';
    setTimeout(() => {
      if (document.body.contains(messageDiv)) {
        document.body.removeChild(messageDiv);
      }
    }, 300);
  }, 3000);
}

// Listen for auth state changes
if (typeof window.supabaseClient !== 'undefined') {
  window.supabaseClient.getClient().then(client => {
    if (client) {
      client.auth.onAuthStateChange((event, session) => {
        if (session?.user) {
          loadWishlistState().then(() => {
            updateWishlistButtons();
          });
        } else {
          window.wishlistState.items.clear();
          updateWishlistButtons();
        }
      });
    }
  });
}

// CSS for animations
const style = document.createElement('style');
style.textContent = `
  @keyframes slideInRight {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  @keyframes slideOutRight {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
  }
`;
document.head.appendChild(style);
</script>



