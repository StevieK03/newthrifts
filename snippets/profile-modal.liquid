{%- comment -%}
Profile Modal Snippet - Rendered globally in theme.liquid
Contains the signup/login modal accessible from the header
{%- endcomment -%}

<script>console.log('🚀 Profile modal snippet rendering');</script>

<!-- Profile Modal (hidden by default) -->
<div class="profile-modal" id="profile-modal" style="display: none;">
  <div class="modal-overlay" id="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2>Create Your Profile</h2>
      <button class="modal-close" id="close-profile-modal">×</button>
    </div>
    
    <div class="modal-content">
      <div class="profile-forms">
        <!-- Sign Up Form -->
        <div class="signup-form" id="signup-form">
          <h3>Sign Up</h3>
          <form id="user-signup-form">
            <div class="form-group">
              <label for="signup-email">Email Address</label>
              <input type="email" id="signup-email" name="email" required autocomplete="email">
              <span class="error-message" id="signup-email-error"></span>
            </div>

            <div class="form-group">
              <label for="signup-password">Password</label>
              <input type="password" id="signup-password" name="password" required minlength="6" autocomplete="new-password">
              <span class="error-message" id="signup-password-error"></span>
            </div>

            <div class="form-group">
              <label for="signup-confirm-password">Confirm Password</label>
              <input type="password" id="signup-confirm-password" name="confirm-password" required autocomplete="new-password">
              <span class="error-message" id="signup-confirm-password-error"></span>
            </div>

            <div class="form-group">
              <label for="signup-full-name">Full Name</label>
              <input type="text" id="signup-full-name" name="full-name" required autocomplete="name">
              <span class="error-message" id="signup-full-name-error"></span>
            </div>

            <div class="form-group">
              <label for="signup-phone">Phone Number (Optional)</label>
              <input type="tel" id="signup-phone" name="phone" autocomplete="tel">
            </div>

            <div class="form-group">
              <label for="signup-birthday">Birthday (Optional)</label>
              <input type="date" id="signup-birthday" name="birthday" autocomplete="bday">
            </div>

            <div class="form-group">
              <label for="signup-preferences">Style Preferences</label>
              <div class="preference-tags">
                <label class="tag-label">
                  <input type="checkbox" name="preferences" value="casual">
                  <span>Casual</span>
                </label>
                <label class="tag-label">
                  <input type="checkbox" name="preferences" value="formal">
                  <span>Formal</span>
                </label>
                <label class="tag-label">
                  <input type="checkbox" name="preferences" value="streetwear">
                  <span>Streetwear</span>
                </label>
                <label class="tag-label">
                  <input type="checkbox" name="preferences" value="vintage">
                  <span>Vintage</span>
                </label>
                <label class="tag-label">
                  <input type="checkbox" name="preferences" value="sporty">
                  <span>Sporty</span>
                </label>
              </div>
            </div>

            <div class="form-group">
              <label for="signup-newsletter">
                <input type="checkbox" id="signup-newsletter" name="newsletter" checked>
                Subscribe to our newsletter for exclusive offers and style tips
              </label>
            </div>

            <button type="submit" class="btn btn-primary" id="signup-submit">
              <span class="btn-text">Create Profile</span>
              <span class="btn-loading" style="display: none;">Creating...</span>
            </button>
          </form>

          <div class="form-switch">
            <p>Already have an account? <a href="#" id="switch-to-login">Sign In</a></p>
          </div>
        </div>

        <!-- Sign In Form -->
        <div class="login-form" id="login-form" style="display: none;">
          <h3>Sign In</h3>
          <form id="user-login-form" action="/account/login" method="post">
            <input type="hidden" name="form_type" value="customer_login">
            <input type="hidden" name="utf8" value="✓">
            
            <div class="form-group">
              <label for="login-email">Email Address</label>
              <input type="email" id="login-email" name="customer[email]" required autocomplete="email">
              <span class="error-message" id="login-email-error"></span>
            </div>

            <div class="form-group">
              <label for="login-password">Password</label>
              <input type="password" id="login-password" name="customer[password]" required autocomplete="current-password">
              <span class="error-message" id="login-password-error"></span>
            </div>

            <div class="form-options">
              <label class="remember-me">
                <input type="checkbox" id="remember-me" name="remember-me">
                Remember me
              </label>
              <a href="#" class="forgot-password">Forgot password?</a>
            </div>

            <button type="submit" class="btn btn-primary" id="login-submit">
              <span class="btn-text">Sign In</span>
              <span class="btn-loading" style="display: none;">Signing in...</span>
            </button>
          </form>

          <div class="form-switch">
            <p>Don't have an account? <a href="#" id="switch-to-signup">Create Profile</a></p>
          </div>
        </div>
      </div>

      <!-- Success/Error Messages -->
      <div class="message-container">
        <div class="success-message" id="success-message" style="display: none;">
          <div class="message-icon">✓</div>
          <div class="message-text" id="success-text"></div>
        </div>
        <div class="error-message" id="error-message" style="display: none;">
          <div class="message-icon">✗</div>
          <div class="message-text" id="error-text"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Modal Styles - Force correct display */
.profile-modal {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  z-index: 9999 !important;
  display: none !important; /* Hidden by default - opens via JS only */
  align-items: center !important;
  justify-content: center !important;
  padding: 20px !important;
}

.modal-overlay {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  background: rgba(0, 0, 0, 0.8) !important;
  backdrop-filter: blur(5px) !important;
  z-index: 1 !important;
}

.modal-container {
  position: relative !important;
  max-width: 650px !important;
  max-height: 95vh !important;
  width: 90% !important;
  background: rgba(15, 23, 42, 0.95) !important;
  border-radius: 20px !important;
  backdrop-filter: blur(20px) !important;
  border: 1px solid rgba(39, 225, 193, 0.2) !important;
  overflow: hidden !important;
  animation: modalSlideIn 0.3s ease-out !important;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(39, 225, 193, 0.1) !important;
  display: flex !important;
  flex-direction: column !important;
  z-index: 2 !important;
  margin: auto !important;
}

/* Light mode modal */
[data-theme="light"] .modal-container {
  background: rgba(255, 255, 255, 0.98) !important;
  border: 1px solid rgba(39, 225, 193, 0.3) !important;
  box-shadow: 0 25px 50px rgba(39, 225, 193, 0.2), 0 0 0 1px rgba(39, 225, 193, 0.15) !important;
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem 2rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-header h2 {
  font-size: 1.5rem;
  font-weight: 700;
  color: #27e1c1;
  margin: 0;
}

.modal-close {
  background: none;
  border: none;
  color: rgba(255, 255, 255, 0.7);
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 50%;
  transition: all 0.3s ease;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-close:hover {
  background: rgba(255, 255, 255, 0.1);
  color: white;
}

.modal-content {
  flex: 1;
  overflow-y: auto;
  padding: 2rem;
  min-height: 0;
}

.profile-forms h3 {
  text-align: center;
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  color: var(--text-primary, #f8fafc);
}

[data-theme="light"] .profile-forms h3 {
  color: var(--text-primary, #1e293b);
}

.form-group {
  margin-bottom: 1.25rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: rgba(255, 255, 255, 0.9);
}

[data-theme="light"] .form-group label {
  color: rgba(30, 41, 59, 0.9);
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group input[type="tel"],
.form-group input[type="date"] {
  width: 100%;
  padding: 0.875rem 1.25rem;
  background: rgba(30, 41, 59, 0.6);
  border: 1px solid rgba(39, 225, 193, 0.3);
  border-radius: 12px;
  color: var(--text-primary, #f8fafc);
  font-size: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

/* Light mode form inputs */
[data-theme="light"] .form-group input[type="text"],
[data-theme="light"] .form-group input[type="email"],
[data-theme="light"] .form-group input[type="password"],
[data-theme="light"] .form-group input[type="tel"],
[data-theme="light"] .form-group input[type="date"] {
  background: #ffffff;
  border: 1px solid rgba(39, 225, 193, 0.3);
  color: var(--text-primary, #1e293b);
}

.form-group input:focus {
  outline: none;
  border-color: #27e1c1;
  box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.2), 0 4px 12px rgba(39, 225, 193, 0.1);
  transform: translateY(-1px);
}

/* Light mode focus states */
[data-theme="light"] .form-group input:focus {
  border-color: #27e1c1;
  box-shadow: 0 0 0 3px rgba(39, 225, 193, 0.2), 0 4px 12px rgba(39, 225, 193, 0.1);
}

.preference-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.4rem;
}

.tag-label {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: normal;
  margin-bottom: 0;
}

.tag-label:hover {
  background: rgba(39, 225, 193, 0.1);
  border-color: #27e1c1;
}

.tag-label input[type="checkbox"] {
  margin-right: 0.5rem;
  width: auto;
}

.tag-label input[type="checkbox"]:checked + span {
  color: #27e1c1;
  font-weight: 600;
}

.btn {
  width: 100%;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.btn-primary {
  background: #27e1c1 !important;
  background-image: none !important;
  color: #0f172a !important;
}

.btn-primary:hover {
  transform: translateY(-2px);
  background: #27e1c1 !important;
  box-shadow: 0 8px 25px rgba(39, 225, 193, 0.4) !important;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.form-options {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.remember-me {
  display: flex;
  align-items: center;
  font-weight: normal;
  margin-bottom: 0;
  color: rgba(255, 255, 255, 0.8);
}

[data-theme="light"] .remember-me {
  color: rgba(30, 41, 59, 0.8);
}

.remember-me input[type="checkbox"] {
  margin-right: 0.5rem;
  width: auto;
}

.forgot-password {
  color: #27e1c1;
  text-decoration: none;
  font-size: 0.9rem;
}

.forgot-password:hover {
  text-decoration: underline;
}

.form-switch {
  text-align: center;
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  color: rgba(255, 255, 255, 0.8);
}

[data-theme="light"] .form-switch {
  border-top: 1px solid rgba(30, 41, 59, 0.1);
  color: rgba(30, 41, 59, 0.8);
}

.form-switch a {
  color: #27e1c1;
  text-decoration: none;
  font-weight: 600;
}

.form-switch a:hover {
  text-decoration: underline;
}

.message-container {
  margin-top: 1.5rem;
}

.success-message,
.error-message {
  display: flex;
  align-items: center;
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1rem;
}

.success-message {
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.3);
  color: #22c55e;
}

.error-message {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  color: #ef4444;
}

.message-icon {
  font-size: 1.2rem;
  margin-right: 0.75rem;
  font-weight: bold;
}

@media (max-width: 768px) {
  .profile-modal {
    overflow-x: hidden !important;
    max-width: 100vw !important;
  }
  
  .modal-container {
    max-height: 98vh;
    width: calc(100% - 20px) !important;
    max-width: calc(100vw - 20px) !important;
    margin: 1rem auto !important;
    box-sizing: border-box !important;
  }
  
  .modal-header {
    padding: 1.25rem 1.5rem;
  }
  
  .modal-header h2 {
    font-size: 1.3rem;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  .modal-content {
    padding: 1.5rem;
    overflow-x: hidden;
  }
  
  .preference-tags {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .tag-label {
    justify-content: flex-start;
    width: 100%;
    box-sizing: border-box;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
}

@media (max-width: 480px) {
  .modal-container {
    max-height: 100vh !important;
    width: 100% !important;
    max-width: 100vw !important;
    margin: 0 !important;
    border-radius: 0 !important;
  }
  
  .modal-header {
    padding: 1rem 1.25rem;
  }
  
  .modal-header h2 {
    font-size: 1.2rem;
  }
  
  .modal-content {
    padding: 1rem;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(0) scale(1);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
}
</style>

<script>
console.log('🎯 Profile modal JavaScript loaded');

document.addEventListener('DOMContentLoaded', function() {
  console.log('🎯 Profile modal DOMContentLoaded fired');
  
  // Modal elements
  const closeModalBtn = document.getElementById('close-profile-modal');
  const modalOverlay = document.getElementById('modal-overlay');
  const profileModal = document.getElementById('profile-modal');
  
  const signupForm = document.getElementById('user-signup-form');
  const loginForm = document.getElementById('user-login-form');
  const signupSection = document.getElementById('signup-form');
  const loginSection = document.getElementById('login-form');
  const switchToLogin = document.getElementById('switch-to-login');
  const switchToSignup = document.getElementById('switch-to-signup');

  console.log('🔍 Modal elements:', {
    closeModalBtn: closeModalBtn,
    modalOverlay: modalOverlay,
    profileModal: profileModal
  });

  function closeModal() {
    console.log('🔒 Closing modal');
    if (profileModal) {
      // Use setProperty with 'important' to override CSS !important rules
      profileModal.style.setProperty('display', 'none', 'important');
      document.body.style.overflow = 'auto'; // Restore scrolling
      console.log('✅ Modal closed successfully');
    } else {
      console.error('❌ Profile modal element not found!');
    }
  }

  if (closeModalBtn) {
    console.log('✅ Close button found, attaching listener');
    closeModalBtn.addEventListener('click', function(e) {
      console.log('🖱️ Close button clicked!');
      e.preventDefault();
      e.stopPropagation();
      closeModal();
    });
  } else {
    console.error('❌ Close button not found!');
  }

  if (modalOverlay) {
    console.log('✅ Modal overlay found, attaching listener');
    modalOverlay.addEventListener('click', closeModal);
  } else {
    console.error('❌ Modal overlay not found!');
  }

  // Close modal on Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && profileModal && profileModal.style.display === 'flex') {
      closeModal();
    }
  });

  // Form switching
  if (switchToLogin) {
    switchToLogin.addEventListener('click', function(e) {
      e.preventDefault();
      signupSection.style.display = 'none';
      loginSection.style.display = 'block';
      clearMessages();
    });
  }

  if (switchToSignup) {
    switchToSignup.addEventListener('click', function(e) {
      e.preventDefault();
      loginSection.style.display = 'none';
      signupSection.style.display = 'block';
      clearMessages();
    });
  }

  // Signup form handling
  if (signupForm) {
    signupForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = document.getElementById('signup-submit');
      const btnText = submitBtn.querySelector('.btn-text');
      const btnLoading = submitBtn.querySelector('.btn-loading');
      
      // Show loading state
      submitBtn.disabled = true;
      btnText.style.display = 'none';
      btnLoading.style.display = 'inline';
      
      try {
        const formData = new FormData(signupForm);
        const password = formData.get('password');
        const confirmPassword = formData.get('confirm-password');
        
        // Validate passwords match
        if (password !== confirmPassword) {
          showError('Passwords do not match');
          return;
        }
        
        // Get preferences
        const preferences = Array.from(document.querySelectorAll('input[name="preferences"]:checked'))
          .map(cb => cb.value);
        
        // Create user profile data
        const profileData = {
          email: formData.get('email'),
          password: password,
          full_name: formData.get('full-name'),
          phone: formData.get('phone') || null,
          birthday: formData.get('birthday') || null,
          style_preferences: preferences,
          newsletter_subscribed: formData.has('newsletter'),
          shopify_customer_id: window.Shopify?.customer?.id || null
        };
        
        // Sign up user
        if (window.supabaseClient) {
          const result = await window.supabaseClient.signUp(profileData.email, profileData.password, {
            full_name: profileData.full_name,
            phone: profileData.phone,
            birthday: profileData.birthday,
            style_preferences: profileData.style_preferences,
            newsletter_subscribed: profileData.newsletter_subscribed,
            shopify_customer_id: profileData.shopify_customer_id
          });
          
          if (result.error) {
            showError(result.error.message || 'Signup failed. Please try again.');
          } else {
            showSuccess('Profile created successfully! Please check your email to verify your account.');
            signupForm.reset();
            
            // Track signup event
            if (window.trackPageView) {
              window.trackPageView({source: 'user_signup', profile_created: true});
            }
            
            // Close modal after 2 seconds
            setTimeout(() => {
              closeModal();
            }, 2000);
          }
        } else {
          showError('Authentication service not available. Please try again later.');
        }
        
      } catch (error) {
        console.error('Signup error:', error);
        showError('An unexpected error occurred. Please try again.');
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      }
    });
  }

  // Login form handling - Allow Shopify native authentication
  if (loginForm) {
    loginForm.addEventListener('submit', function(e) {
      // Don't prevent default - let Shopify handle authentication
      const submitBtn = document.getElementById('login-submit');
      const btnText = submitBtn.querySelector('.btn-text');
      const btnLoading = submitBtn.querySelector('.btn-loading');
      
      // Show loading state
      submitBtn.disabled = true;
      btnText.style.display = 'none';
      btnLoading.style.display = 'inline';
      
      // Let the form submit naturally to Shopify
      // Shopify will handle authentication and redirect as needed
    });
  }

  function showSuccess(message) {
    clearMessages();
    const successDiv = document.getElementById('success-message');
    const successText = document.getElementById('success-text');
    if (successText) successText.textContent = message;
    if (successDiv) successDiv.style.display = 'flex';
  }

  function showError(message) {
    clearMessages();
    const errorDiv = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    if (errorText) errorText.textContent = message;
    if (errorDiv) errorDiv.style.display = 'flex';
  }

  function clearMessages() {
    const successMsg = document.getElementById('success-message');
    const errorMsg = document.getElementById('error-message');
    if (successMsg) successMsg.style.display = 'none';
    if (errorMsg) errorMsg.style.display = 'none';
  }

  // Clear individual field errors on input
  const inputs = document.querySelectorAll('#profile-modal input');
  inputs.forEach(input => {
    input.addEventListener('input', function() {
      const errorSpan = document.getElementById(this.id + '-error');
      if (errorSpan) {
        errorSpan.textContent = '';
      }
    });
  });

  console.log('✅ Profile modal fully initialized');
});
</script>

