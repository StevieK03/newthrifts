<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
    <title>{% if page_title %}{{ page_title }} ‚Äì {% endif %}{{ shop.name }}</title>

    {%- comment -%} Use Primary accent for browser UI color (falls back if not set) {%- endcomment -%}
    <meta name="theme-color" content="{{ settings.accent | default: '#27e1c1' }}">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Inter:wght@300;400;500;600;700;800&family=Playfair+Display:wght@400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    {{ 'base.css' | asset_url | stylesheet_tag }}

    {%- comment -%} ‚úÖ Dark Mode styles {%- endcomment -%}
    {{ 'dark-mode.css' | asset_url | stylesheet_tag }}

    {%- comment -%} ‚úÖ Halloween styles (global include) {%- endcomment -%}
    {{ 'halloween.css' | asset_url | stylesheet_tag }}

    {%- comment -%}
      Moved the ‚Äúforce-brand-teal‚Äù block into <head> (valid HTML)
    {%- endcomment -%}
     <style id="force-brand-teal">
      :root{ --brand-teal: rgb(0, 0, 0); } /* your teal */

      /* Higher specificity + !important so it beats any earlier .brand-line rules */
      html body header.header .brand-title .brand-line{
        color: var(--brand-teal) !important;

      /* Make sure pills stay red-glow too (even if --accent is pink) */
      html body header.header .nav a{
        box-shadow: 0 4px 14px rgba(241, 20, 31, 0.18), 0 0 10px rgba(242, 10, 2, 0.94) !important;
        border: 1px solid rgba(246, 5, 5, 0.25) !important;
      }
      html body header.header .nav a:hover{
        background: rgba(39,225,193,.10) !important;
        border-color: rgba(39,225,193,.45) !important;
        box-shadow: 0 8px 20px rgba(39,225,193,.28), 0 0 18px rgba(39,225,193,.35) !important;
      }
    </style>

    {%- comment -%} Theme variables + header/nav styling {%- endcomment -%}
    <style>
      :root{
        --bg-deep: {{ settings.bg_deep | default: '#0B1220' }};
        --bg-mid: {{ settings.bg_mid | default: '#1A1031' }};
        --neon-teal: {{ settings.neon_teal | default: '#00F5D4' }};
        --neon-pink: {{ settings.neon_pink | default: '#FFFFFF' }};
        --neon-purple: {{ settings.neon_purple | default: '#9D4EDD' }};
        --accent: {{ settings.accent | default: '#27e1c1' }};
        --accent-2: {{ settings.accent_2 | default: '#ff4fa3' }};
      }

      /* ===== HEADER: force white + neon brand + pill nav ===== */
      body > header.header,
      .header{
        background:#fff !important;
        color:#0f172a;
        border-bottom:1px solid rgba(0,0,0,.06);
        position:relative; z-index:50;
      }
      .header::before, .header::after{ background:transparent !important; }

      .header__inner{ display:flex; align-items:center; justify-content:space-between; padding:14px 20px; }

      /* Logo image styling */
      .brand-logo-link{ display:flex; align-items:center; justify-content:center; text-decoration:none; margin:0; }
      .brand-logo-img{ 
        max-height:50px; 
        width:auto; 
        display:block;
        transition: transform 0.3s ease;
      }
      .brand-logo-img:hover{ transform:scale(1.05); }
      @media (min-width:768px){ .brand-logo-img{ max-height:60px; } }

      /* Fallback text brand (teal + glow) */
      .brand-title{ display:flex; flex-direction:column; align-items:center; justify-content:center; text-decoration:none; margin:0; }
      .brand-line{
        font-family:'Bebas Neue', sans-serif; line-height:0.95; letter-spacing:.08em; text-align:center;
        color: var(--accent,rgba(39,225,193,.70)) !important;
        text-shadow:
          0 0 6px rgba(39,225,193,.70),
          0 0 14px rgba(39,225,193,.50),
          0 0 24px rgba(39,225,193,.35);
        font-size:26px;
      }
      @media (min-width:768px){ .brand-line{ font-size:32px; } }

      /* Menu layout: horizontal, no bullets */
      .nav{ display:flex; align-items:center; }
      .nav .menu, .nav ul{
        display:flex !important; flex-wrap:wrap; gap:10px; align-items:center;
        margin:0 !important; padding:0 !important; list-style:none !important;
      }
      .nav li{ list-style:none !important; }

      /* Pill links + black glow */
.nav .menu a,
.nav ul a,
.nav a {
  display:inline-flex; align-items:center; justify-content:center;
  padding:9px 16px; border-radius:9999px; text-decoration:none;
  background:#fff; color:#0f172a; font-weight:700; letter-spacing:.01em;
  border:1px solid rgba(0,0,0,.10);
  /* changed teal glow to black glow */
  box-shadow: 0 4px 14px rgba(0,0,0,.18), 0 0 10px rgba(0,0,0,.22);
  transition:transform .15s ease, box-shadow .22s ease, background .22s ease, border-color .22s ease;
}
.nav .menu a:hover,
.nav ul a:hover,
.nav a:hover {
  /* changed hover teal to black */
  background: rgba(0,0,0,.05); /* subtle black tint on hover */
  border-color: rgba(0,0,0,.45);
  transform: translateY(-1px);
  box-shadow: 0 8px 20px rgba(0,0,0,.28), 0 0 18px rgba(0,0,0,.35);
}

    </style>

    <script>document.documentElement.classList.add('no-js');</script>
    {{ content_for_header }}
  </head>

  <body>
    <!-- Cursor trail and particles elements -->
    <div id="cursor-trail"></div>
    <div id="floating-particles"></div>
    
    {% section 'header' %}

    <!-- Quick View Modal (Global) -->
    <div class="quick-view-modal" id="quick-view-modal" role="dialog" aria-hidden="true">
      <div class="quick-view-overlay" id="quick-view-overlay"></div>
      <div class="quick-view-container">
        <div class="quick-view-header">
          <h2 id="quick-view-title">Quick View</h2>
          <button class="quick-view-close" id="quick-view-close" aria-label="Close">√ó</button>
        </div>
        <div class="quick-view-content" id="quick-view-content">
          <div class="quick-view-loading">Loading...</div>
        </div>
      </div>
    </div>

    <!-- Wishlist Dropdown (Global) -->
    <div class="wishlist-dropdown" id="wishlist-dropdown">
      <div class="wishlist-header">
        <h3>My Wishlist</h3>
        <button class="wishlist-close" id="wishlist-close" aria-label="Close wishlist">√ó</button>
      </div>
      
      <div class="wishlist-content" id="wishlist-content">
        <div class="wishlist-empty" id="wishlist-empty">
          <div class="empty-heart">üíù</div>
          <h4>Your wishlist is empty</h4>
          <p>Save your favorite products to view them here</p>
        </div>
        
        <div class="wishlist-items" id="wishlist-items">
          <!-- Wishlist items will be populated by JavaScript -->
        </div>
      </div>
      
      <div class="wishlist-footer">
        <button class="wishlist-clear" id="wishlist-clear">Clear All</button>
        <button class="wishlist-share" id="wishlist-share">Share Wishlist</button>
      </div>
    </div>

    <main role="main">
      {{ content_for_layout }}
    </main>

    <footer class="footer">
      <div class="container grid grid--3">
        <div>
          <h4 style="margin:0 0 10px 0;">About</h4>
          <p style="opacity:.85;">{{ settings.footer_about | default: "Sunset palettes, neon nights, and beach-breeze basics." }}</p>
        </div>
        <div>
          <h4 style="margin:0 0 10px 0;">Links</h4>
          {% render 'menu', menu: settings.footer_menu %}
        </div>
        <div>
          <h4 style="margin:0 0 10px 0;">Newsletter</h4>
          {% form 'customer' %}
            <input type="email" name="contact[email]" placeholder="Your email" style="padding:12px; border-radius:12px; border:1px solid rgba(0,0,0,.2); background:#fff; color:#0f172a; width:100%; margin-bottom:10px;" required>
            <button class="button button--primary" type="submit">Subscribe</button>
          {% endform %}
        </div>
      </div>
      <div class="container" style="margin-top:20px;">
        <small>¬© {{ 'now' | date: '%Y' }} {{ shop.name }}. All rights reserved.</small>
      </div>
    </footer>

    <!-- Mobile Navigation -->

    {%- comment -%} ‚úÖ Halloween script (global include, non-module) {%- endcomment -%}
    {{ 'halloween.js' | asset_url | append: '?v=' | append: 'now' | date: '%s' | script_tag }}

    <!-- Global Interactive Elements - Removed cursor trail and floating particles -->
    
    <script src="{{ 'theme.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
    <script src="{{ 'swatch.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
    <script src="{{ 'visitor-counter.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
    
    <!-- Enhanced Homepage Features -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Custom Cursor Trail Effect
      const cursorTrail = document.getElementById('cursor-trail');
      let mouseX = 0, mouseY = 0;
      let trailX = 0, trailY = 0;
      
      document.addEventListener('mousemove', function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
      });
      
      function animateTrail() {
        if (!cursorTrail) return; // Exit if element doesn't exist
        
        trailX += (mouseX - trailX) * 0.1;
        trailY += (mouseY - trailY) * 0.1;
        
        cursorTrail.style.left = trailX + 'px';
        cursorTrail.style.top = trailY + 'px';
        
        requestAnimationFrame(animateTrail);
      }
      if (cursorTrail) animateTrail();
      
      // Floating Particles System
      const particlesContainer = document.getElementById('floating-particles');
      const particleCount = 10;
      
      if (particlesContainer) {
        for (let i = 0; i < particleCount; i++) {
          const particle = document.createElement('div');
          particle.className = 'floating-particle';
          particle.style.position = 'fixed';
          particle.style.width = Math.random() * 2 + 'px';
          particle.style.height = particle.style.width;
          particle.style.background = Math.random() > 0.5 ? 'rgba(0,0,0,0.1)' : 'rgba(0,0,0,0.05)';
          particle.style.borderRadius = '50%';
          particle.style.left = Math.random() * 100 + '%';
          particle.style.top = Math.random() * 100 + '%';
          particle.style.pointerEvents = 'none';
          particle.style.zIndex = '1';
          particle.style.animation = `particleFloat ${Math.random() * 20 + 10}s linear infinite`;
          particle.style.animationDelay = Math.random() * 10 + 's';
          particlesContainer.appendChild(particle);
        }
      }
      
      // Parallax Scrolling Effect
      const parallaxElements = document.querySelectorAll('[data-parallax]');
      
      function updateParallax() {
        const scrolled = window.pageYOffset;
        const rate = scrolled * -0.5;
        
        parallaxElements.forEach(element => {
          const speed = element.dataset.parallax || 0.5;
          element.style.transform = `translateY(${scrolled * speed}px)`;
        });
      }
      
      window.addEventListener('scroll', updateParallax);
      
      // Smooth Scroll for Anchor Links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      // Intersection Observer for Fade-in Animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
          }
        });
      }, observerOptions);
      
      // Observe all sections for animations
      document.querySelectorAll('section').forEach(section => {
        section.classList.add('fade-in-section');
        observer.observe(section);
      });
    });
    </script>
    
    <style>
    /* Global Interactive Styles */
    /* Removed cursor trail and floating particles styles */
    
    @keyframes particleFloat {
      0% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
      10% { opacity: 1; }
      90% { opacity: 1; }
      100% { transform: translateY(-100px) rotate(360deg); opacity: 0; }
    }
    
    /* Fade-in Section Animations */
    .fade-in-section {
      opacity: 0;
      transform: translateY(30px);
      transition: all 0.6s ease;
    }
    
    .fade-in-section.animate-in {
      opacity: 1;
      transform: translateY(0);
    }
    
    /* Enhanced Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: #0f172a;
    }
    
    ::-webkit-scrollbar-thumb {
      background: linear-gradient(45deg, #27e1c1, #ff4fa3);
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(45deg, #ff4fa3, #27e1c1);
    }
    
    /* Smooth scrolling */
    html {
      scroll-behavior: smooth;
    }
    
    /* Mobile optimizations - cleaned up */
    
    /* Global Quick View Modal Styles */
    .quick-view-modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 9999;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .quick-view-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .quick-view-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      backdrop-filter: blur(4px);
    }

    .quick-view-container {
      position: relative;
      background: white;
      border-radius: 16px;
      max-width: 90vw;
      max-height: 90vh;
      width: 800px;
      overflow: hidden;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      transform: scale(0.9);
      transition: transform 0.3s ease;
    }

    .quick-view-modal.active .quick-view-container {
      transform: scale(1);
    }

    .quick-view-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 20px 24px;
      border-bottom: 1px solid #e5e7eb;
      background: #f9fafb;
    }

    .quick-view-header h2 {
      margin: 0;
      font-size: 18px;
      font-weight: 600;
      color: #111827;
    }

    .quick-view-close {
      background: none;
      border: none;
      color: #6b7280;
      cursor: pointer;
      padding: 8px;
      border-radius: 8px;
      transition: all 0.2s ease;
      font-size: 24px;
    }

    .quick-view-close:hover {
      background: #e5e7eb;
      color: #374151;
    }

    .quick-view-content {
      padding: 24px;
      max-height: calc(90vh - 80px);
      overflow-y: auto;
    }

    .quick-view-loading {
      text-align: center;
      padding: 40px;
      color: #6b7280;
    }
    
    /* Mobile Quick View - Fits phone frame perfectly */
    @media (max-width: 768px) {
      .quick-view-container {
        width: 100vw !important;
        height: 100vh !important;
        margin: 0 !important;
        border-radius: 0 !important;
        max-width: none !important;
        max-height: none !important;
        top: 0 !important;
        left: 0 !important;
        transform: none !important;
        display: flex !important;
        flex-direction: column !important;
      }
      
      .quick-view-header {
        flex-shrink: 0 !important;
        padding: 15px 20px !important;
        background: white !important;
        border-bottom: 1px solid #e5e7eb !important;
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
      }
      
      .quick-view-content {
        flex: 1 !important;
        padding: 15px !important;
        overflow-y: auto !important;
        -webkit-overflow-scrolling: touch !important;
        display: flex !important;
        flex-direction: column !important;
      }
      
      .quick-view-product {
        display: flex !important;
        flex-direction: column !important;
        gap: 12px !important;
        flex: 1 !important;
      }
      
      .quick-view-image-section {
        flex-shrink: 0 !important;
        text-align: center !important;
      }
      
      .quick-view-details-section {
        flex: 1 !important;
        display: flex !important;
        flex-direction: column !important;
        min-height: 0 !important;
      }
      
      #quick-view-image {
        max-width: 100% !important;
        max-height: 200px !important;
        width: auto !important;
        height: auto !important;
        object-fit: contain !important;
        border-radius: 8px !important;
      }
      
      #quick-view-title {
        font-size: 18px !important;
        margin-bottom: 6px !important;
        line-height: 1.2 !important;
        text-align: center !important;
      }
      
      #quick-view-price {
        font-size: 16px !important;
        margin-bottom: 10px !important;
        text-align: center !important;
      }
      
      .quick-view-swatches {
        justify-content: center !important;
        flex-wrap: wrap !important;
        gap: 8px !important;
        margin-bottom: 10px !important;
      }
      
      .quick-view-swatch {
        width: 36px !important;
        height: 36px !important;
        border-radius: 6px !important;
        border: 2px solid #e5e7eb !important;
        position: relative !important;
      }
      
      .quick-view-swatch:hover {
        border-color: #3b82f6 !important;
        transform: scale(1.05) !important;
      }
      
      .quick-view-swatch.active {
        border-color: #3b82f6 !important;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3) !important;
      }
      
      .quick-view-swatch img {
        width: 100% !important;
        height: 100% !important;
        object-fit: cover !important;
        border-radius: 4px !important;
      }
      
      .quick-view-options {
        margin-bottom: 10px !important;
      }
      
      .quick-view-option-select {
        width: 100% !important;
        padding: 8px 12px !important;
        font-size: 14px !important;
        margin-bottom: 8px !important;
      }
      
      .quick-view-info-sections {
        flex: 1 !important;
        overflow-y: auto !important;
        margin-bottom: 10px !important;
        max-height: 200px !important;
      }
      
      .info-section {
        margin-bottom: 8px !important;
      }
      
      .info-section-toggle {
        width: 100% !important;
        padding: 10px 12px !important;
        font-size: 14px !important;
        margin-bottom: 4px !important;
        background: #f8f9fa !important;
        border: 1px solid #e9ecef !important;
        border-radius: 6px !important;
        text-align: left !important;
        cursor: pointer !important;
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        transition: all 0.3s ease !important;
      }
      
      .info-section-toggle:hover {
        background: #e9ecef !important;
        border-color: #dee2e6 !important;
      }
      
      .section-title {
        font-weight: 600 !important;
        color: #374151 !important;
        font-size: 14px !important;
      }
      
      .toggle-icon {
        transition: transform 0.3s ease !important;
        font-size: 12px !important;
        color: #6b7280 !important;
      }
      
      .section-content {
        padding: 10px 12px !important;
        font-size: 13px !important;
        line-height: 1.4 !important;
        margin-bottom: 6px !important;
        background: #f9fafb !important;
        border-radius: 6px !important;
        color: #4b5563 !important;
        border: 1px solid #e5e7eb !important;
        display: none !important;
      }
      
      .section-content[style*="block"] {
        display: block !important;
      }
      
      #quick-view-add-to-cart {
        width: 100% !important;
        padding: 12px 16px !important;
        font-size: 14px !important;
        font-weight: 600 !important;
        border-radius: 6px !important;
        margin-bottom: 8px !important;
        flex-shrink: 0 !important;
      }
      
      .quick-view-close {
        width: 36px !important;
        height: 36px !important;
        font-size: 20px !important;
        background: white !important;
        border: 1px solid #e5e7eb !important;
        border-radius: 50% !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      }
    }

    /* Global Wishlist Dropdown Styles */
    .wishlist-dropdown {
      position: fixed;
      top: 70px;
      right: 60px;
      width: 400px;
      background: white;
      border-radius: 12px;
      box-shadow: 0 12px 48px rgba(0, 0, 0, 0.15);
      border: 1px solid #e5e7eb;
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      z-index: 1000;
      max-height: 500px;
      overflow: hidden;
    }

    .wishlist-dropdown.active {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .wishlist-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 20px 24px;
      border-bottom: 1px solid #f3f4f6;
      background: #f9fafb;
      border-radius: 12px 12px 0 0;
    }

    .wishlist-header h3 {
      margin: 0;
      font-size: 18px;
      font-weight: 600;
      color: #111827;
    }

    .wishlist-close {
      background: none;
      border: none;
      color: #6b7280;
      cursor: pointer;
      padding: 4px 8px;
      border-radius: 4px;
      transition: all 0.2s ease;
      font-size: 20px;
    }

    .wishlist-close:hover {
      background: #e5e7eb;
      color: #374151;
    }

    .wishlist-content {
      max-height: 350px;
      overflow-y: auto;
    }

    .wishlist-empty {
      text-align: center;
      padding: 40px 20px;
      color: #6b7280;
    }

    .empty-heart {
      font-size: 48px;
      margin-bottom: 16px;
    }

    .wishlist-empty h4 {
      margin: 0 0 8px 0;
      color: #374151;
      font-size: 16px;
    }

    .wishlist-empty p {
      margin: 0;
      font-size: 14px;
    }

    .wishlist-footer {
      display: flex;
      gap: 8px;
      padding: 16px 20px;
      border-top: 1px solid #f3f4f6;
      background: #f9fafb;
      border-radius: 0 0 12px 12px;
    }

    .wishlist-clear,
    .wishlist-share {
      flex: 1;
      padding: 8px 16px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      background: white;
      color: #374151;
    }

    .wishlist-clear:hover {
      background: #fee2e2;
      border-color: #fca5a5;
      color: #dc2626;
    }

    .wishlist-share:hover {
      background: #eff6ff;
      border-color: #93c5fd;
      color: #2563eb;
    }

    @media (max-width: 768px) {
      .wishlist-dropdown {
        width: 90vw;
        max-width: 350px;
        right: 5vw;
      }
    }
    </style>
    
    <!-- Global Wishlist JavaScript -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Global wishlist functionality
      let wishlist = JSON.parse(localStorage.getItem('newthrifts_wishlist') || '[]');
      
      const headerWishlistToggle = document.getElementById('header-wishlist-toggle');
      const headerWishlistCount = document.getElementById('header-wishlist-count');
      const wishlistDropdown = document.getElementById('wishlist-dropdown');
      const wishlistClose = document.getElementById('wishlist-close');
      const wishlistEmpty = document.getElementById('wishlist-empty');
      const wishlistItems = document.getElementById('wishlist-items');
      
      // Update wishlist UI
      function updateWishlistUI() {
        const count = wishlist.length;
        
        if (headerWishlistCount) {
          headerWishlistCount.textContent = count;
          if (count > 0) {
            headerWishlistCount.classList.add('visible');
            headerWishlistToggle?.classList.add('has-items');
          } else {
            headerWishlistCount.classList.remove('visible');
            headerWishlistToggle?.classList.remove('has-items');
          }
        }
        
        // Update dropdown content
        if (wishlistEmpty && wishlistItems) {
          if (count === 0) {
            wishlistEmpty.style.display = 'block';
            wishlistItems.style.display = 'none';
          } else {
            wishlistEmpty.style.display = 'none';
            wishlistItems.style.display = 'block';
            renderWishlistItems();
          }
        }
      }
      
      // Render wishlist items
      function renderWishlistItems() {
        if (!wishlistItems) return;
        
        wishlistItems.innerHTML = wishlist.map(item => `
          <div class="wishlist-item" style="display: flex; align-items: center; padding: 12px; border-bottom: 1px solid #f3f4f6;">
            <img src="${item.image}" alt="${item.title}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 6px; margin-right: 12px;">
            <div style="flex: 1;">
              <h4 style="margin: 0 0 4px 0; font-size: 14px; color: #111827;">${item.title}</h4>
              <div style="font-size: 14px; color: #dc2626; font-weight: 600;">${item.price}</div>
            </div>
            <button onclick="removeFromWishlist('${item.id}')" style="background: none; border: none; color: #6b7280; cursor: pointer; padding: 4px;">√ó</button>
          </div>
        `).join('');
      }
      
      // Add to wishlist function
      window.addToWishlist = function(productData) {
        if (wishlist.find(item => item.id === productData.id)) {
          showMessage('Already in wishlist!', 'info');
          return false;
        }
        
        wishlist.push(productData);
        localStorage.setItem('newthrifts_wishlist', JSON.stringify(wishlist));
        updateWishlistUI();
        showMessage(`${productData.title} added to wishlist!`, 'success');
        return true;
      };
      
      // Remove from wishlist function
      window.removeFromWishlist = function(productId) {
        const index = wishlist.findIndex(item => item.id === productId);
        if (index > -1) {
          const removedItem = wishlist.splice(index, 1)[0];
          localStorage.setItem('newthrifts_wishlist', JSON.stringify(wishlist));
          updateWishlistUI();
          showMessage(`${removedItem.title} removed from wishlist!`, 'info');
        }
      };
      
      // Show message function
      function showMessage(message, type = 'info') {
        const messageEl = document.createElement('div');
        messageEl.textContent = message;
        Object.assign(messageEl.style, {
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#6b7280',
          color: 'white',
          padding: '12px 20px',
          borderRadius: '8px',
          fontSize: '14px',
          fontWeight: '500',
          zIndex: '10000',
          boxShadow: '0 4px 16px rgba(0, 0, 0, 0.15)',
          transform: 'translateX(100%)',
          transition: 'transform 0.3s ease'
        });
        
        document.body.appendChild(messageEl);
        
        setTimeout(() => messageEl.style.transform = 'translateX(0)', 100);
        setTimeout(() => {
          messageEl.style.transform = 'translateX(100%)';
          setTimeout(() => {
            if (document.body.contains(messageEl)) {
              document.body.removeChild(messageEl);
            }
          }, 300);
        }, 3000);
      }
      
      // Toggle wishlist dropdown
      if (headerWishlistToggle) {
        headerWishlistToggle.addEventListener('click', function() {
          wishlistDropdown.classList.toggle('active');
        });
      }
      
      if (wishlistClose) {
        wishlistClose.addEventListener('click', function() {
          wishlistDropdown.classList.remove('active');
        });
      }
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.wishlist-dropdown') && !e.target.closest('#header-wishlist-toggle')) {
          wishlistDropdown.classList.remove('active');
        }
      });
      
      // Initialize
      updateWishlistUI();
      
      console.log('Global wishlist initialized with', wishlist.length, 'items');
      
      // Global Quick View functionality
      const quickViewModal = document.getElementById('quick-view-modal');
      const quickViewOverlay = document.getElementById('quick-view-overlay');
      const quickViewClose = document.getElementById('quick-view-close');
      const quickViewContent = document.getElementById('quick-view-content');
      const quickViewTitle = document.getElementById('quick-view-title');
      
      // Open Quick View function
      window.openQuickView = function(productHandle) {
        showQuickViewModal();
        loadQuickViewProduct(productHandle);
      };
      
      function showQuickViewModal() {
        quickViewModal.classList.add('active');
        document.body.style.overflow = 'hidden';
        quickViewModal.setAttribute('aria-hidden', 'false');
      }
      
      function hideQuickViewModal() {
        quickViewModal.classList.remove('active');
        document.body.style.overflow = '';
        quickViewModal.setAttribute('aria-hidden', 'true');
      }
      
      async function loadQuickViewProduct(productHandle) {
        try {
          quickViewContent.innerHTML = '<div class="quick-view-loading">Loading product...</div>';
          
          const response = await fetch(`/products/${productHandle}.js`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const product = await response.json();
          
          // Validate product data
          if (!product || !product.title) {
            throw new Error('Invalid product data received');
          }
          
          quickViewTitle.textContent = product.title;
          
          // Ensure variants exist
          if (!product.variants || product.variants.length === 0) {
            throw new Error('No variants available for this product');
          }
          
          const firstVariant = product.variants[0];
          
          // Generate swatches HTML
          let swatchesHTML = '';
          if (product.options && product.options.length > 0) {
            const colorOption = product.options.find(opt => opt.name && opt.name.toLowerCase() === 'color');
            if (colorOption && colorOption.values && colorOption.values.length > 1) {
              swatchesHTML = `
                <div style="margin-bottom: 20px;">
                  <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Color:</label>
                  <div class="quick-view-swatches" style="display: flex; gap: 8px; flex-wrap: wrap;">
                    ${colorOption.values.map((color, index) => {
                      // Find variant that matches this color with default size
                      const defaultSize = product.options.find(opt => opt.name && opt.name.toLowerCase() !== 'color')?.values?.[0];
                      const variant = product.variants.find(v => {
                        if (!v.options) return false;
                        const colorIndex = product.options.findIndex(opt => opt.name && opt.name.toLowerCase() === 'color');
                        const sizeIndex = product.options.findIndex(opt => opt.name && opt.name.toLowerCase() !== 'color');
                        return v.options[colorIndex] === color && 
                               (sizeIndex === -1 || v.options[sizeIndex] === defaultSize);
                      });
                      const colorClass = color.toLowerCase().replace(/\s+/g, '-');
                      return `
                        <button class="quick-view-swatch ${index === 0 ? 'selected' : ''}" 
                                data-color="${color}" 
                                data-variant-id="${variant?.id}"
                                style="width: 40px; height: 40px; border-radius: 50%; border: 2px solid ${index === 0 ? '#27e1c1' : '#e5e7eb'}; cursor: pointer; transition: all 0.2s ease;"
                                title="${color}">
                          <div style="width: 100%; height: 100%; border-radius: 50%; background: ${getSwatchColor(color)};"></div>
                        </button>
                      `;
                    }).join('')}
                  </div>
                </div>
              `;
            }
          }
          
          // Clean product title - remove vendor info
          let cleanTitle = product.title;
          // Remove common vendor patterns
          cleanTitle = cleanTitle.replace(/\s*\|\s*[A-Z0-9\s]+$/, ''); // Remove | M&O 4800 type patterns
          cleanTitle = cleanTitle.replace(/\s*-\s*[A-Z0-9\s]+$/, ''); // Remove - VENDOR patterns
          cleanTitle = cleanTitle.replace(/\s*by\s+[A-Za-z0-9\s]+$/i, ''); // Remove by VENDOR patterns
          cleanTitle = cleanTitle.replace(/\s*\([^)]*\)\s*$/, ''); // Remove (VENDOR) patterns
          
          quickViewContent.innerHTML = `
            <div class="quick-view-product" style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
              <div class="quick-view-image-section">
                <img id="quick-view-image" src="${product.images[0]}" alt="${cleanTitle}" style="width: 100%; border-radius: 8px;">
              </div>
              <div class="quick-view-details-section">
                <h3 id="quick-view-title" style="margin: 0 0 12px 0; font-size: 24px;">${cleanTitle}</h3>
                <div id="quick-view-price" style="font-size: 20px; color: #dc2626; font-weight: 600; margin-bottom: 16px;">
                  ${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(firstVariant.price / 100)}
                </div>
                ${swatchesHTML}
                
                <!-- Size and Options Dropdowns -->
                <div class="quick-view-options" style="margin-bottom: 16px;">
                  ${generateQuickViewOptions(product, firstVariant)}
                </div>
                
                <!-- Collapsible Product Information Sections -->
                <div class="quick-view-info-sections" style="margin-bottom: 24px;">
                  <div class="info-section">
                    <button class="info-section-toggle" style="width: 100%; padding: 12px 16px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                      <span class="section-title" style="font-weight: 600; color: #374151;">Product Description</span>
                      <span class="toggle-icon" style="transition: transform 0.3s ease;">‚ñº</span>
                    </button>
                    <div class="section-content" style="display: none; padding: 16px; background: #f9fafb; border-radius: 8px; color: #6b7280; line-height: 1.6;">
                      ${product.description || 'No description available.'}
                    </div>
                  </div>
                  
                  <div class="info-section">
                    <button class="info-section-toggle" style="width: 100%; padding: 12px 16px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                      <span class="section-title" style="font-weight: 600; color: #374151;">Product Features</span>
                      <span class="toggle-icon" style="transition: transform 0.3s ease;">‚ñº</span>
                    </button>
                    <div class="section-content" style="display: none; padding: 16px; background: #f9fafb; border-radius: 8px; color: #6b7280; line-height: 1.6;">
                      <ul style="margin: 0; padding-left: 20px;">
                        <li>High-quality materials</li>
                        <li>Comfortable fit</li>
                        <li>Durable construction</li>
                        <li>Easy care instructions</li>
                      </ul>
                    </div>
                  </div>
                  
                  <div class="info-section">
                    <button class="info-section-toggle" style="width: 100%; padding: 12px 16px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                      <span class="section-title" style="font-weight: 600; color: #374151;">Care Instructions</span>
                      <span class="toggle-icon" style="transition: transform 0.3s ease;">‚ñº</span>
                    </button>
                    <div class="section-content" style="display: none; padding: 16px; background: #f9fafb; border-radius: 8px; color: #6b7280; line-height: 1.6;">
                      <ul style="margin: 0; padding-left: 20px;">
                        <li>Machine wash cold</li>
                        <li>Tumble dry low</li>
                        <li>Do not bleach</li>
                        <li>Iron on low heat if needed</li>
                      </ul>
                    </div>
                  </div>
                  
                  <div class="info-section">
                    <button class="info-section-toggle" style="width: 100%; padding: 12px 16px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                      <span class="section-title" style="font-weight: 600; color: #374151;">Size Chart</span>
                      <span class="toggle-icon" style="transition: transform 0.3s ease;">‚ñº</span>
                    </button>
                    <div class="section-content" style="display: none; padding: 16px; background: #f9fafb; border-radius: 8px; color: #6b7280; line-height: 1.6;">
                      <p>Size chart information available on full product page.</p>
                    </div>
                  </div>
                </div>
                <button id="quick-view-add-to-cart" onclick="addToCartFromQuickView('${firstVariant.id}')" 
                        style="width: 100%; padding: 16px; background: #27e1c1; color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;"
                        ${!firstVariant.available ? 'disabled' : ''}>
                  ${firstVariant.available ? 'Add to Cart' : 'Sold Out'}
                </button>
                <a href="${product.url}" style="display: block; text-align: center; margin-top: 12px; color: #6b7280; text-decoration: none;">
                  View Full Details
                </a>
              </div>
            </div>
          `;
          
          // Initialize swatch functionality in quick view
          initQuickViewSwatches(product);
          initQuickViewOptions(product);
          
          // Initialize collapsible sections
          initQuickViewSections();
        } catch (error) {
          console.error('Error loading product:', error);
          quickViewContent.innerHTML = '<div class="quick-view-loading">Error loading product</div>';
        }
      }
      
      // Generate dropdown options for Quick View
      function generateQuickViewOptions(product, selectedVariant) {
        console.log('generateQuickViewOptions called with:', { product, selectedVariant });
        let optionsHTML = '';
        
        // Check if product and options exist
        if (!product) {
          console.error('Product is null or undefined');
          return optionsHTML;
        }
        
        if (!product.options) {
          console.error('Product.options is null or undefined');
          return optionsHTML;
        }
        
        console.log('Product options:', product.options);
        console.log('Product options_with_values:', product.options_with_values);
        
        // Use options_with_values if available, otherwise fall back to options
        const options = product.options_with_values || product.options || [];
        console.log('Using options:', options);
        
        // Skip Color option (already handled by swatches)
        if (Array.isArray(options)) {
          options.forEach((option, index) => {
            if (option.name && option.name.toLowerCase() !== 'color') {
            optionsHTML += `
              <div style="margin-bottom: 12px;">
                <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 6px; font-size: 14px;">
                  ${option.name}
                </label>
                <select 
                  class="quick-view-option-select" 
                  data-option-index="${index}"
                  style="width: 100%; padding: 8px 12px; border: 2px solid #e5e7eb; border-radius: 6px; background: white; font-size: 14px; cursor: pointer;">
                  ${option.values.map(value => 
                    `<option value="${value}" ${selectedVariant.options[index] === value ? 'selected' : ''}>${value}</option>`
                  ).join('')}
                </select>
              </div>
            `;
            }
          });
        } else {
          console.error('Options is not an array:', options);
        }
        
        return optionsHTML;
      }
      
      // Swatch color mapping function
      function getSwatchColor(colorName) {
        const colorMap = {
          'black': '#000000',
          'white': '#ffffff',
          'pink': '#ff69b4',
          'blue': '#0066cc',
          'royal': '#4169e1',
          'true royal': '#4169e1',
          'red': '#dc2626',
          'green': '#10b981',
          'neon green': '#00ff00',
          'yellow': '#fbbf24',
          'purple': '#8b5cf6',
          'orange': '#f97316',
          'gray': '#6b7280',
          'grey': '#6b7280',
          'navy': '#1e3a8a',
          'brown': '#92400e',
          'chalky mint': '#a7f3d0',
          'orchid': '#d946ef',
          'peachy': '#fed7aa',
          'ivory': '#fffbeb',
          'new york': '#2563eb',
          'heather': '#9ca3af',
          'charcoal': '#374151',
          'forest': '#065f46',
          'maroon': '#7f1d1d',
          'cream': '#fef7ed',
          'sand': '#fbbf24',
          'slate': '#475569'
        };
        
        const normalizedColor = colorName.toLowerCase().trim();
        return colorMap[normalizedColor] || '#e5e7eb';
      }
      
      // Initialize Quick View swatches
      function initQuickViewSwatches(product) {
        const swatches = document.querySelectorAll('.quick-view-swatch');
        const quickViewImage = document.getElementById('quick-view-image');
        const quickViewPrice = document.getElementById('quick-view-price');
        const addToCartBtn = document.getElementById('quick-view-add-to-cart');
        
        swatches.forEach(swatch => {
          swatch.addEventListener('click', function() {
            // Remove selected state from all swatches
            swatches.forEach(s => {
              s.style.border = '2px solid #e5e7eb';
              s.classList.remove('selected');
            });
            
            // Add selected state to clicked swatch
            this.style.border = '2px solid #27e1c1';
            this.classList.add('selected');
            
            // Find matching variant using all selected options
            const color = this.dataset.color;
            const quickViewSelects = document.querySelectorAll('.quick-view-option-select');
            const selectedOptions = [];
            
            // Get all selected options by index
            quickViewSelects.forEach(select => {
              const optionIndex = parseInt(select.dataset.optionIndex);
              selectedOptions[optionIndex] = select.value;
            });
            
            // Set color option
            const colorOptionIndex = product.options.findIndex(opt => opt.name.toLowerCase() === 'color');
            if (colorOptionIndex >= 0) {
              selectedOptions[colorOptionIndex] = color;
            }
            
            const variant = product.variants.find(v => 
              v.options.every((optVal, index) => optVal === selectedOptions[index])
            );
            
            if (variant) {
              // Update price
              quickViewPrice.textContent = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
              }).format(variant.price / 100);
              
              // Update image if variant has image
              const variantImage = product.images.find(img => img.alt && img.alt.toLowerCase().includes(color.toLowerCase()));
              if (variantImage && quickViewImage) {
                quickViewImage.style.opacity = '0.5';
                setTimeout(() => {
                  quickViewImage.src = variantImage;
                  quickViewImage.style.opacity = '1';
                }, 150);
              }
              
              // Update add to cart button
              addToCartBtn.onclick = () => addToCartFromQuickView(variant.id);
              addToCartBtn.disabled = !variant.available;
              addToCartBtn.textContent = variant.available ? 'Add to Cart' : 'Sold Out';
              addToCartBtn.style.background = variant.available ? '#27e1c1' : '#6b7280';
            }
          });
        });
      }
      
      // Initialize Quick View dropdown options
      function initQuickViewOptions(product) {
        const optionSelects = document.querySelectorAll('.quick-view-option-select');
        optionSelects.forEach(select => {
          select.addEventListener('change', function() {
            const optionIndex = parseInt(this.dataset.optionIndex);
            const selectedValue = this.value;
            
            // Find matching variant using all selected options
            const quickViewSelects = document.querySelectorAll('.quick-view-option-select');
            const selectedOptions = [];
            
            // Get all selected options by index
            quickViewSelects.forEach(select => {
              const optIndex = parseInt(select.dataset.optionIndex);
              selectedOptions[optIndex] = select.value;
            });
            
            // Update the changed option
            selectedOptions[optionIndex] = selectedValue;
            
            const matchingVariant = product.variants.find(variant => 
              variant.options.every((optVal, index) => optVal === selectedOptions[index])
            );
            
            if (matchingVariant) {
              // Update price
              const priceElement = document.getElementById('quick-view-price');
              if (priceElement) {
                priceElement.textContent = new Intl.NumberFormat('en-US', { 
                  style: 'currency', 
                  currency: 'USD' 
                }).format(matchingVariant.price / 100);
              }
              
              // Update add to cart button
              const addToCartBtn = document.getElementById('quick-view-add-to-cart');
              if (addToCartBtn) {
                addToCartBtn.onclick = () => addToCartFromQuickView(matchingVariant.id);
                addToCartBtn.disabled = !matchingVariant.available;
                addToCartBtn.textContent = matchingVariant.available ? 'Add to Cart' : 'Sold Out';
              }
            }
          });
        });
      }
      
      // Initialize collapsible sections in Quick View
      function initQuickViewSections() {
        const toggleButtons = document.querySelectorAll('.info-section-toggle');
        
        toggleButtons.forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const section = this.closest('.info-section');
            const content = section.querySelector('.section-content');
            const icon = this.querySelector('.toggle-icon');
            
            if (content.style.display === 'none' || !content.style.display) {
              content.style.display = 'block';
              icon.style.transform = 'rotate(180deg)';
              this.style.background = '#e9ecef';
              this.style.borderColor = '#dee2e6';
            } else {
              content.style.display = 'none';
              icon.style.transform = 'rotate(0deg)';
              this.style.background = '#f8f9fa';
              this.style.borderColor = '#e9ecef';
            }
          });
        });
      }
      
      // Add to cart from quick view
      window.addToCartFromQuickView = async function(variantId) {
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: variantId, quantity: 1 })
          });
          
          if (response.ok) {
            showMessage('Added to cart!', 'success');
            hideQuickViewModal();
          } else {
            showMessage('Failed to add to cart', 'error');
          }
        } catch (error) {
          console.error('Add to cart error:', error);
          showMessage('Error adding to cart', 'error');
        }
      };
      
      // Quick View event listeners
      if (quickViewClose) {
        quickViewClose.addEventListener('click', hideQuickViewModal);
      }
      
      if (quickViewOverlay) {
        quickViewOverlay.addEventListener('click', hideQuickViewModal);
      }
      
      // Keyboard navigation
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && quickViewModal.classList.contains('active')) {
          hideQuickViewModal();
        }
      });
      
      console.log('Global Quick View initialized');
    });
    </script>
  </body>
</html>
